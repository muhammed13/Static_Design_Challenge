
Static_Design_Challenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000001a  00800060  00800060  00002916  2**0
                  ALLOC
  2 .stab         000040c8  00000000  00000000  00002918  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001706  00000000  00000000  000069e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 57 0d 	jmp	0x1aae	; 0x1aae <__vector_3>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 37       	cpi	r26, 0x7A	; 122
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <main>
      74:	0c 94 4f 14 	jmp	0x289e	; 0x289e <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_init>:
* Return value: u8_error- variable that describe the error status
* Description: This function can set the direction of a full port, a nibble
* or even one pin.
************************************************************************************/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
      7c:	df 93       	push	r29
      7e:	cf 93       	push	r28
      80:	00 d0       	rcall	.+0      	; 0x82 <DIO_init+0x6>
      82:	00 d0       	rcall	.+0      	; 0x84 <DIO_init+0x8>
      84:	0f 92       	push	r0
      86:	cd b7       	in	r28, 0x3d	; 61
      88:	de b7       	in	r29, 0x3e	; 62
      8a:	9b 83       	std	Y+3, r25	; 0x03
      8c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_error;
	if(DIO_info == NULL_Ptr)
      8e:	8a 81       	ldd	r24, Y+2	; 0x02
      90:	9b 81       	ldd	r25, Y+3	; 0x03
      92:	00 97       	sbiw	r24, 0x00	; 0
      94:	19 f4       	brne	.+6      	; 0x9c <DIO_init+0x20>
	{
		u8_error = E_NOk;
      96:	81 e0       	ldi	r24, 0x01	; 1
      98:	89 83       	std	Y+1, r24	; 0x01
      9a:	9d c0       	rjmp	.+314    	; 0x1d6 <DIO_init+0x15a>
	}
	else
	{
		switch(DIO_info->GPIO)
      9c:	ea 81       	ldd	r30, Y+2	; 0x02
      9e:	fb 81       	ldd	r31, Y+3	; 0x03
      a0:	80 81       	ld	r24, Z
      a2:	28 2f       	mov	r18, r24
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	3d 83       	std	Y+5, r19	; 0x05
      a8:	2c 83       	std	Y+4, r18	; 0x04
      aa:	8c 81       	ldd	r24, Y+4	; 0x04
      ac:	9d 81       	ldd	r25, Y+5	; 0x05
      ae:	81 30       	cpi	r24, 0x01	; 1
      b0:	91 05       	cpc	r25, r1
      b2:	a9 f1       	breq	.+106    	; 0x11e <DIO_init+0xa2>
      b4:	2c 81       	ldd	r18, Y+4	; 0x04
      b6:	3d 81       	ldd	r19, Y+5	; 0x05
      b8:	22 30       	cpi	r18, 0x02	; 2
      ba:	31 05       	cpc	r19, r1
      bc:	2c f4       	brge	.+10     	; 0xc8 <DIO_init+0x4c>
      be:	8c 81       	ldd	r24, Y+4	; 0x04
      c0:	9d 81       	ldd	r25, Y+5	; 0x05
      c2:	00 97       	sbiw	r24, 0x00	; 0
      c4:	71 f0       	breq	.+28     	; 0xe2 <DIO_init+0x66>
      c6:	85 c0       	rjmp	.+266    	; 0x1d2 <DIO_init+0x156>
      c8:	2c 81       	ldd	r18, Y+4	; 0x04
      ca:	3d 81       	ldd	r19, Y+5	; 0x05
      cc:	22 30       	cpi	r18, 0x02	; 2
      ce:	31 05       	cpc	r19, r1
      d0:	09 f4       	brne	.+2      	; 0xd4 <DIO_init+0x58>
      d2:	43 c0       	rjmp	.+134    	; 0x15a <DIO_init+0xde>
      d4:	8c 81       	ldd	r24, Y+4	; 0x04
      d6:	9d 81       	ldd	r25, Y+5	; 0x05
      d8:	83 30       	cpi	r24, 0x03	; 3
      da:	91 05       	cpc	r25, r1
      dc:	09 f4       	brne	.+2      	; 0xe0 <DIO_init+0x64>
      de:	5b c0       	rjmp	.+182    	; 0x196 <DIO_init+0x11a>
      e0:	78 c0       	rjmp	.+240    	; 0x1d2 <DIO_init+0x156>
		{
		case GPIOA:
			if(DIO_info->dir == INPUT)
      e2:	ea 81       	ldd	r30, Y+2	; 0x02
      e4:	fb 81       	ldd	r31, Y+3	; 0x03
      e6:	82 81       	ldd	r24, Z+2	; 0x02
      e8:	88 23       	and	r24, r24
      ea:	69 f4       	brne	.+26     	; 0x106 <DIO_init+0x8a>
			{
				PORTA_DIR &= ~(DIO_info->pins);
      ec:	aa e3       	ldi	r26, 0x3A	; 58
      ee:	b0 e0       	ldi	r27, 0x00	; 0
      f0:	ea e3       	ldi	r30, 0x3A	; 58
      f2:	f0 e0       	ldi	r31, 0x00	; 0
      f4:	80 81       	ld	r24, Z
      f6:	98 2f       	mov	r25, r24
      f8:	ea 81       	ldd	r30, Y+2	; 0x02
      fa:	fb 81       	ldd	r31, Y+3	; 0x03
      fc:	81 81       	ldd	r24, Z+1	; 0x01
      fe:	80 95       	com	r24
     100:	89 23       	and	r24, r25
     102:	8c 93       	st	X, r24
     104:	0a c0       	rjmp	.+20     	; 0x11a <DIO_init+0x9e>
			}
			else
			{
				PORTA_DIR |= DIO_info->pins;
     106:	aa e3       	ldi	r26, 0x3A	; 58
     108:	b0 e0       	ldi	r27, 0x00	; 0
     10a:	ea e3       	ldi	r30, 0x3A	; 58
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	90 81       	ld	r25, Z
     110:	ea 81       	ldd	r30, Y+2	; 0x02
     112:	fb 81       	ldd	r31, Y+3	; 0x03
     114:	81 81       	ldd	r24, Z+1	; 0x01
     116:	89 2b       	or	r24, r25
     118:	8c 93       	st	X, r24
			}
			u8_error = E_ok;
     11a:	19 82       	std	Y+1, r1	; 0x01
     11c:	5c c0       	rjmp	.+184    	; 0x1d6 <DIO_init+0x15a>
			break;

		case GPIOB:
			if(DIO_info->dir == INPUT)
     11e:	ea 81       	ldd	r30, Y+2	; 0x02
     120:	fb 81       	ldd	r31, Y+3	; 0x03
     122:	82 81       	ldd	r24, Z+2	; 0x02
     124:	88 23       	and	r24, r24
     126:	69 f4       	brne	.+26     	; 0x142 <DIO_init+0xc6>
			{
				PORTB_DIR &= ~(DIO_info->pins);
     128:	a7 e3       	ldi	r26, 0x37	; 55
     12a:	b0 e0       	ldi	r27, 0x00	; 0
     12c:	e7 e3       	ldi	r30, 0x37	; 55
     12e:	f0 e0       	ldi	r31, 0x00	; 0
     130:	80 81       	ld	r24, Z
     132:	98 2f       	mov	r25, r24
     134:	ea 81       	ldd	r30, Y+2	; 0x02
     136:	fb 81       	ldd	r31, Y+3	; 0x03
     138:	81 81       	ldd	r24, Z+1	; 0x01
     13a:	80 95       	com	r24
     13c:	89 23       	and	r24, r25
     13e:	8c 93       	st	X, r24
     140:	0a c0       	rjmp	.+20     	; 0x156 <DIO_init+0xda>
			}
			else
			{
				PORTB_DIR |= DIO_info->pins;
     142:	a7 e3       	ldi	r26, 0x37	; 55
     144:	b0 e0       	ldi	r27, 0x00	; 0
     146:	e7 e3       	ldi	r30, 0x37	; 55
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	90 81       	ld	r25, Z
     14c:	ea 81       	ldd	r30, Y+2	; 0x02
     14e:	fb 81       	ldd	r31, Y+3	; 0x03
     150:	81 81       	ldd	r24, Z+1	; 0x01
     152:	89 2b       	or	r24, r25
     154:	8c 93       	st	X, r24
			}
			u8_error = E_ok;
     156:	19 82       	std	Y+1, r1	; 0x01
     158:	3e c0       	rjmp	.+124    	; 0x1d6 <DIO_init+0x15a>
			break;
		case GPIOC:
			if(DIO_info->dir == INPUT)
     15a:	ea 81       	ldd	r30, Y+2	; 0x02
     15c:	fb 81       	ldd	r31, Y+3	; 0x03
     15e:	82 81       	ldd	r24, Z+2	; 0x02
     160:	88 23       	and	r24, r24
     162:	69 f4       	brne	.+26     	; 0x17e <DIO_init+0x102>
			{
				PORTC_DIR &= ~(DIO_info->pins);
     164:	a4 e3       	ldi	r26, 0x34	; 52
     166:	b0 e0       	ldi	r27, 0x00	; 0
     168:	e4 e3       	ldi	r30, 0x34	; 52
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	80 81       	ld	r24, Z
     16e:	98 2f       	mov	r25, r24
     170:	ea 81       	ldd	r30, Y+2	; 0x02
     172:	fb 81       	ldd	r31, Y+3	; 0x03
     174:	81 81       	ldd	r24, Z+1	; 0x01
     176:	80 95       	com	r24
     178:	89 23       	and	r24, r25
     17a:	8c 93       	st	X, r24
     17c:	0a c0       	rjmp	.+20     	; 0x192 <DIO_init+0x116>
			}
			else
			{
				PORTC_DIR |= DIO_info->pins;
     17e:	a4 e3       	ldi	r26, 0x34	; 52
     180:	b0 e0       	ldi	r27, 0x00	; 0
     182:	e4 e3       	ldi	r30, 0x34	; 52
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	90 81       	ld	r25, Z
     188:	ea 81       	ldd	r30, Y+2	; 0x02
     18a:	fb 81       	ldd	r31, Y+3	; 0x03
     18c:	81 81       	ldd	r24, Z+1	; 0x01
     18e:	89 2b       	or	r24, r25
     190:	8c 93       	st	X, r24
			}
			u8_error = E_ok;
     192:	19 82       	std	Y+1, r1	; 0x01
     194:	20 c0       	rjmp	.+64     	; 0x1d6 <DIO_init+0x15a>
			break;

		case GPIOD:
			if(DIO_info->dir == INPUT)
     196:	ea 81       	ldd	r30, Y+2	; 0x02
     198:	fb 81       	ldd	r31, Y+3	; 0x03
     19a:	82 81       	ldd	r24, Z+2	; 0x02
     19c:	88 23       	and	r24, r24
     19e:	69 f4       	brne	.+26     	; 0x1ba <DIO_init+0x13e>
			{
				PORTD_DIR &= ~(DIO_info->pins);
     1a0:	a1 e3       	ldi	r26, 0x31	; 49
     1a2:	b0 e0       	ldi	r27, 0x00	; 0
     1a4:	e1 e3       	ldi	r30, 0x31	; 49
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	98 2f       	mov	r25, r24
     1ac:	ea 81       	ldd	r30, Y+2	; 0x02
     1ae:	fb 81       	ldd	r31, Y+3	; 0x03
     1b0:	81 81       	ldd	r24, Z+1	; 0x01
     1b2:	80 95       	com	r24
     1b4:	89 23       	and	r24, r25
     1b6:	8c 93       	st	X, r24
     1b8:	0a c0       	rjmp	.+20     	; 0x1ce <DIO_init+0x152>
			}
			else
			{
				PORTD_DIR |= DIO_info->pins;
     1ba:	a1 e3       	ldi	r26, 0x31	; 49
     1bc:	b0 e0       	ldi	r27, 0x00	; 0
     1be:	e1 e3       	ldi	r30, 0x31	; 49
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	90 81       	ld	r25, Z
     1c4:	ea 81       	ldd	r30, Y+2	; 0x02
     1c6:	fb 81       	ldd	r31, Y+3	; 0x03
     1c8:	81 81       	ldd	r24, Z+1	; 0x01
     1ca:	89 2b       	or	r24, r25
     1cc:	8c 93       	st	X, r24
			}
			u8_error = E_ok;
     1ce:	19 82       	std	Y+1, r1	; 0x01
     1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_init+0x15a>
			break;

		default:
			u8_error = E_NOk;
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return u8_error;
     1d6:	89 81       	ldd	r24, Y+1	; 0x01
}
     1d8:	0f 90       	pop	r0
     1da:	0f 90       	pop	r0
     1dc:	0f 90       	pop	r0
     1de:	0f 90       	pop	r0
     1e0:	0f 90       	pop	r0
     1e2:	cf 91       	pop	r28
     1e4:	df 91       	pop	r29
     1e6:	08 95       	ret

000001e8 <DIO_Write>:
* Return value: u8_error-> variable that describe the error status
* Description: This function can set the value of a full port, a nibble
* or even one pin.
************************************************************************************/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
     1e8:	df 93       	push	r29
     1ea:	cf 93       	push	r28
     1ec:	00 d0       	rcall	.+0      	; 0x1ee <DIO_Write+0x6>
     1ee:	00 d0       	rcall	.+0      	; 0x1f0 <DIO_Write+0x8>
     1f0:	00 d0       	rcall	.+0      	; 0x1f2 <DIO_Write+0xa>
     1f2:	cd b7       	in	r28, 0x3d	; 61
     1f4:	de b7       	in	r29, 0x3e	; 62
     1f6:	8a 83       	std	Y+2, r24	; 0x02
     1f8:	6b 83       	std	Y+3, r22	; 0x03
     1fa:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8_error;
	switch(GPIO)
     1fc:	8a 81       	ldd	r24, Y+2	; 0x02
     1fe:	28 2f       	mov	r18, r24
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	3e 83       	std	Y+6, r19	; 0x06
     204:	2d 83       	std	Y+5, r18	; 0x05
     206:	8d 81       	ldd	r24, Y+5	; 0x05
     208:	9e 81       	ldd	r25, Y+6	; 0x06
     20a:	81 30       	cpi	r24, 0x01	; 1
     20c:	91 05       	cpc	r25, r1
     20e:	81 f1       	breq	.+96     	; 0x270 <DIO_Write+0x88>
     210:	2d 81       	ldd	r18, Y+5	; 0x05
     212:	3e 81       	ldd	r19, Y+6	; 0x06
     214:	22 30       	cpi	r18, 0x02	; 2
     216:	31 05       	cpc	r19, r1
     218:	2c f4       	brge	.+10     	; 0x224 <DIO_Write+0x3c>
     21a:	8d 81       	ldd	r24, Y+5	; 0x05
     21c:	9e 81       	ldd	r25, Y+6	; 0x06
     21e:	00 97       	sbiw	r24, 0x00	; 0
     220:	69 f0       	breq	.+26     	; 0x23c <DIO_Write+0x54>
     222:	74 c0       	rjmp	.+232    	; 0x30c <DIO_Write+0x124>
     224:	2d 81       	ldd	r18, Y+5	; 0x05
     226:	3e 81       	ldd	r19, Y+6	; 0x06
     228:	22 30       	cpi	r18, 0x02	; 2
     22a:	31 05       	cpc	r19, r1
     22c:	d9 f1       	breq	.+118    	; 0x2a4 <DIO_Write+0xbc>
     22e:	8d 81       	ldd	r24, Y+5	; 0x05
     230:	9e 81       	ldd	r25, Y+6	; 0x06
     232:	83 30       	cpi	r24, 0x03	; 3
     234:	91 05       	cpc	r25, r1
     236:	09 f4       	brne	.+2      	; 0x23a <DIO_Write+0x52>
     238:	4f c0       	rjmp	.+158    	; 0x2d8 <DIO_Write+0xf0>
     23a:	68 c0       	rjmp	.+208    	; 0x30c <DIO_Write+0x124>
	{
	case GPIOA:

		if(value == LOW)
     23c:	8c 81       	ldd	r24, Y+4	; 0x04
     23e:	88 23       	and	r24, r24
     240:	59 f4       	brne	.+22     	; 0x258 <DIO_Write+0x70>
		{
			PORTA_DATA &= ~(pins);
     242:	ab e3       	ldi	r26, 0x3B	; 59
     244:	b0 e0       	ldi	r27, 0x00	; 0
     246:	eb e3       	ldi	r30, 0x3B	; 59
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	98 2f       	mov	r25, r24
     24e:	8b 81       	ldd	r24, Y+3	; 0x03
     250:	80 95       	com	r24
     252:	89 23       	and	r24, r25
     254:	8c 93       	st	X, r24
     256:	0a c0       	rjmp	.+20     	; 0x26c <DIO_Write+0x84>
		}
		else
		{
			PORTA_DATA |= (pins&value);
     258:	ab e3       	ldi	r26, 0x3B	; 59
     25a:	b0 e0       	ldi	r27, 0x00	; 0
     25c:	eb e3       	ldi	r30, 0x3B	; 59
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	20 81       	ld	r18, Z
     262:	9b 81       	ldd	r25, Y+3	; 0x03
     264:	8c 81       	ldd	r24, Y+4	; 0x04
     266:	89 23       	and	r24, r25
     268:	82 2b       	or	r24, r18
     26a:	8c 93       	st	X, r24
		}
		u8_error = E_ok;
     26c:	19 82       	std	Y+1, r1	; 0x01
     26e:	50 c0       	rjmp	.+160    	; 0x310 <DIO_Write+0x128>
		break;

	case GPIOB:
		if(value == LOW)
     270:	8c 81       	ldd	r24, Y+4	; 0x04
     272:	88 23       	and	r24, r24
     274:	59 f4       	brne	.+22     	; 0x28c <DIO_Write+0xa4>
		{
			PORTB_DATA &= ~(pins);
     276:	a8 e3       	ldi	r26, 0x38	; 56
     278:	b0 e0       	ldi	r27, 0x00	; 0
     27a:	e8 e3       	ldi	r30, 0x38	; 56
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	80 81       	ld	r24, Z
     280:	98 2f       	mov	r25, r24
     282:	8b 81       	ldd	r24, Y+3	; 0x03
     284:	80 95       	com	r24
     286:	89 23       	and	r24, r25
     288:	8c 93       	st	X, r24
     28a:	0a c0       	rjmp	.+20     	; 0x2a0 <DIO_Write+0xb8>
		}
		else
		{
			PORTB_DATA |= (pins&value);
     28c:	a8 e3       	ldi	r26, 0x38	; 56
     28e:	b0 e0       	ldi	r27, 0x00	; 0
     290:	e8 e3       	ldi	r30, 0x38	; 56
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	20 81       	ld	r18, Z
     296:	9b 81       	ldd	r25, Y+3	; 0x03
     298:	8c 81       	ldd	r24, Y+4	; 0x04
     29a:	89 23       	and	r24, r25
     29c:	82 2b       	or	r24, r18
     29e:	8c 93       	st	X, r24
		}
		u8_error = E_ok;
     2a0:	19 82       	std	Y+1, r1	; 0x01
     2a2:	36 c0       	rjmp	.+108    	; 0x310 <DIO_Write+0x128>
		break;
	case GPIOC:
		if(value == LOW)
     2a4:	8c 81       	ldd	r24, Y+4	; 0x04
     2a6:	88 23       	and	r24, r24
     2a8:	59 f4       	brne	.+22     	; 0x2c0 <DIO_Write+0xd8>
		{
			PORTC_DATA &= ~(pins);
     2aa:	a5 e3       	ldi	r26, 0x35	; 53
     2ac:	b0 e0       	ldi	r27, 0x00	; 0
     2ae:	e5 e3       	ldi	r30, 0x35	; 53
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	98 2f       	mov	r25, r24
     2b6:	8b 81       	ldd	r24, Y+3	; 0x03
     2b8:	80 95       	com	r24
     2ba:	89 23       	and	r24, r25
     2bc:	8c 93       	st	X, r24
     2be:	0a c0       	rjmp	.+20     	; 0x2d4 <DIO_Write+0xec>
		}
		else
		{
			PORTC_DATA |= (pins&value);
     2c0:	a5 e3       	ldi	r26, 0x35	; 53
     2c2:	b0 e0       	ldi	r27, 0x00	; 0
     2c4:	e5 e3       	ldi	r30, 0x35	; 53
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	20 81       	ld	r18, Z
     2ca:	9b 81       	ldd	r25, Y+3	; 0x03
     2cc:	8c 81       	ldd	r24, Y+4	; 0x04
     2ce:	89 23       	and	r24, r25
     2d0:	82 2b       	or	r24, r18
     2d2:	8c 93       	st	X, r24
		}
		u8_error = E_ok;
     2d4:	19 82       	std	Y+1, r1	; 0x01
     2d6:	1c c0       	rjmp	.+56     	; 0x310 <DIO_Write+0x128>
		break;

	case GPIOD:
		if(value == LOW)
     2d8:	8c 81       	ldd	r24, Y+4	; 0x04
     2da:	88 23       	and	r24, r24
     2dc:	59 f4       	brne	.+22     	; 0x2f4 <DIO_Write+0x10c>
		{
			PORTD_DATA &= ~(pins);
     2de:	a2 e3       	ldi	r26, 0x32	; 50
     2e0:	b0 e0       	ldi	r27, 0x00	; 0
     2e2:	e2 e3       	ldi	r30, 0x32	; 50
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	80 81       	ld	r24, Z
     2e8:	98 2f       	mov	r25, r24
     2ea:	8b 81       	ldd	r24, Y+3	; 0x03
     2ec:	80 95       	com	r24
     2ee:	89 23       	and	r24, r25
     2f0:	8c 93       	st	X, r24
     2f2:	0a c0       	rjmp	.+20     	; 0x308 <DIO_Write+0x120>
		}
		else
		{
			PORTD_DATA |= (pins&value);
     2f4:	a2 e3       	ldi	r26, 0x32	; 50
     2f6:	b0 e0       	ldi	r27, 0x00	; 0
     2f8:	e2 e3       	ldi	r30, 0x32	; 50
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	20 81       	ld	r18, Z
     2fe:	9b 81       	ldd	r25, Y+3	; 0x03
     300:	8c 81       	ldd	r24, Y+4	; 0x04
     302:	89 23       	and	r24, r25
     304:	82 2b       	or	r24, r18
     306:	8c 93       	st	X, r24
		}
		u8_error = E_ok;
     308:	19 82       	std	Y+1, r1	; 0x01
     30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_Write+0x128>
		break;

	default:
		u8_error = E_NOk;
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return u8_error;
     310:	89 81       	ldd	r24, Y+1	; 0x01
}
     312:	26 96       	adiw	r28, 0x06	; 6
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	f8 94       	cli
     318:	de bf       	out	0x3e, r29	; 62
     31a:	0f be       	out	0x3f, r0	; 63
     31c:	cd bf       	out	0x3d, r28	; 61
     31e:	cf 91       	pop	r28
     320:	df 91       	pop	r29
     322:	08 95       	ret

00000324 <DIO_Read>:
* Return value: u8_error-> variable that describe the error status
* Description: This function can read the value of a full port, a nibble
* or even one pin.
************************************************************************************/
ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{
     324:	df 93       	push	r29
     326:	cf 93       	push	r28
     328:	cd b7       	in	r28, 0x3d	; 61
     32a:	de b7       	in	r29, 0x3e	; 62
     32c:	27 97       	sbiw	r28, 0x07	; 7
     32e:	0f b6       	in	r0, 0x3f	; 63
     330:	f8 94       	cli
     332:	de bf       	out	0x3e, r29	; 62
     334:	0f be       	out	0x3f, r0	; 63
     336:	cd bf       	out	0x3d, r28	; 61
     338:	8a 83       	std	Y+2, r24	; 0x02
     33a:	6b 83       	std	Y+3, r22	; 0x03
     33c:	5d 83       	std	Y+5, r21	; 0x05
     33e:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8_error;
	switch(GPIO)
     340:	8a 81       	ldd	r24, Y+2	; 0x02
     342:	28 2f       	mov	r18, r24
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	3f 83       	std	Y+7, r19	; 0x07
     348:	2e 83       	std	Y+6, r18	; 0x06
     34a:	8e 81       	ldd	r24, Y+6	; 0x06
     34c:	9f 81       	ldd	r25, Y+7	; 0x07
     34e:	81 30       	cpi	r24, 0x01	; 1
     350:	91 05       	cpc	r25, r1
     352:	f9 f0       	breq	.+62     	; 0x392 <DIO_Read+0x6e>
     354:	2e 81       	ldd	r18, Y+6	; 0x06
     356:	3f 81       	ldd	r19, Y+7	; 0x07
     358:	22 30       	cpi	r18, 0x02	; 2
     35a:	31 05       	cpc	r19, r1
     35c:	2c f4       	brge	.+10     	; 0x368 <DIO_Read+0x44>
     35e:	8e 81       	ldd	r24, Y+6	; 0x06
     360:	9f 81       	ldd	r25, Y+7	; 0x07
     362:	00 97       	sbiw	r24, 0x00	; 0
     364:	61 f0       	breq	.+24     	; 0x37e <DIO_Read+0x5a>
     366:	33 c0       	rjmp	.+102    	; 0x3ce <DIO_Read+0xaa>
     368:	2e 81       	ldd	r18, Y+6	; 0x06
     36a:	3f 81       	ldd	r19, Y+7	; 0x07
     36c:	22 30       	cpi	r18, 0x02	; 2
     36e:	31 05       	cpc	r19, r1
     370:	d1 f0       	breq	.+52     	; 0x3a6 <DIO_Read+0x82>
     372:	8e 81       	ldd	r24, Y+6	; 0x06
     374:	9f 81       	ldd	r25, Y+7	; 0x07
     376:	83 30       	cpi	r24, 0x03	; 3
     378:	91 05       	cpc	r25, r1
     37a:	f9 f0       	breq	.+62     	; 0x3ba <DIO_Read+0x96>
     37c:	28 c0       	rjmp	.+80     	; 0x3ce <DIO_Read+0xaa>
	{
	case GPIOA:
		*data= (PORTA_PIN & pins);
     37e:	e9 e3       	ldi	r30, 0x39	; 57
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	90 81       	ld	r25, Z
     384:	8b 81       	ldd	r24, Y+3	; 0x03
     386:	89 23       	and	r24, r25
     388:	ec 81       	ldd	r30, Y+4	; 0x04
     38a:	fd 81       	ldd	r31, Y+5	; 0x05
     38c:	80 83       	st	Z, r24
		u8_error = E_ok;
     38e:	19 82       	std	Y+1, r1	; 0x01
     390:	20 c0       	rjmp	.+64     	; 0x3d2 <DIO_Read+0xae>
		break;

	case GPIOB:
		*data= (PORTB_PIN & pins);
     392:	e6 e3       	ldi	r30, 0x36	; 54
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	90 81       	ld	r25, Z
     398:	8b 81       	ldd	r24, Y+3	; 0x03
     39a:	89 23       	and	r24, r25
     39c:	ec 81       	ldd	r30, Y+4	; 0x04
     39e:	fd 81       	ldd	r31, Y+5	; 0x05
     3a0:	80 83       	st	Z, r24
		u8_error = E_ok;
     3a2:	19 82       	std	Y+1, r1	; 0x01
     3a4:	16 c0       	rjmp	.+44     	; 0x3d2 <DIO_Read+0xae>
		break;

	case GPIOC:
		*data= (PORTC_PIN & pins);
     3a6:	e3 e3       	ldi	r30, 0x33	; 51
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	90 81       	ld	r25, Z
     3ac:	8b 81       	ldd	r24, Y+3	; 0x03
     3ae:	89 23       	and	r24, r25
     3b0:	ec 81       	ldd	r30, Y+4	; 0x04
     3b2:	fd 81       	ldd	r31, Y+5	; 0x05
     3b4:	80 83       	st	Z, r24
		u8_error = E_ok;
     3b6:	19 82       	std	Y+1, r1	; 0x01
     3b8:	0c c0       	rjmp	.+24     	; 0x3d2 <DIO_Read+0xae>
		break;
	case GPIOD:
		*data= (PORTD_PIN & pins);
     3ba:	e0 e3       	ldi	r30, 0x30	; 48
     3bc:	f0 e0       	ldi	r31, 0x00	; 0
     3be:	90 81       	ld	r25, Z
     3c0:	8b 81       	ldd	r24, Y+3	; 0x03
     3c2:	89 23       	and	r24, r25
     3c4:	ec 81       	ldd	r30, Y+4	; 0x04
     3c6:	fd 81       	ldd	r31, Y+5	; 0x05
     3c8:	80 83       	st	Z, r24
		u8_error = E_ok;
     3ca:	19 82       	std	Y+1, r1	; 0x01
     3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_Read+0xae>
		break;
	default:
		u8_error = E_NOk;
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	if(*data!=LOW)
     3d2:	ec 81       	ldd	r30, Y+4	; 0x04
     3d4:	fd 81       	ldd	r31, Y+5	; 0x05
     3d6:	80 81       	ld	r24, Z
     3d8:	88 23       	and	r24, r24
     3da:	21 f0       	breq	.+8      	; 0x3e4 <DIO_Read+0xc0>
	{
		*data=HIGH;
     3dc:	ec 81       	ldd	r30, Y+4	; 0x04
     3de:	fd 81       	ldd	r31, Y+5	; 0x05
     3e0:	8f ef       	ldi	r24, 0xFF	; 255
     3e2:	80 83       	st	Z, r24
	}
	return u8_error;
     3e4:	89 81       	ldd	r24, Y+1	; 0x01
}
     3e6:	27 96       	adiw	r28, 0x07	; 7
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	f8 94       	cli
     3ec:	de bf       	out	0x3e, r29	; 62
     3ee:	0f be       	out	0x3f, r0	; 63
     3f0:	cd bf       	out	0x3d, r28	; 61
     3f2:	cf 91       	pop	r28
     3f4:	df 91       	pop	r29
     3f6:	08 95       	ret

000003f8 <DIO_Toggle>:
* Return value: u8_error-> variable that describe the error status
* Description: This function toggles the value of a full port, a nibble
* or even one pin.
************************************************************************************/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
     3f8:	df 93       	push	r29
     3fa:	cf 93       	push	r28
     3fc:	00 d0       	rcall	.+0      	; 0x3fe <DIO_Toggle+0x6>
     3fe:	00 d0       	rcall	.+0      	; 0x400 <DIO_Toggle+0x8>
     400:	0f 92       	push	r0
     402:	cd b7       	in	r28, 0x3d	; 61
     404:	de b7       	in	r29, 0x3e	; 62
     406:	8a 83       	std	Y+2, r24	; 0x02
     408:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8_error;
	switch(GPIO)
     40a:	8a 81       	ldd	r24, Y+2	; 0x02
     40c:	28 2f       	mov	r18, r24
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	3d 83       	std	Y+5, r19	; 0x05
     412:	2c 83       	std	Y+4, r18	; 0x04
     414:	8c 81       	ldd	r24, Y+4	; 0x04
     416:	9d 81       	ldd	r25, Y+5	; 0x05
     418:	81 30       	cpi	r24, 0x01	; 1
     41a:	91 05       	cpc	r25, r1
     41c:	f9 f0       	breq	.+62     	; 0x45c <DIO_Toggle+0x64>
     41e:	2c 81       	ldd	r18, Y+4	; 0x04
     420:	3d 81       	ldd	r19, Y+5	; 0x05
     422:	22 30       	cpi	r18, 0x02	; 2
     424:	31 05       	cpc	r19, r1
     426:	2c f4       	brge	.+10     	; 0x432 <DIO_Toggle+0x3a>
     428:	8c 81       	ldd	r24, Y+4	; 0x04
     42a:	9d 81       	ldd	r25, Y+5	; 0x05
     42c:	00 97       	sbiw	r24, 0x00	; 0
     42e:	61 f0       	breq	.+24     	; 0x448 <DIO_Toggle+0x50>
     430:	33 c0       	rjmp	.+102    	; 0x498 <__stack+0x39>
     432:	2c 81       	ldd	r18, Y+4	; 0x04
     434:	3d 81       	ldd	r19, Y+5	; 0x05
     436:	22 30       	cpi	r18, 0x02	; 2
     438:	31 05       	cpc	r19, r1
     43a:	d1 f0       	breq	.+52     	; 0x470 <__stack+0x11>
     43c:	8c 81       	ldd	r24, Y+4	; 0x04
     43e:	9d 81       	ldd	r25, Y+5	; 0x05
     440:	83 30       	cpi	r24, 0x03	; 3
     442:	91 05       	cpc	r25, r1
     444:	f9 f0       	breq	.+62     	; 0x484 <__stack+0x25>
     446:	28 c0       	rjmp	.+80     	; 0x498 <__stack+0x39>
	{
	case GPIOA:
			PORTA_DATA ^= pins;
     448:	ab e3       	ldi	r26, 0x3B	; 59
     44a:	b0 e0       	ldi	r27, 0x00	; 0
     44c:	eb e3       	ldi	r30, 0x3B	; 59
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	90 81       	ld	r25, Z
     452:	8b 81       	ldd	r24, Y+3	; 0x03
     454:	89 27       	eor	r24, r25
     456:	8c 93       	st	X, r24
			u8_error = E_ok;
     458:	19 82       	std	Y+1, r1	; 0x01
     45a:	20 c0       	rjmp	.+64     	; 0x49c <__stack+0x3d>
		break;

	case GPIOB:
			PORTB_DATA ^= (pins);
     45c:	a8 e3       	ldi	r26, 0x38	; 56
     45e:	b0 e0       	ldi	r27, 0x00	; 0
     460:	e8 e3       	ldi	r30, 0x38	; 56
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	90 81       	ld	r25, Z
     466:	8b 81       	ldd	r24, Y+3	; 0x03
     468:	89 27       	eor	r24, r25
     46a:	8c 93       	st	X, r24
			u8_error = E_ok;
     46c:	19 82       	std	Y+1, r1	; 0x01
     46e:	16 c0       	rjmp	.+44     	; 0x49c <__stack+0x3d>
		break;
	case GPIOC:
			PORTC_DATA ^= (pins);
     470:	a5 e3       	ldi	r26, 0x35	; 53
     472:	b0 e0       	ldi	r27, 0x00	; 0
     474:	e5 e3       	ldi	r30, 0x35	; 53
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	90 81       	ld	r25, Z
     47a:	8b 81       	ldd	r24, Y+3	; 0x03
     47c:	89 27       	eor	r24, r25
     47e:	8c 93       	st	X, r24
			u8_error = E_ok;
     480:	19 82       	std	Y+1, r1	; 0x01
     482:	0c c0       	rjmp	.+24     	; 0x49c <__stack+0x3d>
		break;

	case GPIOD:
			PORTD_DATA ^= (pins);
     484:	a2 e3       	ldi	r26, 0x32	; 50
     486:	b0 e0       	ldi	r27, 0x00	; 0
     488:	e2 e3       	ldi	r30, 0x32	; 50
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	90 81       	ld	r25, Z
     48e:	8b 81       	ldd	r24, Y+3	; 0x03
     490:	89 27       	eor	r24, r25
     492:	8c 93       	st	X, r24
			u8_error = E_ok;
     494:	19 82       	std	Y+1, r1	; 0x01
     496:	02 c0       	rjmp	.+4      	; 0x49c <__stack+0x3d>
		break;

	default:
		u8_error = E_NOk;
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return u8_error;
     49c:	89 81       	ldd	r24, Y+1	; 0x01
}
     49e:	0f 90       	pop	r0
     4a0:	0f 90       	pop	r0
     4a2:	0f 90       	pop	r0
     4a4:	0f 90       	pop	r0
     4a6:	0f 90       	pop	r0
     4a8:	cf 91       	pop	r28
     4aa:	df 91       	pop	r29
     4ac:	08 95       	ret

000004ae <Pwm_Init>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description: initialize the PWM configuration
************************************************************************************/
ERROR_STATUS Pwm_Init(Pwm_Cfg_s *Pwm_Cfg)
{
     4ae:	df 93       	push	r29
     4b0:	cf 93       	push	r28
     4b2:	cd b7       	in	r28, 0x3d	; 61
     4b4:	de b7       	in	r29, 0x3e	; 62
     4b6:	64 97       	sbiw	r28, 0x14	; 20
     4b8:	0f b6       	in	r0, 0x3f	; 63
     4ba:	f8 94       	cli
     4bc:	de bf       	out	0x3e, r29	; 62
     4be:	0f be       	out	0x3f, r0	; 63
     4c0:	cd bf       	out	0x3d, r28	; 61
     4c2:	9a 8b       	std	Y+18, r25	; 0x12
     4c4:	89 8b       	std	Y+17, r24	; 0x11
	uint8_t u8_status;
	if(Pwm_Cfg == NULL_Ptr)
     4c6:	89 89       	ldd	r24, Y+17	; 0x11
     4c8:	9a 89       	ldd	r25, Y+18	; 0x12
     4ca:	00 97       	sbiw	r24, 0x00	; 0
     4cc:	19 f4       	brne	.+6      	; 0x4d4 <Pwm_Init+0x26>
	{
		u8_status = E_NOk;
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	89 83       	std	Y+1, r24	; 0x01
     4d2:	ea c0       	rjmp	.+468    	; 0x6a8 <Pwm_Init+0x1fa>
	}
	else
	{
		TCNT0 = CLEAR; /*timer initial value*/
     4d4:	e2 e5       	ldi	r30, 0x52	; 82
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	10 82       	st	Z, r1
		TIMSK = CLEAR; /*disable interrupts*/
     4da:	e9 e5       	ldi	r30, 0x59	; 89
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	10 82       	st	Z, r1
		//OCR0 = (u8_dutyCycle*TIMER0_NUMBER_OF_TICKS)/100; //output compare value
		switch(Pwm_Cfg->Channel)
     4e0:	e9 89       	ldd	r30, Y+17	; 0x11
     4e2:	fa 89       	ldd	r31, Y+18	; 0x12
     4e4:	80 81       	ld	r24, Z
     4e6:	28 2f       	mov	r18, r24
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	3c 8b       	std	Y+20, r19	; 0x14
     4ec:	2b 8b       	std	Y+19, r18	; 0x13
     4ee:	8b 89       	ldd	r24, Y+19	; 0x13
     4f0:	9c 89       	ldd	r25, Y+20	; 0x14
     4f2:	82 30       	cpi	r24, 0x02	; 2
     4f4:	91 05       	cpc	r25, r1
     4f6:	09 f4       	brne	.+2      	; 0x4fa <Pwm_Init+0x4c>
     4f8:	64 c0       	rjmp	.+200    	; 0x5c2 <Pwm_Init+0x114>
     4fa:	2b 89       	ldd	r18, Y+19	; 0x13
     4fc:	3c 89       	ldd	r19, Y+20	; 0x14
     4fe:	23 30       	cpi	r18, 0x03	; 3
     500:	31 05       	cpc	r19, r1
     502:	54 f4       	brge	.+20     	; 0x518 <Pwm_Init+0x6a>
     504:	8b 89       	ldd	r24, Y+19	; 0x13
     506:	9c 89       	ldd	r25, Y+20	; 0x14
     508:	00 97       	sbiw	r24, 0x00	; 0
     50a:	99 f0       	breq	.+38     	; 0x532 <Pwm_Init+0x84>
     50c:	2b 89       	ldd	r18, Y+19	; 0x13
     50e:	3c 89       	ldd	r19, Y+20	; 0x14
     510:	21 30       	cpi	r18, 0x01	; 1
     512:	31 05       	cpc	r19, r1
     514:	69 f1       	breq	.+90     	; 0x570 <Pwm_Init+0xc2>
     516:	c6 c0       	rjmp	.+396    	; 0x6a4 <Pwm_Init+0x1f6>
     518:	8b 89       	ldd	r24, Y+19	; 0x13
     51a:	9c 89       	ldd	r25, Y+20	; 0x14
     51c:	83 30       	cpi	r24, 0x03	; 3
     51e:	91 05       	cpc	r25, r1
     520:	09 f4       	brne	.+2      	; 0x524 <Pwm_Init+0x76>
     522:	78 c0       	rjmp	.+240    	; 0x614 <Pwm_Init+0x166>
     524:	2b 89       	ldd	r18, Y+19	; 0x13
     526:	3c 89       	ldd	r19, Y+20	; 0x14
     528:	24 30       	cpi	r18, 0x04	; 4
     52a:	31 05       	cpc	r19, r1
     52c:	09 f4       	brne	.+2      	; 0x530 <Pwm_Init+0x82>
     52e:	91 c0       	rjmp	.+290    	; 0x652 <Pwm_Init+0x1a4>
     530:	b9 c0       	rjmp	.+370    	; 0x6a4 <Pwm_Init+0x1f6>
		{
			case PWM_CH0:
				T0_PrescallerValue = Pwm_Cfg->Prescaler;
     532:	e9 89       	ldd	r30, Y+17	; 0x11
     534:	fa 89       	ldd	r31, Y+18	; 0x12
     536:	81 81       	ldd	r24, Z+1	; 0x01
     538:	88 2f       	mov	r24, r24
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	90 93 61 00 	sts	0x0061, r25
     540:	80 93 60 00 	sts	0x0060, r24
				TCCR0 =(ONE<<COM01)| (ONE<<WGM00);
     544:	e3 e5       	ldi	r30, 0x53	; 83
     546:	f0 e0       	ldi	r31, 0x00	; 0
     548:	80 e6       	ldi	r24, 0x60	; 96
     54a:	80 83       	st	Z, r24
				u8_status = E_ok;
     54c:	19 82       	std	Y+1, r1	; 0x01
				DIO_Cfg_s PWM0_Binsinit=
				{
						PWM0_Binsinit.GPIO=GPIOB,
						PWM0_Binsinit.pins=BIT3,
						PWM0_Binsinit.dir=OUTPUT,
				};
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	8a 83       	std	Y+2, r24	; 0x02
     552:	2a 81       	ldd	r18, Y+2	; 0x02
     554:	88 e0       	ldi	r24, 0x08	; 8
     556:	8b 83       	std	Y+3, r24	; 0x03
     558:	9b 81       	ldd	r25, Y+3	; 0x03
     55a:	8f ef       	ldi	r24, 0xFF	; 255
     55c:	8c 83       	std	Y+4, r24	; 0x04
     55e:	8c 81       	ldd	r24, Y+4	; 0x04
     560:	2a 83       	std	Y+2, r18	; 0x02
     562:	9b 83       	std	Y+3, r25	; 0x03
     564:	8c 83       	std	Y+4, r24	; 0x04
				DIO_init (&PWM0_Binsinit);
     566:	ce 01       	movw	r24, r28
     568:	02 96       	adiw	r24, 0x02	; 2
     56a:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_init>
     56e:	9c c0       	rjmp	.+312    	; 0x6a8 <Pwm_Init+0x1fa>
			break;

			case PWM_CH1A:
				T1_PrescallerValue = Pwm_Cfg->Prescaler;
     570:	e9 89       	ldd	r30, Y+17	; 0x11
     572:	fa 89       	ldd	r31, Y+18	; 0x12
     574:	81 81       	ldd	r24, Z+1	; 0x01
     576:	88 2f       	mov	r24, r24
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	90 93 63 00 	sts	0x0063, r25
     57e:	80 93 62 00 	sts	0x0062, r24
				ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     582:	e6 e4       	ldi	r30, 0x46	; 70
     584:	f0 e0       	ldi	r31, 0x00	; 0
     586:	83 ec       	ldi	r24, 0xC3	; 195
     588:	99 e0       	ldi	r25, 0x09	; 9
     58a:	91 83       	std	Z+1, r25	; 0x01
     58c:	80 83       	st	Z, r24
				/* Configure timer control register TCCR1A
				 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
				 * 2. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
				 * 3. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
				 */
				TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1);
     58e:	ef e4       	ldi	r30, 0x4F	; 79
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	82 e8       	ldi	r24, 0x82	; 130
     594:	80 83       	st	Z, r24

				/* Configure timer control register TCCR1A
				 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=0 WGM13=1 (Mode Number 10)
				 * 2. Prescaller = F_CPU
				 */
				TCCR1B =(ONE<<WGM13);
     596:	ee e4       	ldi	r30, 0x4E	; 78
     598:	f0 e0       	ldi	r31, 0x00	; 0
     59a:	80 e1       	ldi	r24, 0x10	; 16
     59c:	80 83       	st	Z, r24
				u8_status = E_ok;
     59e:	19 82       	std	Y+1, r1	; 0x01
				DIO_Cfg_s PWM1AB_Binsinit=
				{
						PWM1AB_Binsinit.GPIO=GPIOD,
						PWM1AB_Binsinit.pins=BIT5,
						PWM1AB_Binsinit.dir=OUTPUT,
				};
     5a0:	83 e0       	ldi	r24, 0x03	; 3
     5a2:	8d 83       	std	Y+5, r24	; 0x05
     5a4:	2d 81       	ldd	r18, Y+5	; 0x05
     5a6:	80 e2       	ldi	r24, 0x20	; 32
     5a8:	8e 83       	std	Y+6, r24	; 0x06
     5aa:	9e 81       	ldd	r25, Y+6	; 0x06
     5ac:	8f ef       	ldi	r24, 0xFF	; 255
     5ae:	8f 83       	std	Y+7, r24	; 0x07
     5b0:	8f 81       	ldd	r24, Y+7	; 0x07
     5b2:	2d 83       	std	Y+5, r18	; 0x05
     5b4:	9e 83       	std	Y+6, r25	; 0x06
     5b6:	8f 83       	std	Y+7, r24	; 0x07
				DIO_init (&PWM1AB_Binsinit);
     5b8:	ce 01       	movw	r24, r28
     5ba:	05 96       	adiw	r24, 0x05	; 5
     5bc:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_init>
     5c0:	73 c0       	rjmp	.+230    	; 0x6a8 <Pwm_Init+0x1fa>
			break;

			case PWM_CH1B:
				T1_PrescallerValue = Pwm_Cfg->Prescaler;
     5c2:	e9 89       	ldd	r30, Y+17	; 0x11
     5c4:	fa 89       	ldd	r31, Y+18	; 0x12
     5c6:	81 81       	ldd	r24, Z+1	; 0x01
     5c8:	88 2f       	mov	r24, r24
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	90 93 63 00 	sts	0x0063, r25
     5d0:	80 93 62 00 	sts	0x0062, r24
				ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     5d4:	e6 e4       	ldi	r30, 0x46	; 70
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	83 ec       	ldi	r24, 0xC3	; 195
     5da:	99 e0       	ldi	r25, 0x09	; 9
     5dc:	91 83       	std	Z+1, r25	; 0x01
     5de:	80 83       	st	Z, r24
				/* Configure timer control register TCCR1A
				 * 1. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
				 * 2. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
				 * 3. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
				 */
				TCCR1A = (ONE<<WGM11) | (ONE<<COM1B1);
     5e0:	ef e4       	ldi	r30, 0x4F	; 79
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	82 e2       	ldi	r24, 0x22	; 34
     5e6:	80 83       	st	Z, r24

				/* Configure timer control register TCCR1A
				 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=0 WGM13=1 (Mode Number 10)
				 * 2. Prescaller = F_CPU
				 */
				TCCR1B =(ONE<<WGM13);
     5e8:	ee e4       	ldi	r30, 0x4E	; 78
     5ea:	f0 e0       	ldi	r31, 0x00	; 0
     5ec:	80 e1       	ldi	r24, 0x10	; 16
     5ee:	80 83       	st	Z, r24
				u8_status = E_ok;
     5f0:	19 82       	std	Y+1, r1	; 0x01
				DIO_Cfg_s PWM1B_Binsinit=
				{
						PWM1B_Binsinit.GPIO=GPIOD,
						PWM1B_Binsinit.pins=BIT4,
						PWM1B_Binsinit.dir=OUTPUT,
				};
     5f2:	83 e0       	ldi	r24, 0x03	; 3
     5f4:	88 87       	std	Y+8, r24	; 0x08
     5f6:	28 85       	ldd	r18, Y+8	; 0x08
     5f8:	80 e1       	ldi	r24, 0x10	; 16
     5fa:	89 87       	std	Y+9, r24	; 0x09
     5fc:	99 85       	ldd	r25, Y+9	; 0x09
     5fe:	8f ef       	ldi	r24, 0xFF	; 255
     600:	8a 87       	std	Y+10, r24	; 0x0a
     602:	8a 85       	ldd	r24, Y+10	; 0x0a
     604:	28 87       	std	Y+8, r18	; 0x08
     606:	99 87       	std	Y+9, r25	; 0x09
     608:	8a 87       	std	Y+10, r24	; 0x0a
				DIO_init (&PWM1B_Binsinit);
     60a:	ce 01       	movw	r24, r28
     60c:	08 96       	adiw	r24, 0x08	; 8
     60e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_init>
     612:	4a c0       	rjmp	.+148    	; 0x6a8 <Pwm_Init+0x1fa>
			break;

			case PWM_CH2:
				T2_PrescallerValue = Pwm_Cfg->Prescaler;
     614:	e9 89       	ldd	r30, Y+17	; 0x11
     616:	fa 89       	ldd	r31, Y+18	; 0x12
     618:	81 81       	ldd	r24, Z+1	; 0x01
     61a:	88 2f       	mov	r24, r24
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	90 93 65 00 	sts	0x0065, r25
     622:	80 93 64 00 	sts	0x0064, r24
				TCCR2 =(ONE<<COM21)| (ONE<<WGM20);
     626:	e5 e4       	ldi	r30, 0x45	; 69
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	80 e6       	ldi	r24, 0x60	; 96
     62c:	80 83       	st	Z, r24
				u8_status = E_ok;
     62e:	19 82       	std	Y+1, r1	; 0x01
				DIO_Cfg_s PWM2_Binsinit=
				{
						PWM2_Binsinit.GPIO=GPIOD,
						PWM2_Binsinit.pins=BIT7,
						PWM2_Binsinit.dir=OUTPUT,
				};
     630:	83 e0       	ldi	r24, 0x03	; 3
     632:	8b 87       	std	Y+11, r24	; 0x0b
     634:	2b 85       	ldd	r18, Y+11	; 0x0b
     636:	80 e8       	ldi	r24, 0x80	; 128
     638:	8c 87       	std	Y+12, r24	; 0x0c
     63a:	9c 85       	ldd	r25, Y+12	; 0x0c
     63c:	8f ef       	ldi	r24, 0xFF	; 255
     63e:	8d 87       	std	Y+13, r24	; 0x0d
     640:	8d 85       	ldd	r24, Y+13	; 0x0d
     642:	2b 87       	std	Y+11, r18	; 0x0b
     644:	9c 87       	std	Y+12, r25	; 0x0c
     646:	8d 87       	std	Y+13, r24	; 0x0d
				DIO_init (&PWM2_Binsinit);
     648:	ce 01       	movw	r24, r28
     64a:	0b 96       	adiw	r24, 0x0b	; 11
     64c:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_init>
     650:	2b c0       	rjmp	.+86     	; 0x6a8 <Pwm_Init+0x1fa>
			break;

			case PWM_CH1A_CH1B:
				T1_PrescallerValue = Pwm_Cfg->Prescaler;
     652:	e9 89       	ldd	r30, Y+17	; 0x11
     654:	fa 89       	ldd	r31, Y+18	; 0x12
     656:	81 81       	ldd	r24, Z+1	; 0x01
     658:	88 2f       	mov	r24, r24
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	90 93 63 00 	sts	0x0063, r25
     660:	80 93 62 00 	sts	0x0062, r24
				ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     664:	e6 e4       	ldi	r30, 0x46	; 70
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	83 ec       	ldi	r24, 0xC3	; 195
     66a:	99 e0       	ldi	r25, 0x09	; 9
     66c:	91 83       	std	Z+1, r25	; 0x01
     66e:	80 83       	st	Z, r24
				/* Configure timer control register TCCR1A
				 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
				 * 2. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
				 * 3. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
				 */
				TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1) | (ONE<<COM1B1);
     670:	ef e4       	ldi	r30, 0x4F	; 79
     672:	f0 e0       	ldi	r31, 0x00	; 0
     674:	82 ea       	ldi	r24, 0xA2	; 162
     676:	80 83       	st	Z, r24

				/* Configure timer control register TCCR1A
				 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=0 WGM13=1 (Mode Number 10)
				 * 2. Prescaller = F_CPU
				 */
				TCCR1B =(ONE<<WGM13);
     678:	ee e4       	ldi	r30, 0x4E	; 78
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	80 e1       	ldi	r24, 0x10	; 16
     67e:	80 83       	st	Z, r24
				u8_status = E_ok;
     680:	19 82       	std	Y+1, r1	; 0x01
				DIO_Cfg_s PWM1A_Binsinit=
				{
						PWM1A_Binsinit.GPIO=GPIOD,
						PWM1A_Binsinit.pins=BIT4 | BIT5,
						PWM1A_Binsinit.dir=OUTPUT,
				};
     682:	83 e0       	ldi	r24, 0x03	; 3
     684:	8e 87       	std	Y+14, r24	; 0x0e
     686:	2e 85       	ldd	r18, Y+14	; 0x0e
     688:	80 e3       	ldi	r24, 0x30	; 48
     68a:	8f 87       	std	Y+15, r24	; 0x0f
     68c:	9f 85       	ldd	r25, Y+15	; 0x0f
     68e:	8f ef       	ldi	r24, 0xFF	; 255
     690:	88 8b       	std	Y+16, r24	; 0x10
     692:	88 89       	ldd	r24, Y+16	; 0x10
     694:	2e 87       	std	Y+14, r18	; 0x0e
     696:	9f 87       	std	Y+15, r25	; 0x0f
     698:	88 8b       	std	Y+16, r24	; 0x10
				DIO_init (&PWM1A_Binsinit);
     69a:	ce 01       	movw	r24, r28
     69c:	0e 96       	adiw	r24, 0x0e	; 14
     69e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_init>
     6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <Pwm_Init+0x1fa>
			break;
			default:
				u8_status = E_NOk;
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return u8_status;
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
}
     6aa:	64 96       	adiw	r28, 0x14	; 20
     6ac:	0f b6       	in	r0, 0x3f	; 63
     6ae:	f8 94       	cli
     6b0:	de bf       	out	0x3e, r29	; 62
     6b2:	0f be       	out	0x3f, r0	; 63
     6b4:	cd bf       	out	0x3d, r28	; 61
     6b6:	cf 91       	pop	r28
     6b8:	df 91       	pop	r29
     6ba:	08 95       	ret

000006bc <Pwm_Start>:
* Return value: u8_error- variable that describe the error status
* Description: starts the PWM on the dedicated channel with the required duty
* cycle and frequency
************************************************************************************/
ERROR_STATUS Pwm_Start(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{
     6bc:	df 93       	push	r29
     6be:	cf 93       	push	r28
     6c0:	cd b7       	in	r28, 0x3d	; 61
     6c2:	de b7       	in	r29, 0x3e	; 62
     6c4:	6d 97       	sbiw	r28, 0x1d	; 29
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	f8 94       	cli
     6ca:	de bf       	out	0x3e, r29	; 62
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	cd bf       	out	0x3d, r28	; 61
     6d0:	8a 83       	std	Y+2, r24	; 0x02
     6d2:	6b 83       	std	Y+3, r22	; 0x03
     6d4:	2c 83       	std	Y+4, r18	; 0x04
     6d6:	3d 83       	std	Y+5, r19	; 0x05
     6d8:	4e 83       	std	Y+6, r20	; 0x06
     6da:	5f 83       	std	Y+7, r21	; 0x07
	uint8_t u8_status;
	switch(Channel)
     6dc:	8a 81       	ldd	r24, Y+2	; 0x02
     6de:	28 2f       	mov	r18, r24
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	39 87       	std	Y+9, r19	; 0x09
     6e4:	28 87       	std	Y+8, r18	; 0x08
     6e6:	88 85       	ldd	r24, Y+8	; 0x08
     6e8:	99 85       	ldd	r25, Y+9	; 0x09
     6ea:	82 30       	cpi	r24, 0x02	; 2
     6ec:	91 05       	cpc	r25, r1
     6ee:	09 f4       	brne	.+2      	; 0x6f2 <Pwm_Start+0x36>
     6f0:	2e c1       	rjmp	.+604    	; 0x94e <Pwm_Start+0x292>
     6f2:	a8 85       	ldd	r26, Y+8	; 0x08
     6f4:	b9 85       	ldd	r27, Y+9	; 0x09
     6f6:	a3 30       	cpi	r26, 0x03	; 3
     6f8:	b1 05       	cpc	r27, r1
     6fa:	64 f4       	brge	.+24     	; 0x714 <Pwm_Start+0x58>
     6fc:	28 85       	ldd	r18, Y+8	; 0x08
     6fe:	39 85       	ldd	r19, Y+9	; 0x09
     700:	21 15       	cp	r18, r1
     702:	31 05       	cpc	r19, r1
     704:	a1 f0       	breq	.+40     	; 0x72e <Pwm_Start+0x72>
     706:	88 85       	ldd	r24, Y+8	; 0x08
     708:	99 85       	ldd	r25, Y+9	; 0x09
     70a:	81 30       	cpi	r24, 0x01	; 1
     70c:	91 05       	cpc	r25, r1
     70e:	09 f4       	brne	.+2      	; 0x712 <Pwm_Start+0x56>
     710:	77 c0       	rjmp	.+238    	; 0x800 <Pwm_Start+0x144>
     712:	e1 c2       	rjmp	.+1474   	; 0xcd6 <Pwm_Start+0x61a>
     714:	a8 85       	ldd	r26, Y+8	; 0x08
     716:	b9 85       	ldd	r27, Y+9	; 0x09
     718:	a3 30       	cpi	r26, 0x03	; 3
     71a:	b1 05       	cpc	r27, r1
     71c:	09 f4       	brne	.+2      	; 0x720 <Pwm_Start+0x64>
     71e:	be c1       	rjmp	.+892    	; 0xa9c <Pwm_Start+0x3e0>
     720:	28 85       	ldd	r18, Y+8	; 0x08
     722:	39 85       	ldd	r19, Y+9	; 0x09
     724:	24 30       	cpi	r18, 0x04	; 4
     726:	31 05       	cpc	r19, r1
     728:	09 f4       	brne	.+2      	; 0x72c <Pwm_Start+0x70>
     72a:	1c c2       	rjmp	.+1080   	; 0xb64 <Pwm_Start+0x4a8>
     72c:	d4 c2       	rjmp	.+1448   	; 0xcd6 <Pwm_Start+0x61a>
	{
	case PWM_CH0:
		OCR0 = Duty*(TIMER0_MAX_COUNT/ONE_HUNDRED); /*output compare value*/
     72e:	ec e5       	ldi	r30, 0x5C	; 92
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	8b 81       	ldd	r24, Y+3	; 0x03
     734:	88 2f       	mov	r24, r24
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	88 0f       	add	r24, r24
     73a:	99 1f       	adc	r25, r25
     73c:	80 83       	st	Z, r24
		switch(Frequncy)
     73e:	8c 81       	ldd	r24, Y+4	; 0x04
     740:	9d 81       	ldd	r25, Y+5	; 0x05
     742:	ae 81       	ldd	r26, Y+6	; 0x06
     744:	bf 81       	ldd	r27, Y+7	; 0x07
     746:	8a 87       	std	Y+10, r24	; 0x0a
     748:	9b 87       	std	Y+11, r25	; 0x0b
     74a:	ac 87       	std	Y+12, r26	; 0x0c
     74c:	bd 87       	std	Y+13, r27	; 0x0d
     74e:	8a 85       	ldd	r24, Y+10	; 0x0a
     750:	9b 85       	ldd	r25, Y+11	; 0x0b
     752:	ac 85       	ldd	r26, Y+12	; 0x0c
     754:	bd 85       	ldd	r27, Y+13	; 0x0d
     756:	83 30       	cpi	r24, 0x03	; 3
     758:	91 05       	cpc	r25, r1
     75a:	a1 05       	cpc	r26, r1
     75c:	b1 05       	cpc	r27, r1
     75e:	d9 f1       	breq	.+118    	; 0x7d6 <Pwm_Start+0x11a>
     760:	8a 85       	ldd	r24, Y+10	; 0x0a
     762:	9b 85       	ldd	r25, Y+11	; 0x0b
     764:	ac 85       	ldd	r26, Y+12	; 0x0c
     766:	bd 85       	ldd	r27, Y+13	; 0x0d
     768:	84 30       	cpi	r24, 0x04	; 4
     76a:	91 05       	cpc	r25, r1
     76c:	a1 05       	cpc	r26, r1
     76e:	b1 05       	cpc	r27, r1
     770:	98 f4       	brcc	.+38     	; 0x798 <Pwm_Start+0xdc>
     772:	8a 85       	ldd	r24, Y+10	; 0x0a
     774:	9b 85       	ldd	r25, Y+11	; 0x0b
     776:	ac 85       	ldd	r26, Y+12	; 0x0c
     778:	bd 85       	ldd	r27, Y+13	; 0x0d
     77a:	81 30       	cpi	r24, 0x01	; 1
     77c:	91 05       	cpc	r25, r1
     77e:	a1 05       	cpc	r26, r1
     780:	b1 05       	cpc	r27, r1
     782:	e9 f0       	breq	.+58     	; 0x7be <Pwm_Start+0x102>
     784:	8a 85       	ldd	r24, Y+10	; 0x0a
     786:	9b 85       	ldd	r25, Y+11	; 0x0b
     788:	ac 85       	ldd	r26, Y+12	; 0x0c
     78a:	bd 85       	ldd	r27, Y+13	; 0x0d
     78c:	82 30       	cpi	r24, 0x02	; 2
     78e:	91 05       	cpc	r25, r1
     790:	a1 05       	cpc	r26, r1
     792:	b1 05       	cpc	r27, r1
     794:	d1 f0       	breq	.+52     	; 0x7ca <Pwm_Start+0x10e>
     796:	31 c0       	rjmp	.+98     	; 0x7fa <Pwm_Start+0x13e>
     798:	8a 85       	ldd	r24, Y+10	; 0x0a
     79a:	9b 85       	ldd	r25, Y+11	; 0x0b
     79c:	ac 85       	ldd	r26, Y+12	; 0x0c
     79e:	bd 85       	ldd	r27, Y+13	; 0x0d
     7a0:	84 30       	cpi	r24, 0x04	; 4
     7a2:	91 05       	cpc	r25, r1
     7a4:	a1 05       	cpc	r26, r1
     7a6:	b1 05       	cpc	r27, r1
     7a8:	e1 f0       	breq	.+56     	; 0x7e2 <Pwm_Start+0x126>
     7aa:	8a 85       	ldd	r24, Y+10	; 0x0a
     7ac:	9b 85       	ldd	r25, Y+11	; 0x0b
     7ae:	ac 85       	ldd	r26, Y+12	; 0x0c
     7b0:	bd 85       	ldd	r27, Y+13	; 0x0d
     7b2:	85 30       	cpi	r24, 0x05	; 5
     7b4:	91 05       	cpc	r25, r1
     7b6:	a1 05       	cpc	r26, r1
     7b8:	b1 05       	cpc	r27, r1
     7ba:	c9 f0       	breq	.+50     	; 0x7ee <Pwm_Start+0x132>
     7bc:	1e c0       	rjmp	.+60     	; 0x7fa <Pwm_Start+0x13e>
				 * 1. PWM mode FOC0=0
				 * 2. phase correct PWM mode WGM01=0 & WGM00=1
				 * 3. clear OC0 on compare match COM00=0 & COM01=1
				 * 4. clock = F_CPU CS00=1 CS01=0 CS02=0
				 */
				TCCR0 =PWM_PRESCALER_NO | (ONE<<COM01)| (ONE<<WGM00);
     7be:	e3 e5       	ldi	r30, 0x53	; 83
     7c0:	f0 e0       	ldi	r31, 0x00	; 0
     7c2:	81 e6       	ldi	r24, 0x61	; 97
     7c4:	80 83       	st	Z, r24
				u8_status = E_ok;
     7c6:	19 82       	std	Y+1, r1	; 0x01
     7c8:	88 c2       	rjmp	.+1296   	; 0xcda <Pwm_Start+0x61e>
				 * 1. PWM mode FOC0=0
				 * 2. phase correct PWM mode WGM01=0 & WGM00=1
				 * 3. clear OC0 on compare match COM00=0 & COM01=1
				 * 4. clock = F_CPU/8 CS00=1 CS01=0 CS02=0
				 */
				TCCR0 =PWM_PRESCALER_8 | (ONE<<COM01)| (ONE<<WGM00);
     7ca:	e3 e5       	ldi	r30, 0x53	; 83
     7cc:	f0 e0       	ldi	r31, 0x00	; 0
     7ce:	82 e6       	ldi	r24, 0x62	; 98
     7d0:	80 83       	st	Z, r24
				u8_status = E_ok;
     7d2:	19 82       	std	Y+1, r1	; 0x01
     7d4:	82 c2       	rjmp	.+1284   	; 0xcda <Pwm_Start+0x61e>
				 * 1. PWM mode FOC0=0
				 * 2. phase correct PWM mode WGM01=0 & WGM00=1
				 * 3. clear OC0 on compare match COM00=0 & COM01=1
				 * 4. clock = F_CPU/64 CS00=1 CS01=1 CS02=0
				 */
				TCCR0 =PWM_PRESCALER_64 | (ONE<<COM01)| (ONE<<WGM00);
     7d6:	e3 e5       	ldi	r30, 0x53	; 83
     7d8:	f0 e0       	ldi	r31, 0x00	; 0
     7da:	83 e6       	ldi	r24, 0x63	; 99
     7dc:	80 83       	st	Z, r24
				u8_status = E_ok;
     7de:	19 82       	std	Y+1, r1	; 0x01
     7e0:	7c c2       	rjmp	.+1272   	; 0xcda <Pwm_Start+0x61e>
				 * 1. PWM mode FOC0=0
				 * 2. phase correct PWM mode WGM01=0 & WGM00=1
				 * 3. clear OC0 on compare match COM00=0 & COM01=1
				 * 4. clock = F_CPU/256 CS00=0 CS01=0 CS02=1
				 */
				TCCR0 =PWM_PRESCALER_256 | (ONE<<COM01)| (ONE<<WGM00);
     7e2:	e3 e5       	ldi	r30, 0x53	; 83
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	84 e6       	ldi	r24, 0x64	; 100
     7e8:	80 83       	st	Z, r24
				u8_status = E_ok;
     7ea:	19 82       	std	Y+1, r1	; 0x01
     7ec:	76 c2       	rjmp	.+1260   	; 0xcda <Pwm_Start+0x61e>
				 * 1. PWM mode FOC0=0
				 * 2. phase correct PWM mode WGM01=0 & WGM00=1
				 * 3. clear OC0 on compare match COM00=0 & COM01=1
				 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
				 */
				TCCR0 =PWM_PRESCALER_1024 | (ONE<<COM01)| (ONE<<WGM00);
     7ee:	e3 e5       	ldi	r30, 0x53	; 83
     7f0:	f0 e0       	ldi	r31, 0x00	; 0
     7f2:	85 e6       	ldi	r24, 0x65	; 101
     7f4:	80 83       	st	Z, r24
				u8_status = E_ok;
     7f6:	19 82       	std	Y+1, r1	; 0x01
     7f8:	70 c2       	rjmp	.+1248   	; 0xcda <Pwm_Start+0x61e>
				break;

		default:
			u8_status = E_NOk;
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	89 83       	std	Y+1, r24	; 0x01
     7fe:	6d c2       	rjmp	.+1242   	; 0xcda <Pwm_Start+0x61e>
			break;
		}
	break;

	case PWM_CH1A:
		OCR1A = (Duty)*(TIMER_ICR1_TOP_VALUE/ONE_HUNDRED);   /*output compare value*/
     800:	ea e4       	ldi	r30, 0x4A	; 74
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	8b 81       	ldd	r24, Y+3	; 0x03
     806:	28 2f       	mov	r18, r24
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	c9 01       	movw	r24, r18
     80c:	88 0f       	add	r24, r24
     80e:	99 1f       	adc	r25, r25
     810:	82 0f       	add	r24, r18
     812:	93 1f       	adc	r25, r19
     814:	88 0f       	add	r24, r24
     816:	99 1f       	adc	r25, r25
     818:	88 0f       	add	r24, r24
     81a:	99 1f       	adc	r25, r25
     81c:	88 0f       	add	r24, r24
     81e:	99 1f       	adc	r25, r25
     820:	91 83       	std	Z+1, r25	; 0x01
     822:	80 83       	st	Z, r24
		switch(Frequncy)
     824:	8c 81       	ldd	r24, Y+4	; 0x04
     826:	9d 81       	ldd	r25, Y+5	; 0x05
     828:	ae 81       	ldd	r26, Y+6	; 0x06
     82a:	bf 81       	ldd	r27, Y+7	; 0x07
     82c:	8e 87       	std	Y+14, r24	; 0x0e
     82e:	9f 87       	std	Y+15, r25	; 0x0f
     830:	a8 8b       	std	Y+16, r26	; 0x10
     832:	b9 8b       	std	Y+17, r27	; 0x11
     834:	8e 85       	ldd	r24, Y+14	; 0x0e
     836:	9f 85       	ldd	r25, Y+15	; 0x0f
     838:	a8 89       	ldd	r26, Y+16	; 0x10
     83a:	b9 89       	ldd	r27, Y+17	; 0x11
     83c:	83 30       	cpi	r24, 0x03	; 3
     83e:	91 05       	cpc	r25, r1
     840:	a1 05       	cpc	r26, r1
     842:	b1 05       	cpc	r27, r1
     844:	09 f4       	brne	.+2      	; 0x848 <Pwm_Start+0x18c>
     846:	50 c0       	rjmp	.+160    	; 0x8e8 <Pwm_Start+0x22c>
     848:	8e 85       	ldd	r24, Y+14	; 0x0e
     84a:	9f 85       	ldd	r25, Y+15	; 0x0f
     84c:	a8 89       	ldd	r26, Y+16	; 0x10
     84e:	b9 89       	ldd	r27, Y+17	; 0x11
     850:	84 30       	cpi	r24, 0x04	; 4
     852:	91 05       	cpc	r25, r1
     854:	a1 05       	cpc	r26, r1
     856:	b1 05       	cpc	r27, r1
     858:	98 f4       	brcc	.+38     	; 0x880 <Pwm_Start+0x1c4>
     85a:	8e 85       	ldd	r24, Y+14	; 0x0e
     85c:	9f 85       	ldd	r25, Y+15	; 0x0f
     85e:	a8 89       	ldd	r26, Y+16	; 0x10
     860:	b9 89       	ldd	r27, Y+17	; 0x11
     862:	81 30       	cpi	r24, 0x01	; 1
     864:	91 05       	cpc	r25, r1
     866:	a1 05       	cpc	r26, r1
     868:	b1 05       	cpc	r27, r1
     86a:	f1 f0       	breq	.+60     	; 0x8a8 <Pwm_Start+0x1ec>
     86c:	8e 85       	ldd	r24, Y+14	; 0x0e
     86e:	9f 85       	ldd	r25, Y+15	; 0x0f
     870:	a8 89       	ldd	r26, Y+16	; 0x10
     872:	b9 89       	ldd	r27, Y+17	; 0x11
     874:	82 30       	cpi	r24, 0x02	; 2
     876:	91 05       	cpc	r25, r1
     878:	a1 05       	cpc	r26, r1
     87a:	b1 05       	cpc	r27, r1
     87c:	29 f1       	breq	.+74     	; 0x8c8 <Pwm_Start+0x20c>
     87e:	64 c0       	rjmp	.+200    	; 0x948 <Pwm_Start+0x28c>
     880:	8e 85       	ldd	r24, Y+14	; 0x0e
     882:	9f 85       	ldd	r25, Y+15	; 0x0f
     884:	a8 89       	ldd	r26, Y+16	; 0x10
     886:	b9 89       	ldd	r27, Y+17	; 0x11
     888:	84 30       	cpi	r24, 0x04	; 4
     88a:	91 05       	cpc	r25, r1
     88c:	a1 05       	cpc	r26, r1
     88e:	b1 05       	cpc	r27, r1
     890:	d9 f1       	breq	.+118    	; 0x908 <Pwm_Start+0x24c>
     892:	8e 85       	ldd	r24, Y+14	; 0x0e
     894:	9f 85       	ldd	r25, Y+15	; 0x0f
     896:	a8 89       	ldd	r26, Y+16	; 0x10
     898:	b9 89       	ldd	r27, Y+17	; 0x11
     89a:	85 30       	cpi	r24, 0x05	; 5
     89c:	91 05       	cpc	r25, r1
     89e:	a1 05       	cpc	r26, r1
     8a0:	b1 05       	cpc	r27, r1
     8a2:	09 f4       	brne	.+2      	; 0x8a6 <Pwm_Start+0x1ea>
     8a4:	41 c0       	rjmp	.+130    	; 0x928 <Pwm_Start+0x26c>
     8a6:	50 c0       	rjmp	.+160    	; 0x948 <Pwm_Start+0x28c>
			{

			case(T1_PHASE_CORRECT_FREQUENCY_3KHZ):
					ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     8a8:	e6 e4       	ldi	r30, 0x46	; 70
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	83 ec       	ldi	r24, 0xC3	; 195
     8ae:	99 e0       	ldi	r25, 0x09	; 9
     8b0:	91 83       	std	Z+1, r25	; 0x01
     8b2:	80 83       	st	Z, r24
					 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
					 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
					 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
					 * 4. phase correct Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 10)
					 */
					TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1);
     8b4:	ef e4       	ldi	r30, 0x4F	; 79
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	82 e8       	ldi	r24, 0x82	; 130
     8ba:	80 83       	st	Z, r24

					/* Configure timer control register TCCR1A
					 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=0 WGM13=1 (Mode Number 10)
					 * 2. Prescaller = F_CPU
					 */
					TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_NO;
     8bc:	ee e4       	ldi	r30, 0x4E	; 78
     8be:	f0 e0       	ldi	r31, 0x00	; 0
     8c0:	81 e1       	ldi	r24, 0x11	; 17
     8c2:	80 83       	st	Z, r24
					u8_status = E_ok;
     8c4:	19 82       	std	Y+1, r1	; 0x01
     8c6:	09 c2       	rjmp	.+1042   	; 0xcda <Pwm_Start+0x61e>
					break;

			case(T1_PHASE_CORRECT_FREQUENCY_400HZ):
					ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     8c8:	e6 e4       	ldi	r30, 0x46	; 70
     8ca:	f0 e0       	ldi	r31, 0x00	; 0
     8cc:	83 ec       	ldi	r24, 0xC3	; 195
     8ce:	99 e0       	ldi	r25, 0x09	; 9
     8d0:	91 83       	std	Z+1, r25	; 0x01
     8d2:	80 83       	st	Z, r24
					 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
					 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
					 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
					 * 4. phase correct Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 10)
					 */
					TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1);
     8d4:	ef e4       	ldi	r30, 0x4F	; 79
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	82 e8       	ldi	r24, 0x82	; 130
     8da:	80 83       	st	Z, r24

					/* Configure timer control register TCCR1A
					 * 1. phase correct Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 10)
					 * 2. Prescaller = F_CPU/8
					 */
					TCCR1B = (ONE<<WGM13) | PWM_PRESCALER_8;
     8dc:	ee e4       	ldi	r30, 0x4E	; 78
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	82 e1       	ldi	r24, 0x12	; 18
     8e2:	80 83       	st	Z, r24
					u8_status = E_ok;
     8e4:	19 82       	std	Y+1, r1	; 0x01
     8e6:	f9 c1       	rjmp	.+1010   	; 0xcda <Pwm_Start+0x61e>
					break;

			case(T1_PHASE_CORRECT_FREQUENCY_50HZ):
					ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     8e8:	e6 e4       	ldi	r30, 0x46	; 70
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	83 ec       	ldi	r24, 0xC3	; 195
     8ee:	99 e0       	ldi	r25, 0x09	; 9
     8f0:	91 83       	std	Z+1, r25	; 0x01
     8f2:	80 83       	st	Z, r24
					 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
					 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
					 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
					 * 4. phase correct Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 10)
					 */
					TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1);
     8f4:	ef e4       	ldi	r30, 0x4F	; 79
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	82 e8       	ldi	r24, 0x82	; 130
     8fa:	80 83       	st	Z, r24

					/* Configure timer control register TCCR1A
					 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 10)
					 * 2. Prescaller = F_CPU/64
					 */
					TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_64;
     8fc:	ee e4       	ldi	r30, 0x4E	; 78
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	83 e1       	ldi	r24, 0x13	; 19
     902:	80 83       	st	Z, r24
					u8_status = E_ok;
     904:	19 82       	std	Y+1, r1	; 0x01
     906:	e9 c1       	rjmp	.+978    	; 0xcda <Pwm_Start+0x61e>
					break;

			case(T1_PHASE_CORRECT_FREQUENCY_13HZ):  //90hz
					ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     908:	e6 e4       	ldi	r30, 0x46	; 70
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	83 ec       	ldi	r24, 0xC3	; 195
     90e:	99 e0       	ldi	r25, 0x09	; 9
     910:	91 83       	std	Z+1, r25	; 0x01
     912:	80 83       	st	Z, r24
				     * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
				     * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
				     * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
				     * 4. phase correct Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 10)
					 */
					TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1);
     914:	ef e4       	ldi	r30, 0x4F	; 79
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	82 e8       	ldi	r24, 0x82	; 130
     91a:	80 83       	st	Z, r24

					/* Configure timer control register TCCR1A
					 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 10)
					 * 2. Prescaller = F_CPU/256
				     */
					TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_256;
     91c:	ee e4       	ldi	r30, 0x4E	; 78
     91e:	f0 e0       	ldi	r31, 0x00	; 0
     920:	84 e1       	ldi	r24, 0x14	; 20
     922:	80 83       	st	Z, r24
					u8_status = E_ok;
     924:	19 82       	std	Y+1, r1	; 0x01
     926:	d9 c1       	rjmp	.+946    	; 0xcda <Pwm_Start+0x61e>
					break;

			case(T1_PHASE_CORRECT_FREQUENCY_3HZ):
					ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     928:	e6 e4       	ldi	r30, 0x46	; 70
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	83 ec       	ldi	r24, 0xC3	; 195
     92e:	99 e0       	ldi	r25, 0x09	; 9
     930:	91 83       	std	Z+1, r25	; 0x01
     932:	80 83       	st	Z, r24
					 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
					 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
					 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
					 * 4. phase correct Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 10)
					 */
					TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1);
     934:	ef e4       	ldi	r30, 0x4F	; 79
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	82 e8       	ldi	r24, 0x82	; 130
     93a:	80 83       	st	Z, r24

					/* Configure timer control register TCCR1A
					 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 10)
					 * 2. Prescaller = F_CPU/1024
					 */
					TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_1024;
     93c:	ee e4       	ldi	r30, 0x4E	; 78
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	85 e1       	ldi	r24, 0x15	; 21
     942:	80 83       	st	Z, r24
					u8_status = E_ok;
     944:	19 82       	std	Y+1, r1	; 0x01
     946:	c9 c1       	rjmp	.+914    	; 0xcda <Pwm_Start+0x61e>
					break;

			default:
				u8_status = E_NOk;
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	89 83       	std	Y+1, r24	; 0x01
     94c:	c6 c1       	rjmp	.+908    	; 0xcda <Pwm_Start+0x61e>
				break;
			}
	break;

	case PWM_CH1B:
		OCR1B = (Duty)*(TIMER_ICR1_TOP_VALUE/ONE_HUNDRED);   /*output compare value*/
     94e:	e8 e4       	ldi	r30, 0x48	; 72
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	8b 81       	ldd	r24, Y+3	; 0x03
     954:	28 2f       	mov	r18, r24
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	c9 01       	movw	r24, r18
     95a:	88 0f       	add	r24, r24
     95c:	99 1f       	adc	r25, r25
     95e:	82 0f       	add	r24, r18
     960:	93 1f       	adc	r25, r19
     962:	88 0f       	add	r24, r24
     964:	99 1f       	adc	r25, r25
     966:	88 0f       	add	r24, r24
     968:	99 1f       	adc	r25, r25
     96a:	88 0f       	add	r24, r24
     96c:	99 1f       	adc	r25, r25
     96e:	91 83       	std	Z+1, r25	; 0x01
     970:	80 83       	st	Z, r24
		switch(Frequncy)
     972:	8c 81       	ldd	r24, Y+4	; 0x04
     974:	9d 81       	ldd	r25, Y+5	; 0x05
     976:	ae 81       	ldd	r26, Y+6	; 0x06
     978:	bf 81       	ldd	r27, Y+7	; 0x07
     97a:	8a 8b       	std	Y+18, r24	; 0x12
     97c:	9b 8b       	std	Y+19, r25	; 0x13
     97e:	ac 8b       	std	Y+20, r26	; 0x14
     980:	bd 8b       	std	Y+21, r27	; 0x15
     982:	8a 89       	ldd	r24, Y+18	; 0x12
     984:	9b 89       	ldd	r25, Y+19	; 0x13
     986:	ac 89       	ldd	r26, Y+20	; 0x14
     988:	bd 89       	ldd	r27, Y+21	; 0x15
     98a:	83 30       	cpi	r24, 0x03	; 3
     98c:	91 05       	cpc	r25, r1
     98e:	a1 05       	cpc	r26, r1
     990:	b1 05       	cpc	r27, r1
     992:	09 f4       	brne	.+2      	; 0x996 <Pwm_Start+0x2da>
     994:	50 c0       	rjmp	.+160    	; 0xa36 <Pwm_Start+0x37a>
     996:	8a 89       	ldd	r24, Y+18	; 0x12
     998:	9b 89       	ldd	r25, Y+19	; 0x13
     99a:	ac 89       	ldd	r26, Y+20	; 0x14
     99c:	bd 89       	ldd	r27, Y+21	; 0x15
     99e:	84 30       	cpi	r24, 0x04	; 4
     9a0:	91 05       	cpc	r25, r1
     9a2:	a1 05       	cpc	r26, r1
     9a4:	b1 05       	cpc	r27, r1
     9a6:	98 f4       	brcc	.+38     	; 0x9ce <Pwm_Start+0x312>
     9a8:	8a 89       	ldd	r24, Y+18	; 0x12
     9aa:	9b 89       	ldd	r25, Y+19	; 0x13
     9ac:	ac 89       	ldd	r26, Y+20	; 0x14
     9ae:	bd 89       	ldd	r27, Y+21	; 0x15
     9b0:	81 30       	cpi	r24, 0x01	; 1
     9b2:	91 05       	cpc	r25, r1
     9b4:	a1 05       	cpc	r26, r1
     9b6:	b1 05       	cpc	r27, r1
     9b8:	f1 f0       	breq	.+60     	; 0x9f6 <Pwm_Start+0x33a>
     9ba:	8a 89       	ldd	r24, Y+18	; 0x12
     9bc:	9b 89       	ldd	r25, Y+19	; 0x13
     9be:	ac 89       	ldd	r26, Y+20	; 0x14
     9c0:	bd 89       	ldd	r27, Y+21	; 0x15
     9c2:	82 30       	cpi	r24, 0x02	; 2
     9c4:	91 05       	cpc	r25, r1
     9c6:	a1 05       	cpc	r26, r1
     9c8:	b1 05       	cpc	r27, r1
     9ca:	29 f1       	breq	.+74     	; 0xa16 <Pwm_Start+0x35a>
     9cc:	64 c0       	rjmp	.+200    	; 0xa96 <Pwm_Start+0x3da>
     9ce:	8a 89       	ldd	r24, Y+18	; 0x12
     9d0:	9b 89       	ldd	r25, Y+19	; 0x13
     9d2:	ac 89       	ldd	r26, Y+20	; 0x14
     9d4:	bd 89       	ldd	r27, Y+21	; 0x15
     9d6:	84 30       	cpi	r24, 0x04	; 4
     9d8:	91 05       	cpc	r25, r1
     9da:	a1 05       	cpc	r26, r1
     9dc:	b1 05       	cpc	r27, r1
     9de:	d9 f1       	breq	.+118    	; 0xa56 <Pwm_Start+0x39a>
     9e0:	8a 89       	ldd	r24, Y+18	; 0x12
     9e2:	9b 89       	ldd	r25, Y+19	; 0x13
     9e4:	ac 89       	ldd	r26, Y+20	; 0x14
     9e6:	bd 89       	ldd	r27, Y+21	; 0x15
     9e8:	85 30       	cpi	r24, 0x05	; 5
     9ea:	91 05       	cpc	r25, r1
     9ec:	a1 05       	cpc	r26, r1
     9ee:	b1 05       	cpc	r27, r1
     9f0:	09 f4       	brne	.+2      	; 0x9f4 <Pwm_Start+0x338>
     9f2:	41 c0       	rjmp	.+130    	; 0xa76 <Pwm_Start+0x3ba>
     9f4:	50 c0       	rjmp	.+160    	; 0xa96 <Pwm_Start+0x3da>
			{
			case(T1_PHASE_CORRECT_FREQUENCY_3KHZ):
					ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     9f6:	e6 e4       	ldi	r30, 0x46	; 70
     9f8:	f0 e0       	ldi	r31, 0x00	; 0
     9fa:	83 ec       	ldi	r24, 0xC3	; 195
     9fc:	99 e0       	ldi	r25, 0x09	; 9
     9fe:	91 83       	std	Z+1, r25	; 0x01
     a00:	80 83       	st	Z, r24
					 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
					 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
					 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
					 * 4. phase correct Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 10)
					 */
					TCCR1A = (ONE<<WGM11) | (ONE<<COM1B1);
     a02:	ef e4       	ldi	r30, 0x4F	; 79
     a04:	f0 e0       	ldi	r31, 0x00	; 0
     a06:	82 e2       	ldi	r24, 0x22	; 34
     a08:	80 83       	st	Z, r24

					/* Configure timer control register TCCR1A
					 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=0 WGM13=1 (Mode Number 10)
					 * 2. Prescaller = F_CPU
					 */
					TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_NO;
     a0a:	ee e4       	ldi	r30, 0x4E	; 78
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	81 e1       	ldi	r24, 0x11	; 17
     a10:	80 83       	st	Z, r24
					u8_status = E_ok;
     a12:	19 82       	std	Y+1, r1	; 0x01
     a14:	62 c1       	rjmp	.+708    	; 0xcda <Pwm_Start+0x61e>
					break;

			case(T1_PHASE_CORRECT_FREQUENCY_400HZ):
					ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     a16:	e6 e4       	ldi	r30, 0x46	; 70
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	83 ec       	ldi	r24, 0xC3	; 195
     a1c:	99 e0       	ldi	r25, 0x09	; 9
     a1e:	91 83       	std	Z+1, r25	; 0x01
     a20:	80 83       	st	Z, r24
					 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
					 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
					 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
					 * 4. phase correct Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 10)
					 */
					TCCR1A = (ONE<<WGM11) | (ONE<<COM1B1);
     a22:	ef e4       	ldi	r30, 0x4F	; 79
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	82 e2       	ldi	r24, 0x22	; 34
     a28:	80 83       	st	Z, r24

					/* Configure timer control register TCCR1A
					 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 10)
					 * 2. Prescaller = F_CPU/8
					 */
					TCCR1B = (ONE<<WGM13) | PWM_PRESCALER_8;
     a2a:	ee e4       	ldi	r30, 0x4E	; 78
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	82 e1       	ldi	r24, 0x12	; 18
     a30:	80 83       	st	Z, r24
					u8_status = E_ok;
     a32:	19 82       	std	Y+1, r1	; 0x01
     a34:	52 c1       	rjmp	.+676    	; 0xcda <Pwm_Start+0x61e>
					break;

			case(T1_PHASE_CORRECT_FREQUENCY_50HZ):
					ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     a36:	e6 e4       	ldi	r30, 0x46	; 70
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	83 ec       	ldi	r24, 0xC3	; 195
     a3c:	99 e0       	ldi	r25, 0x09	; 9
     a3e:	91 83       	std	Z+1, r25	; 0x01
     a40:	80 83       	st	Z, r24
					 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
					 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
					 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
					 * 4. phase correct Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 10)
					 */
					TCCR1A = (ONE<<WGM11) | (ONE<<COM1B1);
     a42:	ef e4       	ldi	r30, 0x4F	; 79
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	82 e2       	ldi	r24, 0x22	; 34
     a48:	80 83       	st	Z, r24

					/* Configure timer control register TCCR1A
					 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 10)
					 * 2. Prescaller = F_CPU/64
					 */
					TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_64;
     a4a:	ee e4       	ldi	r30, 0x4E	; 78
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	83 e1       	ldi	r24, 0x13	; 19
     a50:	80 83       	st	Z, r24
					u8_status = E_ok;
     a52:	19 82       	std	Y+1, r1	; 0x01
     a54:	42 c1       	rjmp	.+644    	; 0xcda <Pwm_Start+0x61e>
					break;

			case(T1_PHASE_CORRECT_FREQUENCY_13HZ):  //90hz
					ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     a56:	e6 e4       	ldi	r30, 0x46	; 70
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	83 ec       	ldi	r24, 0xC3	; 195
     a5c:	99 e0       	ldi	r25, 0x09	; 9
     a5e:	91 83       	std	Z+1, r25	; 0x01
     a60:	80 83       	st	Z, r24
				     * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
				     * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
				     * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
				     * 4. phase correct Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 10)
					 */
					TCCR1A = (ONE<<WGM11) | (ONE<<COM1B1);
     a62:	ef e4       	ldi	r30, 0x4F	; 79
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	82 e2       	ldi	r24, 0x22	; 34
     a68:	80 83       	st	Z, r24

					/* Configure timer control register TCCR1A
					 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 10)
					 * 2. Prescaller = F_CPU/256
				     */
					TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_256;
     a6a:	ee e4       	ldi	r30, 0x4E	; 78
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	84 e1       	ldi	r24, 0x14	; 20
     a70:	80 83       	st	Z, r24
					u8_status = E_ok;
     a72:	19 82       	std	Y+1, r1	; 0x01
     a74:	32 c1       	rjmp	.+612    	; 0xcda <Pwm_Start+0x61e>
					break;

			case(T1_PHASE_CORRECT_FREQUENCY_3HZ):
					ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     a76:	e6 e4       	ldi	r30, 0x46	; 70
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	83 ec       	ldi	r24, 0xC3	; 195
     a7c:	99 e0       	ldi	r25, 0x09	; 9
     a7e:	91 83       	std	Z+1, r25	; 0x01
     a80:	80 83       	st	Z, r24
					 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
					 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
					 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
					 * 4. phase correct Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 10)
					 */
					TCCR1A = (ONE<<WGM11) | (ONE<<COM1B1);
     a82:	ef e4       	ldi	r30, 0x4F	; 79
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	82 e2       	ldi	r24, 0x22	; 34
     a88:	80 83       	st	Z, r24

					/* Configure timer control register TCCR1A
					 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 10)
					 * 2. Prescaller = F_CPU/1024
					 */
					TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_1024;
     a8a:	ee e4       	ldi	r30, 0x4E	; 78
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	85 e1       	ldi	r24, 0x15	; 21
     a90:	80 83       	st	Z, r24
					u8_status = E_ok;
     a92:	19 82       	std	Y+1, r1	; 0x01
     a94:	22 c1       	rjmp	.+580    	; 0xcda <Pwm_Start+0x61e>
					break;

				default:
					u8_status = E_NOk;
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	89 83       	std	Y+1, r24	; 0x01
     a9a:	1f c1       	rjmp	.+574    	; 0xcda <Pwm_Start+0x61e>
					break;
			}
	break;

	case PWM_CH2:
		OCR2 = Duty*(TIMER2_MAX_COUNT/ONE_HUNDRED); /*output compare value*/
     a9c:	e3 e4       	ldi	r30, 0x43	; 67
     a9e:	f0 e0       	ldi	r31, 0x00	; 0
     aa0:	8b 81       	ldd	r24, Y+3	; 0x03
     aa2:	88 2f       	mov	r24, r24
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	88 0f       	add	r24, r24
     aa8:	99 1f       	adc	r25, r25
     aaa:	80 83       	st	Z, r24
		switch(Frequncy)
     aac:	8c 81       	ldd	r24, Y+4	; 0x04
     aae:	9d 81       	ldd	r25, Y+5	; 0x05
     ab0:	ae 81       	ldd	r26, Y+6	; 0x06
     ab2:	bf 81       	ldd	r27, Y+7	; 0x07
     ab4:	8e 8b       	std	Y+22, r24	; 0x16
     ab6:	9f 8b       	std	Y+23, r25	; 0x17
     ab8:	a8 8f       	std	Y+24, r26	; 0x18
     aba:	b9 8f       	std	Y+25, r27	; 0x19
     abc:	8e 89       	ldd	r24, Y+22	; 0x16
     abe:	9f 89       	ldd	r25, Y+23	; 0x17
     ac0:	a8 8d       	ldd	r26, Y+24	; 0x18
     ac2:	b9 8d       	ldd	r27, Y+25	; 0x19
     ac4:	84 30       	cpi	r24, 0x04	; 4
     ac6:	91 05       	cpc	r25, r1
     ac8:	a1 05       	cpc	r26, r1
     aca:	b1 05       	cpc	r27, r1
     acc:	c9 f1       	breq	.+114    	; 0xb40 <Pwm_Start+0x484>
     ace:	8e 89       	ldd	r24, Y+22	; 0x16
     ad0:	9f 89       	ldd	r25, Y+23	; 0x17
     ad2:	a8 8d       	ldd	r26, Y+24	; 0x18
     ad4:	b9 8d       	ldd	r27, Y+25	; 0x19
     ad6:	85 30       	cpi	r24, 0x05	; 5
     ad8:	91 05       	cpc	r25, r1
     ada:	a1 05       	cpc	r26, r1
     adc:	b1 05       	cpc	r27, r1
     ade:	98 f4       	brcc	.+38     	; 0xb06 <Pwm_Start+0x44a>
     ae0:	8e 89       	ldd	r24, Y+22	; 0x16
     ae2:	9f 89       	ldd	r25, Y+23	; 0x17
     ae4:	a8 8d       	ldd	r26, Y+24	; 0x18
     ae6:	b9 8d       	ldd	r27, Y+25	; 0x19
     ae8:	81 30       	cpi	r24, 0x01	; 1
     aea:	91 05       	cpc	r25, r1
     aec:	a1 05       	cpc	r26, r1
     aee:	b1 05       	cpc	r27, r1
     af0:	e9 f0       	breq	.+58     	; 0xb2c <Pwm_Start+0x470>
     af2:	8e 89       	ldd	r24, Y+22	; 0x16
     af4:	9f 89       	ldd	r25, Y+23	; 0x17
     af6:	a8 8d       	ldd	r26, Y+24	; 0x18
     af8:	b9 8d       	ldd	r27, Y+25	; 0x19
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	91 05       	cpc	r25, r1
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	c9 f0       	breq	.+50     	; 0xb36 <Pwm_Start+0x47a>
     b04:	2c c0       	rjmp	.+88     	; 0xb5e <Pwm_Start+0x4a2>
     b06:	8e 89       	ldd	r24, Y+22	; 0x16
     b08:	9f 89       	ldd	r25, Y+23	; 0x17
     b0a:	a8 8d       	ldd	r26, Y+24	; 0x18
     b0c:	b9 8d       	ldd	r27, Y+25	; 0x19
     b0e:	86 30       	cpi	r24, 0x06	; 6
     b10:	91 05       	cpc	r25, r1
     b12:	a1 05       	cpc	r26, r1
     b14:	b1 05       	cpc	r27, r1
     b16:	c9 f0       	breq	.+50     	; 0xb4a <Pwm_Start+0x48e>
     b18:	8e 89       	ldd	r24, Y+22	; 0x16
     b1a:	9f 89       	ldd	r25, Y+23	; 0x17
     b1c:	a8 8d       	ldd	r26, Y+24	; 0x18
     b1e:	b9 8d       	ldd	r27, Y+25	; 0x19
     b20:	87 30       	cpi	r24, 0x07	; 7
     b22:	91 05       	cpc	r25, r1
     b24:	a1 05       	cpc	r26, r1
     b26:	b1 05       	cpc	r27, r1
     b28:	a9 f0       	breq	.+42     	; 0xb54 <Pwm_Start+0x498>
     b2a:	19 c0       	rjmp	.+50     	; 0xb5e <Pwm_Start+0x4a2>
				 * 1. PWM mode FOC0=0
				 * 2. phase correct PWM mode WGM21=0 & WGM20=1
				 * 3. clear OC0 on compare match COM20=0 & COM21=1
				 * 4. clock = F_CPU/1024 CS20=1 CS21=0 CS22=1
				 */
				TCCR2 =PWM_PRESCALER_NO | (ONE<<COM21)| (ONE<<WGM20);
     b2c:	e5 e4       	ldi	r30, 0x45	; 69
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	81 e6       	ldi	r24, 0x61	; 97
     b32:	80 83       	st	Z, r24
     b34:	d2 c0       	rjmp	.+420    	; 0xcda <Pwm_Start+0x61e>
				 * 1. PWM mode FOC0=0
				 * 2. phase correct PWM mode WGM21=0 & WGM20=1
				 * 3. clear OC0 on compare match COM20=0 & COM21=1
				 * 4. clock = F_CPU/1024 CS20=1 CS21=0 CS22=1
				 */
				TCCR2 =PWM_PRESCALER_8 | (ONE<<COM21)| (ONE<<WGM20);
     b36:	e5 e4       	ldi	r30, 0x45	; 69
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	82 e6       	ldi	r24, 0x62	; 98
     b3c:	80 83       	st	Z, r24
     b3e:	cd c0       	rjmp	.+410    	; 0xcda <Pwm_Start+0x61e>
				 * 1. PWM mode FOC0=0
				 * 2. phase correct PWM mode WGM21=0 & WGM20=1
				 * 3. clear OC0 on compare match COM20=0 & COM21=1
				 * 4. clock = F_CPU/1024 CS20=1 CS21=0 CS22=1
				 */
				TCCR2 =PWM_PRESCALER_64 | (ONE<<COM21)| (ONE<<WGM20);
     b40:	e5 e4       	ldi	r30, 0x45	; 69
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	83 e6       	ldi	r24, 0x63	; 99
     b46:	80 83       	st	Z, r24
     b48:	c8 c0       	rjmp	.+400    	; 0xcda <Pwm_Start+0x61e>
				 * 1. PWM mode FOC0=0
				 * 2. phase correct PWM mode WGM21=0 & WGM20=1
				 * 3. clear OC0 on compare match COM20=0 & COM21=1
				 * 4. clock = F_CPU/1024 CS20=1 CS21=0 CS22=1
				 */
				TCCR2 =PWM_PRESCALER_256 | (ONE<<COM21)| (ONE<<WGM20);
     b4a:	e5 e4       	ldi	r30, 0x45	; 69
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	84 e6       	ldi	r24, 0x64	; 100
     b50:	80 83       	st	Z, r24
     b52:	c3 c0       	rjmp	.+390    	; 0xcda <Pwm_Start+0x61e>
				 * 1. PWM mode FOC0=0
				 * 2. phase correct PWM mode WGM21=0 & WGM20=1
				 * 3. clear OC0 on compare match COM20=0 & COM21=1
				 * 4. clock = F_CPU/1024 CS20=1 CS21=0 CS22=1
				 */
				TCCR2 =PWM_PRESCALER_1024 | (ONE<<COM21)| (ONE<<WGM20);
     b54:	e5 e4       	ldi	r30, 0x45	; 69
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	85 e6       	ldi	r24, 0x65	; 101
     b5a:	80 83       	st	Z, r24
     b5c:	be c0       	rjmp	.+380    	; 0xcda <Pwm_Start+0x61e>
				break;

		default:
			u8_status = E_NOk;
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	89 83       	std	Y+1, r24	; 0x01
     b62:	bb c0       	rjmp	.+374    	; 0xcda <Pwm_Start+0x61e>
			break;
		}
	break;

	case PWM_CH1A_CH1B:
		OCR1A = (Duty)*(TIMER_ICR1_TOP_VALUE/ONE_HUNDRED);   /*output compare value*/
     b64:	ea e4       	ldi	r30, 0x4A	; 74
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	8b 81       	ldd	r24, Y+3	; 0x03
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	c9 01       	movw	r24, r18
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	82 0f       	add	r24, r18
     b76:	93 1f       	adc	r25, r19
     b78:	88 0f       	add	r24, r24
     b7a:	99 1f       	adc	r25, r25
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	91 83       	std	Z+1, r25	; 0x01
     b86:	80 83       	st	Z, r24
		OCR1B = (Duty)*(TIMER_ICR1_TOP_VALUE/ONE_HUNDRED);   /*output compare value*/
     b88:	e8 e4       	ldi	r30, 0x48	; 72
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	8b 81       	ldd	r24, Y+3	; 0x03
     b8e:	28 2f       	mov	r18, r24
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	c9 01       	movw	r24, r18
     b94:	88 0f       	add	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	82 0f       	add	r24, r18
     b9a:	93 1f       	adc	r25, r19
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	88 0f       	add	r24, r24
     ba6:	99 1f       	adc	r25, r25
     ba8:	91 83       	std	Z+1, r25	; 0x01
     baa:	80 83       	st	Z, r24
		switch(Frequncy)
     bac:	8c 81       	ldd	r24, Y+4	; 0x04
     bae:	9d 81       	ldd	r25, Y+5	; 0x05
     bb0:	ae 81       	ldd	r26, Y+6	; 0x06
     bb2:	bf 81       	ldd	r27, Y+7	; 0x07
     bb4:	8a 8f       	std	Y+26, r24	; 0x1a
     bb6:	9b 8f       	std	Y+27, r25	; 0x1b
     bb8:	ac 8f       	std	Y+28, r26	; 0x1c
     bba:	bd 8f       	std	Y+29, r27	; 0x1d
     bbc:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bbe:	9b 8d       	ldd	r25, Y+27	; 0x1b
     bc0:	ac 8d       	ldd	r26, Y+28	; 0x1c
     bc2:	bd 8d       	ldd	r27, Y+29	; 0x1d
     bc4:	83 30       	cpi	r24, 0x03	; 3
     bc6:	91 05       	cpc	r25, r1
     bc8:	a1 05       	cpc	r26, r1
     bca:	b1 05       	cpc	r27, r1
     bcc:	09 f4       	brne	.+2      	; 0xbd0 <Pwm_Start+0x514>
     bce:	50 c0       	rjmp	.+160    	; 0xc70 <Pwm_Start+0x5b4>
     bd0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bd2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     bd4:	ac 8d       	ldd	r26, Y+28	; 0x1c
     bd6:	bd 8d       	ldd	r27, Y+29	; 0x1d
     bd8:	84 30       	cpi	r24, 0x04	; 4
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	98 f4       	brcc	.+38     	; 0xc08 <Pwm_Start+0x54c>
     be2:	8a 8d       	ldd	r24, Y+26	; 0x1a
     be4:	9b 8d       	ldd	r25, Y+27	; 0x1b
     be6:	ac 8d       	ldd	r26, Y+28	; 0x1c
     be8:	bd 8d       	ldd	r27, Y+29	; 0x1d
     bea:	81 30       	cpi	r24, 0x01	; 1
     bec:	91 05       	cpc	r25, r1
     bee:	a1 05       	cpc	r26, r1
     bf0:	b1 05       	cpc	r27, r1
     bf2:	f1 f0       	breq	.+60     	; 0xc30 <Pwm_Start+0x574>
     bf4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bf6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     bf8:	ac 8d       	ldd	r26, Y+28	; 0x1c
     bfa:	bd 8d       	ldd	r27, Y+29	; 0x1d
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	91 05       	cpc	r25, r1
     c00:	a1 05       	cpc	r26, r1
     c02:	b1 05       	cpc	r27, r1
     c04:	29 f1       	breq	.+74     	; 0xc50 <Pwm_Start+0x594>
     c06:	64 c0       	rjmp	.+200    	; 0xcd0 <Pwm_Start+0x614>
     c08:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c0a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c0c:	ac 8d       	ldd	r26, Y+28	; 0x1c
     c0e:	bd 8d       	ldd	r27, Y+29	; 0x1d
     c10:	84 30       	cpi	r24, 0x04	; 4
     c12:	91 05       	cpc	r25, r1
     c14:	a1 05       	cpc	r26, r1
     c16:	b1 05       	cpc	r27, r1
     c18:	d9 f1       	breq	.+118    	; 0xc90 <Pwm_Start+0x5d4>
     c1a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c1c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c1e:	ac 8d       	ldd	r26, Y+28	; 0x1c
     c20:	bd 8d       	ldd	r27, Y+29	; 0x1d
     c22:	85 30       	cpi	r24, 0x05	; 5
     c24:	91 05       	cpc	r25, r1
     c26:	a1 05       	cpc	r26, r1
     c28:	b1 05       	cpc	r27, r1
     c2a:	09 f4       	brne	.+2      	; 0xc2e <Pwm_Start+0x572>
     c2c:	41 c0       	rjmp	.+130    	; 0xcb0 <Pwm_Start+0x5f4>
     c2e:	50 c0       	rjmp	.+160    	; 0xcd0 <Pwm_Start+0x614>
		{
		case(T1_PHASE_CORRECT_FREQUENCY_3KHZ):
				ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     c30:	e6 e4       	ldi	r30, 0x46	; 70
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	83 ec       	ldi	r24, 0xC3	; 195
     c36:	99 e0       	ldi	r25, 0x09	; 9
     c38:	91 83       	std	Z+1, r25	; 0x01
     c3a:	80 83       	st	Z, r24
				 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
				 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
				 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
				 * 4. phase correct Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 10)
				 */
				TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1) | (ONE<<COM1B1);
     c3c:	ef e4       	ldi	r30, 0x4F	; 79
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	82 ea       	ldi	r24, 0xA2	; 162
     c42:	80 83       	st	Z, r24

				/* Configure timer control register TCCR1A
				 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=0 WGM13=1 (Mode Number 10)
				 * 2. Prescaller = F_CPU
				 */
				TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_NO;
     c44:	ee e4       	ldi	r30, 0x4E	; 78
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	81 e1       	ldi	r24, 0x11	; 17
     c4a:	80 83       	st	Z, r24
				u8_status = E_ok;
     c4c:	19 82       	std	Y+1, r1	; 0x01
     c4e:	45 c0       	rjmp	.+138    	; 0xcda <Pwm_Start+0x61e>
				break;

		case(T1_PHASE_CORRECT_FREQUENCY_400HZ):
				ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     c50:	e6 e4       	ldi	r30, 0x46	; 70
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	83 ec       	ldi	r24, 0xC3	; 195
     c56:	99 e0       	ldi	r25, 0x09	; 9
     c58:	91 83       	std	Z+1, r25	; 0x01
     c5a:	80 83       	st	Z, r24
				 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
				 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
				 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
				 * 4. phase correct Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 10)
				 */
				TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1) | (ONE<<COM1B1);
     c5c:	ef e4       	ldi	r30, 0x4F	; 79
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	82 ea       	ldi	r24, 0xA2	; 162
     c62:	80 83       	st	Z, r24

				/* Configure timer control register TCCR1A
				 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 10)
				 * 2. Prescaller = F_CPU/8
				 */
				TCCR1B = (ONE<<WGM13) | PWM_PRESCALER_8;
     c64:	ee e4       	ldi	r30, 0x4E	; 78
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	82 e1       	ldi	r24, 0x12	; 18
     c6a:	80 83       	st	Z, r24
				u8_status = E_ok;
     c6c:	19 82       	std	Y+1, r1	; 0x01
     c6e:	35 c0       	rjmp	.+106    	; 0xcda <Pwm_Start+0x61e>
				break;

		case(T1_PHASE_CORRECT_FREQUENCY_50HZ):
				ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     c70:	e6 e4       	ldi	r30, 0x46	; 70
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	83 ec       	ldi	r24, 0xC3	; 195
     c76:	99 e0       	ldi	r25, 0x09	; 9
     c78:	91 83       	std	Z+1, r25	; 0x01
     c7a:	80 83       	st	Z, r24
				 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
				 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
				 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
				 * 4. phase correct Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 10)
				 */
				TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1) | (ONE<<COM1B1);
     c7c:	ef e4       	ldi	r30, 0x4F	; 79
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	82 ea       	ldi	r24, 0xA2	; 162
     c82:	80 83       	st	Z, r24

				/* Configure timer control register TCCR1A
				 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 10)
				 * 2. Prescaller = F_CPU/64
				 */
				TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_64;
     c84:	ee e4       	ldi	r30, 0x4E	; 78
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	83 e1       	ldi	r24, 0x13	; 19
     c8a:	80 83       	st	Z, r24
				u8_status = E_ok;
     c8c:	19 82       	std	Y+1, r1	; 0x01
     c8e:	25 c0       	rjmp	.+74     	; 0xcda <Pwm_Start+0x61e>
				break;

		case(T1_PHASE_CORRECT_FREQUENCY_13HZ):  //90hz
				ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     c90:	e6 e4       	ldi	r30, 0x46	; 70
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	83 ec       	ldi	r24, 0xC3	; 195
     c96:	99 e0       	ldi	r25, 0x09	; 9
     c98:	91 83       	std	Z+1, r25	; 0x01
     c9a:	80 83       	st	Z, r24
				 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
				 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
				 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
				 * 4. phase correct Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 10)
				 */
				TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1) | (ONE<<COM1B1);
     c9c:	ef e4       	ldi	r30, 0x4F	; 79
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	82 ea       	ldi	r24, 0xA2	; 162
     ca2:	80 83       	st	Z, r24

				/* Configure timer control register TCCR1A
				 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 10)
				 * 2. Prescaller = F_CPU/256
				 */
				TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_256;
     ca4:	ee e4       	ldi	r30, 0x4E	; 78
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	84 e1       	ldi	r24, 0x14	; 20
     caa:	80 83       	st	Z, r24
				u8_status = E_ok;
     cac:	19 82       	std	Y+1, r1	; 0x01
     cae:	15 c0       	rjmp	.+42     	; 0xcda <Pwm_Start+0x61e>
				break;

		case(T1_PHASE_CORRECT_FREQUENCY_3HZ):
				ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     cb0:	e6 e4       	ldi	r30, 0x46	; 70
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	83 ec       	ldi	r24, 0xC3	; 195
     cb6:	99 e0       	ldi	r25, 0x09	; 9
     cb8:	91 83       	std	Z+1, r25	; 0x01
     cba:	80 83       	st	Z, r24
				 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
				 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
				 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
				 * 4. phase correct Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 10)
				 */
				TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1) | (ONE<<COM1B1);
     cbc:	ef e4       	ldi	r30, 0x4F	; 79
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	82 ea       	ldi	r24, 0xA2	; 162
     cc2:	80 83       	st	Z, r24

				/* Configure timer control register TCCR1A
				 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 10)
				 * 2. Prescaller = F_CPU/1024
				 */
				TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_1024;
     cc4:	ee e4       	ldi	r30, 0x4E	; 78
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	85 e1       	ldi	r24, 0x15	; 21
     cca:	80 83       	st	Z, r24
				u8_status = E_ok;
     ccc:	19 82       	std	Y+1, r1	; 0x01
     cce:	05 c0       	rjmp	.+10     	; 0xcda <Pwm_Start+0x61e>
				break;

			default:
				u8_status = E_NOk;
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	89 83       	std	Y+1, r24	; 0x01
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <Pwm_Start+0x61e>
		}

	break;

	default:
		u8_status = E_NOk;
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
     cda:	89 81       	ldd	r24, Y+1	; 0x01
}
     cdc:	6d 96       	adiw	r28, 0x1d	; 29
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	cd bf       	out	0x3d, r28	; 61
     ce8:	cf 91       	pop	r28
     cea:	df 91       	pop	r29
     cec:	08 95       	ret

00000cee <Pwm_Update>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description: updates the duty cycle and frequency of the dedicated channel
************************************************************************************/
ERROR_STATUS Pwm_Update(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{
     cee:	df 93       	push	r29
     cf0:	cf 93       	push	r28
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	69 97       	sbiw	r28, 0x19	; 25
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	8a 83       	std	Y+2, r24	; 0x02
     d04:	6b 83       	std	Y+3, r22	; 0x03
     d06:	2c 83       	std	Y+4, r18	; 0x04
     d08:	3d 83       	std	Y+5, r19	; 0x05
     d0a:	4e 83       	std	Y+6, r20	; 0x06
     d0c:	5f 83       	std	Y+7, r21	; 0x07
	uint8_t u8_status;
	switch (Channel)
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	28 2f       	mov	r18, r24
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	39 87       	std	Y+9, r19	; 0x09
     d16:	28 87       	std	Y+8, r18	; 0x08
     d18:	88 85       	ldd	r24, Y+8	; 0x08
     d1a:	99 85       	ldd	r25, Y+9	; 0x09
     d1c:	81 30       	cpi	r24, 0x01	; 1
     d1e:	91 05       	cpc	r25, r1
     d20:	09 f4       	brne	.+2      	; 0xd24 <Pwm_Update+0x36>
     d22:	8a c0       	rjmp	.+276    	; 0xe38 <Pwm_Update+0x14a>
     d24:	a8 85       	ldd	r26, Y+8	; 0x08
     d26:	b9 85       	ldd	r27, Y+9	; 0x09
     d28:	a2 30       	cpi	r26, 0x02	; 2
     d2a:	b1 05       	cpc	r27, r1
     d2c:	34 f4       	brge	.+12     	; 0xd3a <Pwm_Update+0x4c>
     d2e:	28 85       	ldd	r18, Y+8	; 0x08
     d30:	39 85       	ldd	r19, Y+9	; 0x09
     d32:	21 15       	cp	r18, r1
     d34:	31 05       	cpc	r19, r1
     d36:	71 f0       	breq	.+28     	; 0xd54 <Pwm_Update+0x66>
     d38:	51 c2       	rjmp	.+1186   	; 0x11dc <Pwm_Update+0x4ee>
     d3a:	88 85       	ldd	r24, Y+8	; 0x08
     d3c:	99 85       	ldd	r25, Y+9	; 0x09
     d3e:	82 30       	cpi	r24, 0x02	; 2
     d40:	91 05       	cpc	r25, r1
     d42:	09 f4       	brne	.+2      	; 0xd46 <Pwm_Update+0x58>
     d44:	29 c1       	rjmp	.+594    	; 0xf98 <Pwm_Update+0x2aa>
     d46:	a8 85       	ldd	r26, Y+8	; 0x08
     d48:	b9 85       	ldd	r27, Y+9	; 0x09
     d4a:	a3 30       	cpi	r26, 0x03	; 3
     d4c:	b1 05       	cpc	r27, r1
     d4e:	09 f4       	brne	.+2      	; 0xd52 <Pwm_Update+0x64>
     d50:	d3 c1       	rjmp	.+934    	; 0x10f8 <Pwm_Update+0x40a>
     d52:	44 c2       	rjmp	.+1160   	; 0x11dc <Pwm_Update+0x4ee>
	{
		case PWM_CH0:
			if(T0_PrescallerValue==CLEAR)
     d54:	80 91 60 00 	lds	r24, 0x0060
     d58:	90 91 61 00 	lds	r25, 0x0061
     d5c:	00 97       	sbiw	r24, 0x00	; 0
     d5e:	19 f4       	brne	.+6      	; 0xd66 <Pwm_Update+0x78>
			{
				u8_status = E_NOk;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	89 83       	std	Y+1, r24	; 0x01
     d64:	3d c2       	rjmp	.+1146   	; 0x11e0 <Pwm_Update+0x4f2>
			}
			else
			{
				OCR0 = (Duty)*(TIMER0_MAX_COUNT/ONE_HUNDRED); /*output compare value*/
     d66:	ec e5       	ldi	r30, 0x5C	; 92
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	88 2f       	mov	r24, r24
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	80 83       	st	Z, r24
				switch(Frequncy)
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	ae 81       	ldd	r26, Y+6	; 0x06
     d7c:	bf 81       	ldd	r27, Y+7	; 0x07
     d7e:	8a 87       	std	Y+10, r24	; 0x0a
     d80:	9b 87       	std	Y+11, r25	; 0x0b
     d82:	ac 87       	std	Y+12, r26	; 0x0c
     d84:	bd 87       	std	Y+13, r27	; 0x0d
     d86:	8a 85       	ldd	r24, Y+10	; 0x0a
     d88:	9b 85       	ldd	r25, Y+11	; 0x0b
     d8a:	ac 85       	ldd	r26, Y+12	; 0x0c
     d8c:	bd 85       	ldd	r27, Y+13	; 0x0d
     d8e:	83 30       	cpi	r24, 0x03	; 3
     d90:	91 05       	cpc	r25, r1
     d92:	a1 05       	cpc	r26, r1
     d94:	b1 05       	cpc	r27, r1
     d96:	d9 f1       	breq	.+118    	; 0xe0e <Pwm_Update+0x120>
     d98:	8a 85       	ldd	r24, Y+10	; 0x0a
     d9a:	9b 85       	ldd	r25, Y+11	; 0x0b
     d9c:	ac 85       	ldd	r26, Y+12	; 0x0c
     d9e:	bd 85       	ldd	r27, Y+13	; 0x0d
     da0:	84 30       	cpi	r24, 0x04	; 4
     da2:	91 05       	cpc	r25, r1
     da4:	a1 05       	cpc	r26, r1
     da6:	b1 05       	cpc	r27, r1
     da8:	98 f4       	brcc	.+38     	; 0xdd0 <Pwm_Update+0xe2>
     daa:	8a 85       	ldd	r24, Y+10	; 0x0a
     dac:	9b 85       	ldd	r25, Y+11	; 0x0b
     dae:	ac 85       	ldd	r26, Y+12	; 0x0c
     db0:	bd 85       	ldd	r27, Y+13	; 0x0d
     db2:	81 30       	cpi	r24, 0x01	; 1
     db4:	91 05       	cpc	r25, r1
     db6:	a1 05       	cpc	r26, r1
     db8:	b1 05       	cpc	r27, r1
     dba:	e9 f0       	breq	.+58     	; 0xdf6 <Pwm_Update+0x108>
     dbc:	8a 85       	ldd	r24, Y+10	; 0x0a
     dbe:	9b 85       	ldd	r25, Y+11	; 0x0b
     dc0:	ac 85       	ldd	r26, Y+12	; 0x0c
     dc2:	bd 85       	ldd	r27, Y+13	; 0x0d
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	91 05       	cpc	r25, r1
     dc8:	a1 05       	cpc	r26, r1
     dca:	b1 05       	cpc	r27, r1
     dcc:	d1 f0       	breq	.+52     	; 0xe02 <Pwm_Update+0x114>
     dce:	31 c0       	rjmp	.+98     	; 0xe32 <Pwm_Update+0x144>
     dd0:	8a 85       	ldd	r24, Y+10	; 0x0a
     dd2:	9b 85       	ldd	r25, Y+11	; 0x0b
     dd4:	ac 85       	ldd	r26, Y+12	; 0x0c
     dd6:	bd 85       	ldd	r27, Y+13	; 0x0d
     dd8:	84 30       	cpi	r24, 0x04	; 4
     dda:	91 05       	cpc	r25, r1
     ddc:	a1 05       	cpc	r26, r1
     dde:	b1 05       	cpc	r27, r1
     de0:	e1 f0       	breq	.+56     	; 0xe1a <Pwm_Update+0x12c>
     de2:	8a 85       	ldd	r24, Y+10	; 0x0a
     de4:	9b 85       	ldd	r25, Y+11	; 0x0b
     de6:	ac 85       	ldd	r26, Y+12	; 0x0c
     de8:	bd 85       	ldd	r27, Y+13	; 0x0d
     dea:	85 30       	cpi	r24, 0x05	; 5
     dec:	91 05       	cpc	r25, r1
     dee:	a1 05       	cpc	r26, r1
     df0:	b1 05       	cpc	r27, r1
     df2:	c9 f0       	breq	.+50     	; 0xe26 <Pwm_Update+0x138>
     df4:	1e c0       	rjmp	.+60     	; 0xe32 <Pwm_Update+0x144>
						 * 1. PWM mode FOC0=0
						 * 2. phase correct PWM mode WGM01=0 & WGM00=1
						 * 3. clear OC0 on compare match COM00=0 & COM01=1
						 * 4. clock = F_CPU CS00=1 CS01=0 CS02=0
						 */
						TCCR0 =PWM_PRESCALER_NO | (ONE<<COM01)| (ONE<<WGM00);
     df6:	e3 e5       	ldi	r30, 0x53	; 83
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	81 e6       	ldi	r24, 0x61	; 97
     dfc:	80 83       	st	Z, r24
						u8_status = E_ok;
     dfe:	19 82       	std	Y+1, r1	; 0x01
     e00:	ef c1       	rjmp	.+990    	; 0x11e0 <Pwm_Update+0x4f2>
						 * 1. PWM mode FOC0=0
						 * 2. phase correct PWM mode WGM01=0 & WGM00=1
						 * 3. clear OC0 on compare match COM00=0 & COM01=1
						 * 4. clock = F_CPU/8 CS00=1 CS01=0 CS02=0
						 */
						TCCR0 =PWM_PRESCALER_8 | (ONE<<COM01)| (ONE<<WGM00);
     e02:	e3 e5       	ldi	r30, 0x53	; 83
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	82 e6       	ldi	r24, 0x62	; 98
     e08:	80 83       	st	Z, r24
						u8_status = E_ok;
     e0a:	19 82       	std	Y+1, r1	; 0x01
     e0c:	e9 c1       	rjmp	.+978    	; 0x11e0 <Pwm_Update+0x4f2>
						 * 1. PWM mode FOC0=0
						 * 2. phase correct PWM mode WGM01=0 & WGM00=1
						 * 3. clear OC0 on compare match COM00=0 & COM01=1
						 * 4. clock = F_CPU/64 CS00=1 CS01=1 CS02=0
						 */
						TCCR0 =PWM_PRESCALER_64 | (ONE<<COM01)| (ONE<<WGM00);
     e0e:	e3 e5       	ldi	r30, 0x53	; 83
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	83 e6       	ldi	r24, 0x63	; 99
     e14:	80 83       	st	Z, r24
						u8_status = E_ok;
     e16:	19 82       	std	Y+1, r1	; 0x01
     e18:	e3 c1       	rjmp	.+966    	; 0x11e0 <Pwm_Update+0x4f2>
						 * 1. PWM mode FOC0=0
						 * 2. phase correct PWM mode WGM01=0 & WGM00=1
						 * 3. clear OC0 on compare match COM00=0 & COM01=1
						 * 4. clock = F_CPU/256 CS00=0 CS01=0 CS02=1
						 */
						TCCR0 =PWM_PRESCALER_256 | (ONE<<COM01)| (ONE<<WGM00);
     e1a:	e3 e5       	ldi	r30, 0x53	; 83
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	84 e6       	ldi	r24, 0x64	; 100
     e20:	80 83       	st	Z, r24
						u8_status = E_ok;
     e22:	19 82       	std	Y+1, r1	; 0x01
     e24:	dd c1       	rjmp	.+954    	; 0x11e0 <Pwm_Update+0x4f2>
						 * 1. PWM mode FOC0=0
						 * 2. phase correct PWM mode WGM01=0 & WGM00=1
						 * 3. clear OC0 on compare match COM00=0 & COM01=1
						 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
						 */
						TCCR0 =PWM_PRESCALER_1024 | (ONE<<COM01)| (ONE<<WGM00);
     e26:	e3 e5       	ldi	r30, 0x53	; 83
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	85 e6       	ldi	r24, 0x65	; 101
     e2c:	80 83       	st	Z, r24
						u8_status = E_ok;
     e2e:	19 82       	std	Y+1, r1	; 0x01
     e30:	d7 c1       	rjmp	.+942    	; 0x11e0 <Pwm_Update+0x4f2>
						break;

				default:
					u8_status = E_NOk;
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	89 83       	std	Y+1, r24	; 0x01
     e36:	d4 c1       	rjmp	.+936    	; 0x11e0 <Pwm_Update+0x4f2>
				}
			}
		break;

		case PWM_CH1A:
			if(T1_PrescallerValue==CLEAR)
     e38:	80 91 62 00 	lds	r24, 0x0062
     e3c:	90 91 63 00 	lds	r25, 0x0063
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	19 f4       	brne	.+6      	; 0xe4a <Pwm_Update+0x15c>
			{
				u8_status = E_NOk;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	89 83       	std	Y+1, r24	; 0x01
     e48:	cb c1       	rjmp	.+918    	; 0x11e0 <Pwm_Update+0x4f2>
			}
			else
			{
				OCR1A = (Duty)*(TIMER_ICR1_TOP_VALUE/ONE_HUNDRED);   /*output compare value*/
     e4a:	ea e4       	ldi	r30, 0x4A	; 74
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	8b 81       	ldd	r24, Y+3	; 0x03
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	c9 01       	movw	r24, r18
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	82 0f       	add	r24, r18
     e5c:	93 1f       	adc	r25, r19
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	91 83       	std	Z+1, r25	; 0x01
     e6c:	80 83       	st	Z, r24
				switch(Frequncy)
     e6e:	8c 81       	ldd	r24, Y+4	; 0x04
     e70:	9d 81       	ldd	r25, Y+5	; 0x05
     e72:	ae 81       	ldd	r26, Y+6	; 0x06
     e74:	bf 81       	ldd	r27, Y+7	; 0x07
     e76:	8e 87       	std	Y+14, r24	; 0x0e
     e78:	9f 87       	std	Y+15, r25	; 0x0f
     e7a:	a8 8b       	std	Y+16, r26	; 0x10
     e7c:	b9 8b       	std	Y+17, r27	; 0x11
     e7e:	8e 85       	ldd	r24, Y+14	; 0x0e
     e80:	9f 85       	ldd	r25, Y+15	; 0x0f
     e82:	a8 89       	ldd	r26, Y+16	; 0x10
     e84:	b9 89       	ldd	r27, Y+17	; 0x11
     e86:	83 30       	cpi	r24, 0x03	; 3
     e88:	91 05       	cpc	r25, r1
     e8a:	a1 05       	cpc	r26, r1
     e8c:	b1 05       	cpc	r27, r1
     e8e:	09 f4       	brne	.+2      	; 0xe92 <Pwm_Update+0x1a4>
     e90:	50 c0       	rjmp	.+160    	; 0xf32 <Pwm_Update+0x244>
     e92:	8e 85       	ldd	r24, Y+14	; 0x0e
     e94:	9f 85       	ldd	r25, Y+15	; 0x0f
     e96:	a8 89       	ldd	r26, Y+16	; 0x10
     e98:	b9 89       	ldd	r27, Y+17	; 0x11
     e9a:	84 30       	cpi	r24, 0x04	; 4
     e9c:	91 05       	cpc	r25, r1
     e9e:	a1 05       	cpc	r26, r1
     ea0:	b1 05       	cpc	r27, r1
     ea2:	98 f4       	brcc	.+38     	; 0xeca <Pwm_Update+0x1dc>
     ea4:	8e 85       	ldd	r24, Y+14	; 0x0e
     ea6:	9f 85       	ldd	r25, Y+15	; 0x0f
     ea8:	a8 89       	ldd	r26, Y+16	; 0x10
     eaa:	b9 89       	ldd	r27, Y+17	; 0x11
     eac:	81 30       	cpi	r24, 0x01	; 1
     eae:	91 05       	cpc	r25, r1
     eb0:	a1 05       	cpc	r26, r1
     eb2:	b1 05       	cpc	r27, r1
     eb4:	f1 f0       	breq	.+60     	; 0xef2 <Pwm_Update+0x204>
     eb6:	8e 85       	ldd	r24, Y+14	; 0x0e
     eb8:	9f 85       	ldd	r25, Y+15	; 0x0f
     eba:	a8 89       	ldd	r26, Y+16	; 0x10
     ebc:	b9 89       	ldd	r27, Y+17	; 0x11
     ebe:	82 30       	cpi	r24, 0x02	; 2
     ec0:	91 05       	cpc	r25, r1
     ec2:	a1 05       	cpc	r26, r1
     ec4:	b1 05       	cpc	r27, r1
     ec6:	29 f1       	breq	.+74     	; 0xf12 <Pwm_Update+0x224>
     ec8:	64 c0       	rjmp	.+200    	; 0xf92 <Pwm_Update+0x2a4>
     eca:	8e 85       	ldd	r24, Y+14	; 0x0e
     ecc:	9f 85       	ldd	r25, Y+15	; 0x0f
     ece:	a8 89       	ldd	r26, Y+16	; 0x10
     ed0:	b9 89       	ldd	r27, Y+17	; 0x11
     ed2:	84 30       	cpi	r24, 0x04	; 4
     ed4:	91 05       	cpc	r25, r1
     ed6:	a1 05       	cpc	r26, r1
     ed8:	b1 05       	cpc	r27, r1
     eda:	d9 f1       	breq	.+118    	; 0xf52 <Pwm_Update+0x264>
     edc:	8e 85       	ldd	r24, Y+14	; 0x0e
     ede:	9f 85       	ldd	r25, Y+15	; 0x0f
     ee0:	a8 89       	ldd	r26, Y+16	; 0x10
     ee2:	b9 89       	ldd	r27, Y+17	; 0x11
     ee4:	85 30       	cpi	r24, 0x05	; 5
     ee6:	91 05       	cpc	r25, r1
     ee8:	a1 05       	cpc	r26, r1
     eea:	b1 05       	cpc	r27, r1
     eec:	09 f4       	brne	.+2      	; 0xef0 <Pwm_Update+0x202>
     eee:	41 c0       	rjmp	.+130    	; 0xf72 <Pwm_Update+0x284>
     ef0:	50 c0       	rjmp	.+160    	; 0xf92 <Pwm_Update+0x2a4>
				{

				case(T1_PHASE_CORRECT_FREQUENCY_3KHZ):
						ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     ef2:	e6 e4       	ldi	r30, 0x46	; 70
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	83 ec       	ldi	r24, 0xC3	; 195
     ef8:	99 e0       	ldi	r25, 0x09	; 9
     efa:	91 83       	std	Z+1, r25	; 0x01
     efc:	80 83       	st	Z, r24
						 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
						 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
						 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
						 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
						 */
						TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1);
     efe:	ef e4       	ldi	r30, 0x4F	; 79
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	82 e8       	ldi	r24, 0x82	; 130
     f04:	80 83       	st	Z, r24

						/* Configure timer control register TCCR1A
						 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=0 WGM13=1 (Mode Number 10)
						 * 2. Prescaller = F_CPU
						 */
						TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_NO;
     f06:	ee e4       	ldi	r30, 0x4E	; 78
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	81 e1       	ldi	r24, 0x11	; 17
     f0c:	80 83       	st	Z, r24
						u8_status = E_ok;
     f0e:	19 82       	std	Y+1, r1	; 0x01
     f10:	67 c1       	rjmp	.+718    	; 0x11e0 <Pwm_Update+0x4f2>
						break;

				case(T1_PHASE_CORRECT_FREQUENCY_400HZ):
						ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     f12:	e6 e4       	ldi	r30, 0x46	; 70
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	83 ec       	ldi	r24, 0xC3	; 195
     f18:	99 e0       	ldi	r25, 0x09	; 9
     f1a:	91 83       	std	Z+1, r25	; 0x01
     f1c:	80 83       	st	Z, r24
						 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
						 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
						 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
						 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
						 */
						TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1);
     f1e:	ef e4       	ldi	r30, 0x4F	; 79
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	82 e8       	ldi	r24, 0x82	; 130
     f24:	80 83       	st	Z, r24

						/* Configure timer control register TCCR1A
						 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
						 * 2. Prescaller = F_CPU/8
						 */
						TCCR1B = (ONE<<WGM13) | PWM_PRESCALER_8;
     f26:	ee e4       	ldi	r30, 0x4E	; 78
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	82 e1       	ldi	r24, 0x12	; 18
     f2c:	80 83       	st	Z, r24
						u8_status = E_ok;
     f2e:	19 82       	std	Y+1, r1	; 0x01
     f30:	57 c1       	rjmp	.+686    	; 0x11e0 <Pwm_Update+0x4f2>
						break;

				case(T1_PHASE_CORRECT_FREQUENCY_50HZ):
						ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     f32:	e6 e4       	ldi	r30, 0x46	; 70
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	83 ec       	ldi	r24, 0xC3	; 195
     f38:	99 e0       	ldi	r25, 0x09	; 9
     f3a:	91 83       	std	Z+1, r25	; 0x01
     f3c:	80 83       	st	Z, r24
						 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
						 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
						 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
						 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
						 */
						TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1);
     f3e:	ef e4       	ldi	r30, 0x4F	; 79
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	82 e8       	ldi	r24, 0x82	; 130
     f44:	80 83       	st	Z, r24

						/* Configure timer control register TCCR1A
						 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
						 * 2. Prescaller = F_CPU/64
						 */
						TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_64;
     f46:	ee e4       	ldi	r30, 0x4E	; 78
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	83 e1       	ldi	r24, 0x13	; 19
     f4c:	80 83       	st	Z, r24
						u8_status = E_ok;
     f4e:	19 82       	std	Y+1, r1	; 0x01
     f50:	47 c1       	rjmp	.+654    	; 0x11e0 <Pwm_Update+0x4f2>
						break;

				case(T1_PHASE_CORRECT_FREQUENCY_13HZ):  //90hz
						ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     f52:	e6 e4       	ldi	r30, 0x46	; 70
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	83 ec       	ldi	r24, 0xC3	; 195
     f58:	99 e0       	ldi	r25, 0x09	; 9
     f5a:	91 83       	std	Z+1, r25	; 0x01
     f5c:	80 83       	st	Z, r24
						 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
						 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
						 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
						 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
						 */
						TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1);
     f5e:	ef e4       	ldi	r30, 0x4F	; 79
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	82 e8       	ldi	r24, 0x82	; 130
     f64:	80 83       	st	Z, r24

						/* Configure timer control register TCCR1A
						 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
						 * 2. Prescaller = F_CPU/256
						 */
						TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_256;
     f66:	ee e4       	ldi	r30, 0x4E	; 78
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	84 e1       	ldi	r24, 0x14	; 20
     f6c:	80 83       	st	Z, r24
						u8_status = E_ok;
     f6e:	19 82       	std	Y+1, r1	; 0x01
     f70:	37 c1       	rjmp	.+622    	; 0x11e0 <Pwm_Update+0x4f2>
						break;

				case(T1_PHASE_CORRECT_FREQUENCY_3HZ):
						ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     f72:	e6 e4       	ldi	r30, 0x46	; 70
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	83 ec       	ldi	r24, 0xC3	; 195
     f78:	99 e0       	ldi	r25, 0x09	; 9
     f7a:	91 83       	std	Z+1, r25	; 0x01
     f7c:	80 83       	st	Z, r24
						 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
						 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
						 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
						 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
						 */
						TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1);
     f7e:	ef e4       	ldi	r30, 0x4F	; 79
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	82 e8       	ldi	r24, 0x82	; 130
     f84:	80 83       	st	Z, r24

						/* Configure timer control register TCCR1A
						 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
						 * 2. Prescaller = F_CPU/1024
						 */
						TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_1024;
     f86:	ee e4       	ldi	r30, 0x4E	; 78
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	85 e1       	ldi	r24, 0x15	; 21
     f8c:	80 83       	st	Z, r24
						u8_status = E_ok;
     f8e:	19 82       	std	Y+1, r1	; 0x01
     f90:	27 c1       	rjmp	.+590    	; 0x11e0 <Pwm_Update+0x4f2>
						break;

				default:
					u8_status = E_NOk;
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	89 83       	std	Y+1, r24	; 0x01
     f96:	24 c1       	rjmp	.+584    	; 0x11e0 <Pwm_Update+0x4f2>
				}
			}
		break;

		case PWM_CH1B:
			if(T1_PrescallerValue==CLEAR)
     f98:	80 91 62 00 	lds	r24, 0x0062
     f9c:	90 91 63 00 	lds	r25, 0x0063
     fa0:	00 97       	sbiw	r24, 0x00	; 0
     fa2:	19 f4       	brne	.+6      	; 0xfaa <Pwm_Update+0x2bc>
			{
				u8_status = E_NOk;
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	89 83       	std	Y+1, r24	; 0x01
     fa8:	1b c1       	rjmp	.+566    	; 0x11e0 <Pwm_Update+0x4f2>
			}
			else
			{
				OCR1B = (Duty)*(TIMER_ICR1_TOP_VALUE/ONE_HUNDRED);   /*output compare value*/
     faa:	e8 e4       	ldi	r30, 0x48	; 72
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	c9 01       	movw	r24, r18
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	82 0f       	add	r24, r18
     fbc:	93 1f       	adc	r25, r19
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	91 83       	std	Z+1, r25	; 0x01
     fcc:	80 83       	st	Z, r24
				switch(Frequncy)
     fce:	8c 81       	ldd	r24, Y+4	; 0x04
     fd0:	9d 81       	ldd	r25, Y+5	; 0x05
     fd2:	ae 81       	ldd	r26, Y+6	; 0x06
     fd4:	bf 81       	ldd	r27, Y+7	; 0x07
     fd6:	8a 8b       	std	Y+18, r24	; 0x12
     fd8:	9b 8b       	std	Y+19, r25	; 0x13
     fda:	ac 8b       	std	Y+20, r26	; 0x14
     fdc:	bd 8b       	std	Y+21, r27	; 0x15
     fde:	8a 89       	ldd	r24, Y+18	; 0x12
     fe0:	9b 89       	ldd	r25, Y+19	; 0x13
     fe2:	ac 89       	ldd	r26, Y+20	; 0x14
     fe4:	bd 89       	ldd	r27, Y+21	; 0x15
     fe6:	83 30       	cpi	r24, 0x03	; 3
     fe8:	91 05       	cpc	r25, r1
     fea:	a1 05       	cpc	r26, r1
     fec:	b1 05       	cpc	r27, r1
     fee:	09 f4       	brne	.+2      	; 0xff2 <Pwm_Update+0x304>
     ff0:	50 c0       	rjmp	.+160    	; 0x1092 <Pwm_Update+0x3a4>
     ff2:	8a 89       	ldd	r24, Y+18	; 0x12
     ff4:	9b 89       	ldd	r25, Y+19	; 0x13
     ff6:	ac 89       	ldd	r26, Y+20	; 0x14
     ff8:	bd 89       	ldd	r27, Y+21	; 0x15
     ffa:	84 30       	cpi	r24, 0x04	; 4
     ffc:	91 05       	cpc	r25, r1
     ffe:	a1 05       	cpc	r26, r1
    1000:	b1 05       	cpc	r27, r1
    1002:	98 f4       	brcc	.+38     	; 0x102a <Pwm_Update+0x33c>
    1004:	8a 89       	ldd	r24, Y+18	; 0x12
    1006:	9b 89       	ldd	r25, Y+19	; 0x13
    1008:	ac 89       	ldd	r26, Y+20	; 0x14
    100a:	bd 89       	ldd	r27, Y+21	; 0x15
    100c:	81 30       	cpi	r24, 0x01	; 1
    100e:	91 05       	cpc	r25, r1
    1010:	a1 05       	cpc	r26, r1
    1012:	b1 05       	cpc	r27, r1
    1014:	f1 f0       	breq	.+60     	; 0x1052 <Pwm_Update+0x364>
    1016:	8a 89       	ldd	r24, Y+18	; 0x12
    1018:	9b 89       	ldd	r25, Y+19	; 0x13
    101a:	ac 89       	ldd	r26, Y+20	; 0x14
    101c:	bd 89       	ldd	r27, Y+21	; 0x15
    101e:	82 30       	cpi	r24, 0x02	; 2
    1020:	91 05       	cpc	r25, r1
    1022:	a1 05       	cpc	r26, r1
    1024:	b1 05       	cpc	r27, r1
    1026:	29 f1       	breq	.+74     	; 0x1072 <Pwm_Update+0x384>
    1028:	64 c0       	rjmp	.+200    	; 0x10f2 <Pwm_Update+0x404>
    102a:	8a 89       	ldd	r24, Y+18	; 0x12
    102c:	9b 89       	ldd	r25, Y+19	; 0x13
    102e:	ac 89       	ldd	r26, Y+20	; 0x14
    1030:	bd 89       	ldd	r27, Y+21	; 0x15
    1032:	84 30       	cpi	r24, 0x04	; 4
    1034:	91 05       	cpc	r25, r1
    1036:	a1 05       	cpc	r26, r1
    1038:	b1 05       	cpc	r27, r1
    103a:	d9 f1       	breq	.+118    	; 0x10b2 <Pwm_Update+0x3c4>
    103c:	8a 89       	ldd	r24, Y+18	; 0x12
    103e:	9b 89       	ldd	r25, Y+19	; 0x13
    1040:	ac 89       	ldd	r26, Y+20	; 0x14
    1042:	bd 89       	ldd	r27, Y+21	; 0x15
    1044:	85 30       	cpi	r24, 0x05	; 5
    1046:	91 05       	cpc	r25, r1
    1048:	a1 05       	cpc	r26, r1
    104a:	b1 05       	cpc	r27, r1
    104c:	09 f4       	brne	.+2      	; 0x1050 <Pwm_Update+0x362>
    104e:	41 c0       	rjmp	.+130    	; 0x10d2 <Pwm_Update+0x3e4>
    1050:	50 c0       	rjmp	.+160    	; 0x10f2 <Pwm_Update+0x404>
				{
				case(T1_PHASE_CORRECT_FREQUENCY_3KHZ):
						ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    1052:	e6 e4       	ldi	r30, 0x46	; 70
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	83 ec       	ldi	r24, 0xC3	; 195
    1058:	99 e0       	ldi	r25, 0x09	; 9
    105a:	91 83       	std	Z+1, r25	; 0x01
    105c:	80 83       	st	Z, r24
						 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
						 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
						 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
						 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
						 */
						TCCR1A = (ONE<<WGM11) | (ONE<<COM1B1);
    105e:	ef e4       	ldi	r30, 0x4F	; 79
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	82 e2       	ldi	r24, 0x22	; 34
    1064:	80 83       	st	Z, r24

						/* Configure timer control register TCCR1A
						 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=0 WGM13=1 (Mode Number 10)
						 * 2. Prescaller = F_CPU
						 */
						TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_NO;
    1066:	ee e4       	ldi	r30, 0x4E	; 78
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	81 e1       	ldi	r24, 0x11	; 17
    106c:	80 83       	st	Z, r24
						u8_status = E_ok;
    106e:	19 82       	std	Y+1, r1	; 0x01
    1070:	b7 c0       	rjmp	.+366    	; 0x11e0 <Pwm_Update+0x4f2>
						break;

				case(T1_PHASE_CORRECT_FREQUENCY_400HZ):
						ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    1072:	e6 e4       	ldi	r30, 0x46	; 70
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	83 ec       	ldi	r24, 0xC3	; 195
    1078:	99 e0       	ldi	r25, 0x09	; 9
    107a:	91 83       	std	Z+1, r25	; 0x01
    107c:	80 83       	st	Z, r24
						 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
						 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
						 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
						 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
						 */
						TCCR1A = (ONE<<WGM11) | (ONE<<COM1B1);
    107e:	ef e4       	ldi	r30, 0x4F	; 79
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	82 e2       	ldi	r24, 0x22	; 34
    1084:	80 83       	st	Z, r24

						/* Configure timer control register TCCR1A
						 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
						 * 2. Prescaller = F_CPU/8
						 */
						TCCR1B = (ONE<<WGM13) | PWM_PRESCALER_8;
    1086:	ee e4       	ldi	r30, 0x4E	; 78
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	82 e1       	ldi	r24, 0x12	; 18
    108c:	80 83       	st	Z, r24
						u8_status = E_ok;
    108e:	19 82       	std	Y+1, r1	; 0x01
    1090:	a7 c0       	rjmp	.+334    	; 0x11e0 <Pwm_Update+0x4f2>
						break;

				case(T1_PHASE_CORRECT_FREQUENCY_50HZ):
						ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    1092:	e6 e4       	ldi	r30, 0x46	; 70
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	83 ec       	ldi	r24, 0xC3	; 195
    1098:	99 e0       	ldi	r25, 0x09	; 9
    109a:	91 83       	std	Z+1, r25	; 0x01
    109c:	80 83       	st	Z, r24
						 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
						 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
						 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
						 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
						 */
						TCCR1A = (ONE<<WGM11) | (ONE<<COM1B1);
    109e:	ef e4       	ldi	r30, 0x4F	; 79
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	82 e2       	ldi	r24, 0x22	; 34
    10a4:	80 83       	st	Z, r24

						/* Configure timer control register TCCR1A
						 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
						 * 2. Prescaller = F_CPU/64
						 */
						TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_64;
    10a6:	ee e4       	ldi	r30, 0x4E	; 78
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	83 e1       	ldi	r24, 0x13	; 19
    10ac:	80 83       	st	Z, r24
						u8_status = E_ok;
    10ae:	19 82       	std	Y+1, r1	; 0x01
    10b0:	97 c0       	rjmp	.+302    	; 0x11e0 <Pwm_Update+0x4f2>
						break;

				case(T1_PHASE_CORRECT_FREQUENCY_13HZ):  //90hz
						ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    10b2:	e6 e4       	ldi	r30, 0x46	; 70
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	83 ec       	ldi	r24, 0xC3	; 195
    10b8:	99 e0       	ldi	r25, 0x09	; 9
    10ba:	91 83       	std	Z+1, r25	; 0x01
    10bc:	80 83       	st	Z, r24
						 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
						 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
						 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
						 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
						 */
						TCCR1A = (ONE<<WGM11) | (ONE<<COM1B1);
    10be:	ef e4       	ldi	r30, 0x4F	; 79
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	82 e2       	ldi	r24, 0x22	; 34
    10c4:	80 83       	st	Z, r24

						/* Configure timer control register TCCR1A
						 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
						 * 2. Prescaller = F_CPU/256
						 */
						TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_256;
    10c6:	ee e4       	ldi	r30, 0x4E	; 78
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	84 e1       	ldi	r24, 0x14	; 20
    10cc:	80 83       	st	Z, r24
						u8_status = E_ok;
    10ce:	19 82       	std	Y+1, r1	; 0x01
    10d0:	87 c0       	rjmp	.+270    	; 0x11e0 <Pwm_Update+0x4f2>
						break;

				case(T1_PHASE_CORRECT_FREQUENCY_3HZ):
						ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    10d2:	e6 e4       	ldi	r30, 0x46	; 70
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	83 ec       	ldi	r24, 0xC3	; 195
    10d8:	99 e0       	ldi	r25, 0x09	; 9
    10da:	91 83       	std	Z+1, r25	; 0x01
    10dc:	80 83       	st	Z, r24
						 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
						 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
						 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
						 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
						 */
						TCCR1A = (ONE<<WGM11) | (ONE<<COM1B1);
    10de:	ef e4       	ldi	r30, 0x4F	; 79
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	82 e2       	ldi	r24, 0x22	; 34
    10e4:	80 83       	st	Z, r24

						/* Configure timer control register TCCR1A
						 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
						 * 2. Prescaller = F_CPU/1024
						 */
						TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_1024;
    10e6:	ee e4       	ldi	r30, 0x4E	; 78
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	85 e1       	ldi	r24, 0x15	; 21
    10ec:	80 83       	st	Z, r24
						u8_status = E_ok;
    10ee:	19 82       	std	Y+1, r1	; 0x01
    10f0:	77 c0       	rjmp	.+238    	; 0x11e0 <Pwm_Update+0x4f2>
						break;

					default:
						u8_status = E_NOk;
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	89 83       	std	Y+1, r24	; 0x01
    10f6:	74 c0       	rjmp	.+232    	; 0x11e0 <Pwm_Update+0x4f2>
				}
			}
		break;

		case PWM_CH2:
			if(T2_PrescallerValue==CLEAR)
    10f8:	80 91 64 00 	lds	r24, 0x0064
    10fc:	90 91 65 00 	lds	r25, 0x0065
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	19 f4       	brne	.+6      	; 0x110a <Pwm_Update+0x41c>
			{
				u8_status = E_NOk;
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	89 83       	std	Y+1, r24	; 0x01
    1108:	6b c0       	rjmp	.+214    	; 0x11e0 <Pwm_Update+0x4f2>
			}
			else
			{
				OCR2 = Duty*(TIMER2_MAX_COUNT/ONE_HUNDRED); /*output compare value*/
    110a:	e3 e4       	ldi	r30, 0x43	; 67
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	88 2f       	mov	r24, r24
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	80 83       	st	Z, r24
				switch(Frequncy)
    111a:	8c 81       	ldd	r24, Y+4	; 0x04
    111c:	9d 81       	ldd	r25, Y+5	; 0x05
    111e:	ae 81       	ldd	r26, Y+6	; 0x06
    1120:	bf 81       	ldd	r27, Y+7	; 0x07
    1122:	8e 8b       	std	Y+22, r24	; 0x16
    1124:	9f 8b       	std	Y+23, r25	; 0x17
    1126:	a8 8f       	std	Y+24, r26	; 0x18
    1128:	b9 8f       	std	Y+25, r27	; 0x19
    112a:	8e 89       	ldd	r24, Y+22	; 0x16
    112c:	9f 89       	ldd	r25, Y+23	; 0x17
    112e:	a8 8d       	ldd	r26, Y+24	; 0x18
    1130:	b9 8d       	ldd	r27, Y+25	; 0x19
    1132:	84 30       	cpi	r24, 0x04	; 4
    1134:	91 05       	cpc	r25, r1
    1136:	a1 05       	cpc	r26, r1
    1138:	b1 05       	cpc	r27, r1
    113a:	d9 f1       	breq	.+118    	; 0x11b2 <Pwm_Update+0x4c4>
    113c:	8e 89       	ldd	r24, Y+22	; 0x16
    113e:	9f 89       	ldd	r25, Y+23	; 0x17
    1140:	a8 8d       	ldd	r26, Y+24	; 0x18
    1142:	b9 8d       	ldd	r27, Y+25	; 0x19
    1144:	85 30       	cpi	r24, 0x05	; 5
    1146:	91 05       	cpc	r25, r1
    1148:	a1 05       	cpc	r26, r1
    114a:	b1 05       	cpc	r27, r1
    114c:	98 f4       	brcc	.+38     	; 0x1174 <Pwm_Update+0x486>
    114e:	8e 89       	ldd	r24, Y+22	; 0x16
    1150:	9f 89       	ldd	r25, Y+23	; 0x17
    1152:	a8 8d       	ldd	r26, Y+24	; 0x18
    1154:	b9 8d       	ldd	r27, Y+25	; 0x19
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	91 05       	cpc	r25, r1
    115a:	a1 05       	cpc	r26, r1
    115c:	b1 05       	cpc	r27, r1
    115e:	e9 f0       	breq	.+58     	; 0x119a <Pwm_Update+0x4ac>
    1160:	8e 89       	ldd	r24, Y+22	; 0x16
    1162:	9f 89       	ldd	r25, Y+23	; 0x17
    1164:	a8 8d       	ldd	r26, Y+24	; 0x18
    1166:	b9 8d       	ldd	r27, Y+25	; 0x19
    1168:	82 30       	cpi	r24, 0x02	; 2
    116a:	91 05       	cpc	r25, r1
    116c:	a1 05       	cpc	r26, r1
    116e:	b1 05       	cpc	r27, r1
    1170:	d1 f0       	breq	.+52     	; 0x11a6 <Pwm_Update+0x4b8>
    1172:	31 c0       	rjmp	.+98     	; 0x11d6 <Pwm_Update+0x4e8>
    1174:	8e 89       	ldd	r24, Y+22	; 0x16
    1176:	9f 89       	ldd	r25, Y+23	; 0x17
    1178:	a8 8d       	ldd	r26, Y+24	; 0x18
    117a:	b9 8d       	ldd	r27, Y+25	; 0x19
    117c:	86 30       	cpi	r24, 0x06	; 6
    117e:	91 05       	cpc	r25, r1
    1180:	a1 05       	cpc	r26, r1
    1182:	b1 05       	cpc	r27, r1
    1184:	e1 f0       	breq	.+56     	; 0x11be <Pwm_Update+0x4d0>
    1186:	8e 89       	ldd	r24, Y+22	; 0x16
    1188:	9f 89       	ldd	r25, Y+23	; 0x17
    118a:	a8 8d       	ldd	r26, Y+24	; 0x18
    118c:	b9 8d       	ldd	r27, Y+25	; 0x19
    118e:	87 30       	cpi	r24, 0x07	; 7
    1190:	91 05       	cpc	r25, r1
    1192:	a1 05       	cpc	r26, r1
    1194:	b1 05       	cpc	r27, r1
    1196:	c9 f0       	breq	.+50     	; 0x11ca <Pwm_Update+0x4dc>
    1198:	1e c0       	rjmp	.+60     	; 0x11d6 <Pwm_Update+0x4e8>
						 * 1. PWM mode FOC0=0
						 * 2. phase correct PWM mode WGM21=0 & WGM20=1
						 * 3. clear OC0 on compare match COM20=0 & COM21=1
						 * 4. clock = F_CPU/1024 CS20=1 CS21=0 CS22=1
						 */
						TCCR2 =PWM_PRESCALER_NO | (ONE<<COM21)| (ONE<<WGM20);
    119a:	e5 e4       	ldi	r30, 0x45	; 69
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	81 e6       	ldi	r24, 0x61	; 97
    11a0:	80 83       	st	Z, r24
						u8_status = E_ok;
    11a2:	19 82       	std	Y+1, r1	; 0x01
    11a4:	1d c0       	rjmp	.+58     	; 0x11e0 <Pwm_Update+0x4f2>
						 * 1. PWM mode FOC0=0
						 * 2. phase correct PWM mode WGM21=0 & WGM20=1
						 * 3. clear OC0 on compare match COM20=0 & COM21=1
						 * 4. clock = F_CPU/1024 CS20=1 CS21=0 CS22=1
						 */
						TCCR2 =PWM_PRESCALER_8 | (ONE<<COM21)| (ONE<<WGM20);
    11a6:	e5 e4       	ldi	r30, 0x45	; 69
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	82 e6       	ldi	r24, 0x62	; 98
    11ac:	80 83       	st	Z, r24
						u8_status = E_ok;
    11ae:	19 82       	std	Y+1, r1	; 0x01
    11b0:	17 c0       	rjmp	.+46     	; 0x11e0 <Pwm_Update+0x4f2>
						 * 1. PWM mode FOC0=0
						 * 2. phase correct PWM mode WGM21=0 & WGM20=1
						 * 3. clear OC0 on compare match COM20=0 & COM21=1
						 * 4. clock = F_CPU/1024 CS20=1 CS21=0 CS22=1
						 */
						TCCR2 =PWM_PRESCALER_64 | (ONE<<COM21)| (ONE<<WGM20);
    11b2:	e5 e4       	ldi	r30, 0x45	; 69
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	83 e6       	ldi	r24, 0x63	; 99
    11b8:	80 83       	st	Z, r24
						u8_status = E_ok;
    11ba:	19 82       	std	Y+1, r1	; 0x01
    11bc:	11 c0       	rjmp	.+34     	; 0x11e0 <Pwm_Update+0x4f2>
						 * 1. PWM mode FOC0=0
						 * 2. phase correct PWM mode WGM21=0 & WGM20=1
						 * 3. clear OC0 on compare match COM20=0 & COM21=1
						 * 4. clock = F_CPU/1024 CS20=1 CS21=0 CS22=1
						 */
						TCCR2 =PWM_PRESCALER_256 | (ONE<<COM21)| (ONE<<WGM20);
    11be:	e5 e4       	ldi	r30, 0x45	; 69
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	84 e6       	ldi	r24, 0x64	; 100
    11c4:	80 83       	st	Z, r24
						u8_status = E_ok;
    11c6:	19 82       	std	Y+1, r1	; 0x01
    11c8:	0b c0       	rjmp	.+22     	; 0x11e0 <Pwm_Update+0x4f2>
						 * 1. PWM mode FOC0=0
						 * 2. phase correct PWM mode WGM21=0 & WGM20=1
						 * 3. clear OC0 on compare match COM20=0 & COM21=1
						 * 4. clock = F_CPU/1024 CS20=1 CS21=0 CS22=1
						 */
						TCCR2 =PWM_PRESCALER_1024 | (ONE<<COM21)| (ONE<<WGM20);
    11ca:	e5 e4       	ldi	r30, 0x45	; 69
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	85 e6       	ldi	r24, 0x65	; 101
    11d0:	80 83       	st	Z, r24
						u8_status = E_ok;
    11d2:	19 82       	std	Y+1, r1	; 0x01
    11d4:	05 c0       	rjmp	.+10     	; 0x11e0 <Pwm_Update+0x4f2>
						break;

				default:
					u8_status = E_NOk;
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	89 83       	std	Y+1, r24	; 0x01
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <Pwm_Update+0x4f2>
				}
			}
		break;

		default:
			u8_status = E_NOk;
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    11e2:	69 96       	adiw	r28, 0x19	; 25
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	de bf       	out	0x3e, r29	; 62
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	cd bf       	out	0x3d, r28	; 61
    11ee:	cf 91       	pop	r28
    11f0:	df 91       	pop	r29
    11f2:	08 95       	ret

000011f4 <Pwm_Stop>:
* Return value: u8_error- variable that describe the error status
* Description: responsible of Stopping the PWM by clearing the prescaler
* of the corresponding channel
************************************************************************************/
extern ERROR_STATUS Pwm_Stop(uint8_t Channel)
{
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <Pwm_Stop+0x6>
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <Pwm_Stop+0x8>
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
    1200:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_status;
	switch(Channel)
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	3c 83       	std	Y+4, r19	; 0x04
    120a:	2b 83       	std	Y+3, r18	; 0x03
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	9c 81       	ldd	r25, Y+4	; 0x04
    1210:	81 30       	cpi	r24, 0x01	; 1
    1212:	91 05       	cpc	r25, r1
    1214:	d1 f0       	breq	.+52     	; 0x124a <Pwm_Stop+0x56>
    1216:	2b 81       	ldd	r18, Y+3	; 0x03
    1218:	3c 81       	ldd	r19, Y+4	; 0x04
    121a:	22 30       	cpi	r18, 0x02	; 2
    121c:	31 05       	cpc	r19, r1
    121e:	2c f4       	brge	.+10     	; 0x122a <Pwm_Stop+0x36>
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	61 f0       	breq	.+24     	; 0x1240 <Pwm_Stop+0x4c>
    1228:	25 c0       	rjmp	.+74     	; 0x1274 <Pwm_Stop+0x80>
    122a:	2b 81       	ldd	r18, Y+3	; 0x03
    122c:	3c 81       	ldd	r19, Y+4	; 0x04
    122e:	22 30       	cpi	r18, 0x02	; 2
    1230:	31 05       	cpc	r19, r1
    1232:	99 f0       	breq	.+38     	; 0x125a <Pwm_Stop+0x66>
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	9c 81       	ldd	r25, Y+4	; 0x04
    1238:	83 30       	cpi	r24, 0x03	; 3
    123a:	91 05       	cpc	r25, r1
    123c:	b1 f0       	breq	.+44     	; 0x126a <Pwm_Stop+0x76>
    123e:	1a c0       	rjmp	.+52     	; 0x1274 <Pwm_Stop+0x80>
	{
	case PWM_CH0:
		TCCR0=CLEAR;
    1240:	e3 e5       	ldi	r30, 0x53	; 83
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	10 82       	st	Z, r1
		u8_status = E_ok;
    1246:	19 82       	std	Y+1, r1	; 0x01
    1248:	17 c0       	rjmp	.+46     	; 0x1278 <Pwm_Stop+0x84>
		break;

	case PWM_CH1A:
		TCCR1A=CLEAR;    /*you can remove this line*/
    124a:	ef e4       	ldi	r30, 0x4F	; 79
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	10 82       	st	Z, r1
		TCCR1B=CLEAR;
    1250:	ee e4       	ldi	r30, 0x4E	; 78
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	10 82       	st	Z, r1
		u8_status = E_ok;
    1256:	19 82       	std	Y+1, r1	; 0x01
    1258:	0f c0       	rjmp	.+30     	; 0x1278 <Pwm_Stop+0x84>
		break;
	case PWM_CH1B:
		TCCR1A=CLEAR;   /*you can remove this line*/
    125a:	ef e4       	ldi	r30, 0x4F	; 79
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	10 82       	st	Z, r1
		TCCR1B=CLEAR;
    1260:	ee e4       	ldi	r30, 0x4E	; 78
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	10 82       	st	Z, r1
		u8_status = E_ok;
    1266:	19 82       	std	Y+1, r1	; 0x01
    1268:	07 c0       	rjmp	.+14     	; 0x1278 <Pwm_Stop+0x84>
		break;
	case PWM_CH2:
		TCCR2=CLEAR;
    126a:	e5 e4       	ldi	r30, 0x45	; 69
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	10 82       	st	Z, r1
		u8_status = E_ok;
    1270:	19 82       	std	Y+1, r1	; 0x01
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <Pwm_Stop+0x84>
		break;

	default:
		u8_status = E_NOk;
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
    1278:	89 81       	ldd	r24, Y+1	; 0x01
}
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <Timer_Init>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description: Initiates the module
************************************************************************************/
ERROR_STATUS Timer_Init(St_TimerCfg* Timer_cfg)
{
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	00 d0       	rcall	.+0      	; 0x128e <Timer_Init+0x6>
    128e:	00 d0       	rcall	.+0      	; 0x1290 <Timer_Init+0x8>
    1290:	0f 92       	push	r0
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
    1296:	9b 83       	std	Y+3, r25	; 0x03
    1298:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_status;
	if(Timer_cfg == NULL_Ptr)
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	9b 81       	ldd	r25, Y+3	; 0x03
    129e:	00 97       	sbiw	r24, 0x00	; 0
    12a0:	19 f4       	brne	.+6      	; 0x12a8 <Timer_Init+0x20>
	{
		u8_status=E_NOk;
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	89 83       	std	Y+1, r24	; 0x01
    12a6:	66 c0       	rjmp	.+204    	; 0x1374 <Timer_Init+0xec>
	}
	else
	{
		TIMSK = Timer_cfg->Timer_Polling_Or_Interrupt;
    12a8:	a9 e5       	ldi	r26, 0x59	; 89
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	ea 81       	ldd	r30, Y+2	; 0x02
    12ae:	fb 81       	ldd	r31, Y+3	; 0x03
    12b0:	82 81       	ldd	r24, Z+2	; 0x02
    12b2:	8c 93       	st	X, r24
		switch(Timer_cfg->Timer_CH_NO)
    12b4:	ea 81       	ldd	r30, Y+2	; 0x02
    12b6:	fb 81       	ldd	r31, Y+3	; 0x03
    12b8:	80 81       	ld	r24, Z
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	3d 83       	std	Y+5, r19	; 0x05
    12c0:	2c 83       	std	Y+4, r18	; 0x04
    12c2:	8c 81       	ldd	r24, Y+4	; 0x04
    12c4:	9d 81       	ldd	r25, Y+5	; 0x05
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	91 05       	cpc	r25, r1
    12ca:	11 f1       	breq	.+68     	; 0x1310 <Timer_Init+0x88>
    12cc:	2c 81       	ldd	r18, Y+4	; 0x04
    12ce:	3d 81       	ldd	r19, Y+5	; 0x05
    12d0:	22 30       	cpi	r18, 0x02	; 2
    12d2:	31 05       	cpc	r19, r1
    12d4:	a9 f1       	breq	.+106    	; 0x1340 <Timer_Init+0xb8>
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	9d 81       	ldd	r25, Y+5	; 0x05
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	09 f0       	breq	.+2      	; 0x12e0 <Timer_Init+0x58>
    12de:	48 c0       	rjmp	.+144    	; 0x1370 <Timer_Init+0xe8>
		{
			case Timer_0:
				TCCR0 = Timer_cfg->Timer_Mode | (ONE<<FOC0);
    12e0:	a3 e5       	ldi	r26, 0x53	; 83
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	ea 81       	ldd	r30, Y+2	; 0x02
    12e6:	fb 81       	ldd	r31, Y+3	; 0x03
    12e8:	81 81       	ldd	r24, Z+1	; 0x01
    12ea:	80 68       	ori	r24, 0x80	; 128
    12ec:	8c 93       	st	X, r24
				T0_PrescallerValue=Timer_cfg->Timer_Prescaler;
    12ee:	ea 81       	ldd	r30, Y+2	; 0x02
    12f0:	fb 81       	ldd	r31, Y+3	; 0x03
    12f2:	83 81       	ldd	r24, Z+3	; 0x03
    12f4:	88 2f       	mov	r24, r24
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	90 93 67 00 	sts	0x0067, r25
    12fc:	80 93 66 00 	sts	0x0066, r24
				TIMSK=Timer_cfg->Timer_Polling_Or_Interrupt;
    1300:	a9 e5       	ldi	r26, 0x59	; 89
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	ea 81       	ldd	r30, Y+2	; 0x02
    1306:	fb 81       	ldd	r31, Y+3	; 0x03
    1308:	82 81       	ldd	r24, Z+2	; 0x02
    130a:	8c 93       	st	X, r24
				u8_status=E_ok;
    130c:	19 82       	std	Y+1, r1	; 0x01
    130e:	32 c0       	rjmp	.+100    	; 0x1374 <Timer_Init+0xec>
				break;
			case Timer_1:
				TCCR1A =Timer_cfg->Timer_Mode | (ONE<<FOC1A) | (ONE<<FOC1B);
    1310:	af e4       	ldi	r26, 0x4F	; 79
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	ea 81       	ldd	r30, Y+2	; 0x02
    1316:	fb 81       	ldd	r31, Y+3	; 0x03
    1318:	81 81       	ldd	r24, Z+1	; 0x01
    131a:	8c 60       	ori	r24, 0x0C	; 12
    131c:	8c 93       	st	X, r24
				T1_PrescallerValue=Timer_cfg->Timer_Prescaler;
    131e:	ea 81       	ldd	r30, Y+2	; 0x02
    1320:	fb 81       	ldd	r31, Y+3	; 0x03
    1322:	83 81       	ldd	r24, Z+3	; 0x03
    1324:	88 2f       	mov	r24, r24
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	90 93 69 00 	sts	0x0069, r25
    132c:	80 93 68 00 	sts	0x0068, r24
				TIMSK=Timer_cfg->Timer_Polling_Or_Interrupt;
    1330:	a9 e5       	ldi	r26, 0x59	; 89
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	ea 81       	ldd	r30, Y+2	; 0x02
    1336:	fb 81       	ldd	r31, Y+3	; 0x03
    1338:	82 81       	ldd	r24, Z+2	; 0x02
    133a:	8c 93       	st	X, r24
				u8_status=E_ok;
    133c:	19 82       	std	Y+1, r1	; 0x01
    133e:	1a c0       	rjmp	.+52     	; 0x1374 <Timer_Init+0xec>
				break;
			case Timer_2:
				TCCR2 =Timer_cfg->Timer_Mode | (ONE<<FOC0);
    1340:	a5 e4       	ldi	r26, 0x45	; 69
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	ea 81       	ldd	r30, Y+2	; 0x02
    1346:	fb 81       	ldd	r31, Y+3	; 0x03
    1348:	81 81       	ldd	r24, Z+1	; 0x01
    134a:	80 68       	ori	r24, 0x80	; 128
    134c:	8c 93       	st	X, r24
				T2_PrescallerValue=Timer_cfg->Timer_Prescaler;
    134e:	ea 81       	ldd	r30, Y+2	; 0x02
    1350:	fb 81       	ldd	r31, Y+3	; 0x03
    1352:	83 81       	ldd	r24, Z+3	; 0x03
    1354:	88 2f       	mov	r24, r24
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	90 93 6b 00 	sts	0x006B, r25
    135c:	80 93 6a 00 	sts	0x006A, r24
				TIMSK=Timer_cfg->Timer_Polling_Or_Interrupt;
    1360:	a9 e5       	ldi	r26, 0x59	; 89
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	ea 81       	ldd	r30, Y+2	; 0x02
    1366:	fb 81       	ldd	r31, Y+3	; 0x03
    1368:	82 81       	ldd	r24, Z+2	; 0x02
    136a:	8c 93       	st	X, r24
				u8_status=E_ok;
    136c:	19 82       	std	Y+1, r1	; 0x01
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <Timer_Init+0xec>
				break;
			default:
				u8_status=E_NOk;
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return u8_status;
    1374:	89 81       	ldd	r24, Y+1	; 0x01
}
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <Timer_Start>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description: This function starts the needed timer
************************************************************************************/
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	00 d0       	rcall	.+0      	; 0x138c <Timer_Start+0x6>
    138c:	00 d0       	rcall	.+0      	; 0x138e <Timer_Start+0x8>
    138e:	00 d0       	rcall	.+0      	; 0x1390 <Timer_Start+0xa>
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	8a 83       	std	Y+2, r24	; 0x02
    1396:	7c 83       	std	Y+4, r23	; 0x04
    1398:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8_status;
	switch(Timer_CH_NO)
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	3e 83       	std	Y+6, r19	; 0x06
    13a2:	2d 83       	std	Y+5, r18	; 0x05
    13a4:	8d 81       	ldd	r24, Y+5	; 0x05
    13a6:	9e 81       	ldd	r25, Y+6	; 0x06
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	91 05       	cpc	r25, r1
    13ac:	31 f1       	breq	.+76     	; 0x13fa <Timer_Start+0x74>
    13ae:	2d 81       	ldd	r18, Y+5	; 0x05
    13b0:	3e 81       	ldd	r19, Y+6	; 0x06
    13b2:	22 30       	cpi	r18, 0x02	; 2
    13b4:	31 05       	cpc	r19, r1
    13b6:	09 f4       	brne	.+2      	; 0x13ba <Timer_Start+0x34>
    13b8:	47 c0       	rjmp	.+142    	; 0x1448 <Timer_Start+0xc2>
    13ba:	8d 81       	ldd	r24, Y+5	; 0x05
    13bc:	9e 81       	ldd	r25, Y+6	; 0x06
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	09 f0       	breq	.+2      	; 0x13c4 <Timer_Start+0x3e>
    13c2:	5d c0       	rjmp	.+186    	; 0x147e <Timer_Start+0xf8>
	{
		case Timer_0:
			if(Timer_Count<=TIMER0_MAX_COUNT)
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	9c 81       	ldd	r25, Y+4	; 0x04
    13c8:	21 e0       	ldi	r18, 0x01	; 1
    13ca:	81 30       	cpi	r24, 0x01	; 1
    13cc:	92 07       	cpc	r25, r18
    13ce:	90 f4       	brcc	.+36     	; 0x13f4 <Timer_Start+0x6e>
			{
				TCNT0 = (TIMER0_MAX_COUNT-Timer_Count);
    13d0:	e2 e5       	ldi	r30, 0x52	; 82
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	81 95       	neg	r24
    13d8:	80 83       	st	Z, r24
				TCCR0 |= T0_PrescallerValue;
    13da:	a3 e5       	ldi	r26, 0x53	; 83
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e3 e5       	ldi	r30, 0x53	; 83
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	20 81       	ld	r18, Z
    13e4:	80 91 66 00 	lds	r24, 0x0066
    13e8:	90 91 67 00 	lds	r25, 0x0067
    13ec:	82 2b       	or	r24, r18
    13ee:	8c 93       	st	X, r24
				u8_status=E_ok;
    13f0:	19 82       	std	Y+1, r1	; 0x01
    13f2:	47 c0       	rjmp	.+142    	; 0x1482 <Timer_Start+0xfc>
			}
			else
			{
				u8_status=E_NOk;
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	89 83       	std	Y+1, r24	; 0x01
    13f8:	44 c0       	rjmp	.+136    	; 0x1482 <Timer_Start+0xfc>
			break;

		case Timer_1:
			if(Timer_Count<=TIMER1_MAX_COUNT)
			{
				TCNT1H = (((TIMER1_MAX_COUNT-Timer_Count) & MASK_HIGH_BYTE)>>ONE_BYTE);
    13fa:	ed e4       	ldi	r30, 0x4D	; 77
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	9c 81       	ldd	r25, Y+4	; 0x04
    1402:	9c 01       	movw	r18, r24
    1404:	40 e0       	ldi	r20, 0x00	; 0
    1406:	50 e0       	ldi	r21, 0x00	; 0
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	a1 e0       	ldi	r26, 0x01	; 1
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	82 1b       	sub	r24, r18
    1412:	93 0b       	sbc	r25, r19
    1414:	a4 0b       	sbc	r26, r20
    1416:	b5 0b       	sbc	r27, r21
    1418:	80 70       	andi	r24, 0x00	; 0
    141a:	a0 70       	andi	r26, 0x00	; 0
    141c:	b0 70       	andi	r27, 0x00	; 0
    141e:	89 2f       	mov	r24, r25
    1420:	9a 2f       	mov	r25, r26
    1422:	ab 2f       	mov	r26, r27
    1424:	bb 27       	eor	r27, r27
    1426:	a7 fd       	sbrc	r26, 7
    1428:	ba 95       	dec	r27
    142a:	80 83       	st	Z, r24
				TCNT1L = ((TIMER1_MAX_COUNT-Timer_Count) & MASK_LOW_BYTE);
    142c:	ec e4       	ldi	r30, 0x4C	; 76
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	81 95       	neg	r24
    1434:	80 83       	st	Z, r24
				TCCR1B = T1_PrescallerValue;
    1436:	ee e4       	ldi	r30, 0x4E	; 78
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 91 68 00 	lds	r24, 0x0068
    143e:	90 91 69 00 	lds	r25, 0x0069
    1442:	80 83       	st	Z, r24
				u8_status=E_ok;
    1444:	19 82       	std	Y+1, r1	; 0x01
    1446:	1d c0       	rjmp	.+58     	; 0x1482 <Timer_Start+0xfc>
				u8_status=E_NOk;
			}
			break;

		case Timer_2:
			if(Timer_Count<=TIMER0_MAX_COUNT)
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	9c 81       	ldd	r25, Y+4	; 0x04
    144c:	31 e0       	ldi	r19, 0x01	; 1
    144e:	81 30       	cpi	r24, 0x01	; 1
    1450:	93 07       	cpc	r25, r19
    1452:	90 f4       	brcc	.+36     	; 0x1478 <Timer_Start+0xf2>
			{
				TCNT2 = (TIMER2_MAX_COUNT-Timer_Count);
    1454:	e4 e4       	ldi	r30, 0x44	; 68
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	81 95       	neg	r24
    145c:	80 83       	st	Z, r24
				TCCR2 |= T2_PrescallerValue;
    145e:	a5 e4       	ldi	r26, 0x45	; 69
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e5 e4       	ldi	r30, 0x45	; 69
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	20 81       	ld	r18, Z
    1468:	80 91 6a 00 	lds	r24, 0x006A
    146c:	90 91 6b 00 	lds	r25, 0x006B
    1470:	82 2b       	or	r24, r18
    1472:	8c 93       	st	X, r24
				u8_status=E_ok;
    1474:	19 82       	std	Y+1, r1	; 0x01
    1476:	05 c0       	rjmp	.+10     	; 0x1482 <Timer_Start+0xfc>
			}
			else
			{
				u8_status=E_NOk;
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	89 83       	std	Y+1, r24	; 0x01
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <Timer_Start+0xfc>
			}

			break;

		default:
			u8_status=E_NOk;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
    1482:	89 81       	ldd	r24, Y+1	; 0x01
}
    1484:	26 96       	adiw	r28, 0x06	; 6
    1486:	0f b6       	in	r0, 0x3f	; 63
    1488:	f8 94       	cli
    148a:	de bf       	out	0x3e, r29	; 62
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	cd bf       	out	0x3d, r28	; 61
    1490:	cf 91       	pop	r28
    1492:	df 91       	pop	r29
    1494:	08 95       	ret

00001496 <Timer_Stop>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description: This function stops the needed timer
************************************************************************************/
ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{
    1496:	df 93       	push	r29
    1498:	cf 93       	push	r28
    149a:	00 d0       	rcall	.+0      	; 0x149c <Timer_Stop+0x6>
    149c:	00 d0       	rcall	.+0      	; 0x149e <Timer_Stop+0x8>
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
    14a2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_status;
	switch(Timer_CH_NO)
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	3c 83       	std	Y+4, r19	; 0x04
    14ac:	2b 83       	std	Y+3, r18	; 0x03
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	9c 81       	ldd	r25, Y+4	; 0x04
    14b2:	81 30       	cpi	r24, 0x01	; 1
    14b4:	91 05       	cpc	r25, r1
    14b6:	71 f0       	breq	.+28     	; 0x14d4 <Timer_Stop+0x3e>
    14b8:	2b 81       	ldd	r18, Y+3	; 0x03
    14ba:	3c 81       	ldd	r19, Y+4	; 0x04
    14bc:	22 30       	cpi	r18, 0x02	; 2
    14be:	31 05       	cpc	r19, r1
    14c0:	79 f0       	breq	.+30     	; 0x14e0 <Timer_Stop+0x4a>
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	9c 81       	ldd	r25, Y+4	; 0x04
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	81 f4       	brne	.+32     	; 0x14ea <Timer_Stop+0x54>
	{
		case Timer_0:
			TCCR0 = T0_NO_CLOCK;
    14ca:	e3 e5       	ldi	r30, 0x53	; 83
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	10 82       	st	Z, r1
			u8_status=E_ok;
    14d0:	19 82       	std	Y+1, r1	; 0x01
    14d2:	0d c0       	rjmp	.+26     	; 0x14ee <Timer_Stop+0x58>
			break;
		case Timer_1:
			TCCR1 = T1_NO_CLOCK;
    14d4:	ee e4       	ldi	r30, 0x4E	; 78
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	11 82       	std	Z+1, r1	; 0x01
    14da:	10 82       	st	Z, r1
			u8_status=E_ok;
    14dc:	19 82       	std	Y+1, r1	; 0x01
    14de:	07 c0       	rjmp	.+14     	; 0x14ee <Timer_Stop+0x58>
			break;
		case Timer_2:
			TCCR2 = T2_NO_CLOCK;
    14e0:	e5 e4       	ldi	r30, 0x45	; 69
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	10 82       	st	Z, r1
			u8_status=E_ok;
    14e6:	19 82       	std	Y+1, r1	; 0x01
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <Timer_Stop+0x58>
			break;
		default:
			u8_status=E_NOk;
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return u8_status;
    14ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <Timer_GetStatus>:
* Parameters (out): Data- A variable of type bool returns if the flag of the timer is raised or not
* Return value: u8_error- variable that describe the error status
* Description: This function is used to return if the flag of the timer is raised or not
************************************************************************************/
ERROR_STATUS Timer_GetStatus(uint8_t Timer_CH_NO, bool_t* Data)
{
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	00 d0       	rcall	.+0      	; 0x1504 <Timer_GetStatus+0x6>
    1504:	00 d0       	rcall	.+0      	; 0x1506 <Timer_GetStatus+0x8>
    1506:	00 d0       	rcall	.+0      	; 0x1508 <Timer_GetStatus+0xa>
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	8a 83       	std	Y+2, r24	; 0x02
    150e:	7c 83       	std	Y+4, r23	; 0x04
    1510:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8_status;
	switch(Timer_CH_NO)
    1512:	8a 81       	ldd	r24, Y+2	; 0x02
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	3e 83       	std	Y+6, r19	; 0x06
    151a:	2d 83       	std	Y+5, r18	; 0x05
    151c:	8d 81       	ldd	r24, Y+5	; 0x05
    151e:	9e 81       	ldd	r25, Y+6	; 0x06
    1520:	81 30       	cpi	r24, 0x01	; 1
    1522:	91 05       	cpc	r25, r1
    1524:	e1 f0       	breq	.+56     	; 0x155e <Timer_GetStatus+0x60>
    1526:	2d 81       	ldd	r18, Y+5	; 0x05
    1528:	3e 81       	ldd	r19, Y+6	; 0x06
    152a:	22 30       	cpi	r18, 0x02	; 2
    152c:	31 05       	cpc	r19, r1
    152e:	51 f1       	breq	.+84     	; 0x1584 <Timer_GetStatus+0x86>
    1530:	8d 81       	ldd	r24, Y+5	; 0x05
    1532:	9e 81       	ldd	r25, Y+6	; 0x06
    1534:	00 97       	sbiw	r24, 0x00	; 0
    1536:	c9 f5       	brne	.+114    	; 0x15aa <Timer_GetStatus+0xac>
	{
		case Timer_0:
			if(TIFR & (ONE<<TOV0))
    1538:	e8 e5       	ldi	r30, 0x58	; 88
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	88 2f       	mov	r24, r24
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	81 70       	andi	r24, 0x01	; 1
    1544:	90 70       	andi	r25, 0x00	; 0
    1546:	88 23       	and	r24, r24
    1548:	29 f0       	breq	.+10     	; 0x1554 <Timer_GetStatus+0x56>
			{
				*Data=FLAG_RAISED;
    154a:	eb 81       	ldd	r30, Y+3	; 0x03
    154c:	fc 81       	ldd	r31, Y+4	; 0x04
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	80 83       	st	Z, r24
    1552:	03 c0       	rjmp	.+6      	; 0x155a <Timer_GetStatus+0x5c>
			}
			else
			{
				*Data=FLAG_DOWN;
    1554:	eb 81       	ldd	r30, Y+3	; 0x03
    1556:	fc 81       	ldd	r31, Y+4	; 0x04
    1558:	10 82       	st	Z, r1
			}
			u8_status=E_ok;
    155a:	19 82       	std	Y+1, r1	; 0x01
    155c:	28 c0       	rjmp	.+80     	; 0x15ae <Timer_GetStatus+0xb0>
			break;

		case Timer_1:
			if(TIFR & (ONE<<TOV1))
    155e:	e8 e5       	ldi	r30, 0x58	; 88
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	88 2f       	mov	r24, r24
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	84 70       	andi	r24, 0x04	; 4
    156a:	90 70       	andi	r25, 0x00	; 0
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	29 f0       	breq	.+10     	; 0x157a <Timer_GetStatus+0x7c>
			{
				*Data=FLAG_RAISED;
    1570:	eb 81       	ldd	r30, Y+3	; 0x03
    1572:	fc 81       	ldd	r31, Y+4	; 0x04
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	80 83       	st	Z, r24
    1578:	03 c0       	rjmp	.+6      	; 0x1580 <Timer_GetStatus+0x82>
			}
			else
			{
				*Data=FLAG_DOWN;
    157a:	eb 81       	ldd	r30, Y+3	; 0x03
    157c:	fc 81       	ldd	r31, Y+4	; 0x04
    157e:	10 82       	st	Z, r1
			}
			u8_status=E_ok;
    1580:	19 82       	std	Y+1, r1	; 0x01
    1582:	15 c0       	rjmp	.+42     	; 0x15ae <Timer_GetStatus+0xb0>
			break;

		case Timer_2:
			if(TIFR & (ONE<<TOV2))
    1584:	e8 e5       	ldi	r30, 0x58	; 88
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	88 2f       	mov	r24, r24
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	80 74       	andi	r24, 0x40	; 64
    1590:	90 70       	andi	r25, 0x00	; 0
    1592:	00 97       	sbiw	r24, 0x00	; 0
    1594:	29 f0       	breq	.+10     	; 0x15a0 <Timer_GetStatus+0xa2>
			{
				*Data=FLAG_RAISED;
    1596:	eb 81       	ldd	r30, Y+3	; 0x03
    1598:	fc 81       	ldd	r31, Y+4	; 0x04
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	80 83       	st	Z, r24
    159e:	03 c0       	rjmp	.+6      	; 0x15a6 <Timer_GetStatus+0xa8>
			}
			else
			{
				*Data=FLAG_DOWN;
    15a0:	eb 81       	ldd	r30, Y+3	; 0x03
    15a2:	fc 81       	ldd	r31, Y+4	; 0x04
    15a4:	10 82       	st	Z, r1
			}
			u8_status=E_ok;
    15a6:	19 82       	std	Y+1, r1	; 0x01
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <Timer_GetStatus+0xb0>
			break;

		default:
			u8_status=E_NOk;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    15b0:	26 96       	adiw	r28, 0x06	; 6
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	f8 94       	cli
    15b6:	de bf       	out	0x3e, r29	; 62
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	cd bf       	out	0x3d, r28	; 61
    15bc:	cf 91       	pop	r28
    15be:	df 91       	pop	r29
    15c0:	08 95       	ret

000015c2 <Timer_GetValue>:
* Parameters (out): Data- A variable of type bool returns if the flag of the timer is raised or not
* Return value: u8_error- variable that describe the error status
* Description: This function is used to return the value of the timer
************************************************************************************/
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO,uint16_t* Data)
{
    15c2:	df 93       	push	r29
    15c4:	cf 93       	push	r28
    15c6:	00 d0       	rcall	.+0      	; 0x15c8 <Timer_GetValue+0x6>
    15c8:	00 d0       	rcall	.+0      	; 0x15ca <Timer_GetValue+0x8>
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <Timer_GetValue+0xa>
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	8a 83       	std	Y+2, r24	; 0x02
    15d2:	7c 83       	std	Y+4, r23	; 0x04
    15d4:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8_status;
	switch(Timer_CH_NO)
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	3e 83       	std	Y+6, r19	; 0x06
    15de:	2d 83       	std	Y+5, r18	; 0x05
    15e0:	8d 81       	ldd	r24, Y+5	; 0x05
    15e2:	9e 81       	ldd	r25, Y+6	; 0x06
    15e4:	81 30       	cpi	r24, 0x01	; 1
    15e6:	91 05       	cpc	r25, r1
    15e8:	a1 f0       	breq	.+40     	; 0x1612 <Timer_GetValue+0x50>
    15ea:	2d 81       	ldd	r18, Y+5	; 0x05
    15ec:	3e 81       	ldd	r19, Y+6	; 0x06
    15ee:	22 30       	cpi	r18, 0x02	; 2
    15f0:	31 05       	cpc	r19, r1
    15f2:	c9 f0       	breq	.+50     	; 0x1626 <Timer_GetValue+0x64>
    15f4:	8d 81       	ldd	r24, Y+5	; 0x05
    15f6:	9e 81       	ldd	r25, Y+6	; 0x06
    15f8:	00 97       	sbiw	r24, 0x00	; 0
    15fa:	01 f5       	brne	.+64     	; 0x163c <Timer_GetValue+0x7a>
	{
		case Timer_0:
			*Data = TCNT0;
    15fc:	e2 e5       	ldi	r30, 0x52	; 82
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	88 2f       	mov	r24, r24
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	eb 81       	ldd	r30, Y+3	; 0x03
    1608:	fc 81       	ldd	r31, Y+4	; 0x04
    160a:	91 83       	std	Z+1, r25	; 0x01
    160c:	80 83       	st	Z, r24
			u8_status=E_ok;
    160e:	19 82       	std	Y+1, r1	; 0x01
    1610:	17 c0       	rjmp	.+46     	; 0x1640 <Timer_GetValue+0x7e>
			break;
		case Timer_1:
			*Data = TCNT1;
    1612:	ec e4       	ldi	r30, 0x4C	; 76
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	91 81       	ldd	r25, Z+1	; 0x01
    161a:	eb 81       	ldd	r30, Y+3	; 0x03
    161c:	fc 81       	ldd	r31, Y+4	; 0x04
    161e:	91 83       	std	Z+1, r25	; 0x01
    1620:	80 83       	st	Z, r24
			u8_status=E_ok;
    1622:	19 82       	std	Y+1, r1	; 0x01
    1624:	0d c0       	rjmp	.+26     	; 0x1640 <Timer_GetValue+0x7e>
			break;
		case Timer_2:
			*Data = TCNT2;
    1626:	e4 e4       	ldi	r30, 0x44	; 68
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	88 2f       	mov	r24, r24
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	eb 81       	ldd	r30, Y+3	; 0x03
    1632:	fc 81       	ldd	r31, Y+4	; 0x04
    1634:	91 83       	std	Z+1, r25	; 0x01
    1636:	80 83       	st	Z, r24
			u8_status=E_ok;
    1638:	19 82       	std	Y+1, r1	; 0x01
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <Timer_GetValue+0x7e>
			break;
		default:
			u8_status=E_NOk;
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
    1640:	89 81       	ldd	r24, Y+1	; 0x01
}
    1642:	26 96       	adiw	r28, 0x06	; 6
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	08 95       	ret

00001654 <Timer_Clear>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description: This function is used to reset the TCNTX register value
************************************************************************************/
ERROR_STATUS Timer_Clear(uint8_t Timer_CH_NO)
{
    1654:	df 93       	push	r29
    1656:	cf 93       	push	r28
    1658:	00 d0       	rcall	.+0      	; 0x165a <Timer_Clear+0x6>
    165a:	00 d0       	rcall	.+0      	; 0x165c <Timer_Clear+0x8>
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_status;
	switch(Timer_CH_NO)
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	3c 83       	std	Y+4, r19	; 0x04
    166a:	2b 83       	std	Y+3, r18	; 0x03
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	9c 81       	ldd	r25, Y+4	; 0x04
    1670:	81 30       	cpi	r24, 0x01	; 1
    1672:	91 05       	cpc	r25, r1
    1674:	71 f0       	breq	.+28     	; 0x1692 <Timer_Clear+0x3e>
    1676:	2b 81       	ldd	r18, Y+3	; 0x03
    1678:	3c 81       	ldd	r19, Y+4	; 0x04
    167a:	22 30       	cpi	r18, 0x02	; 2
    167c:	31 05       	cpc	r19, r1
    167e:	79 f0       	breq	.+30     	; 0x169e <Timer_Clear+0x4a>
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	9c 81       	ldd	r25, Y+4	; 0x04
    1684:	00 97       	sbiw	r24, 0x00	; 0
    1686:	81 f4       	brne	.+32     	; 0x16a8 <Timer_Clear+0x54>
	{
		case Timer_0:
			TCNT0= CLEAR;
    1688:	e2 e5       	ldi	r30, 0x52	; 82
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	10 82       	st	Z, r1
			u8_status=E_ok;
    168e:	19 82       	std	Y+1, r1	; 0x01
    1690:	0d c0       	rjmp	.+26     	; 0x16ac <Timer_Clear+0x58>
			break;
		case Timer_1:
			TCNT1 = CLEAR;
    1692:	ec e4       	ldi	r30, 0x4C	; 76
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	11 82       	std	Z+1, r1	; 0x01
    1698:	10 82       	st	Z, r1
			u8_status=E_ok;
    169a:	19 82       	std	Y+1, r1	; 0x01
    169c:	07 c0       	rjmp	.+14     	; 0x16ac <Timer_Clear+0x58>
			break;
		case Timer_2:
			TCNT2 = CLEAR;
    169e:	e4 e4       	ldi	r30, 0x44	; 68
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	10 82       	st	Z, r1
			u8_status=E_ok;
    16a4:	19 82       	std	Y+1, r1	; 0x01
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <Timer_Clear+0x58>
			break;
		default:
			u8_status=E_NOk;
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return u8_status;
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <INT0_Init>:
volatile uint8_t g8_interrupt_zero_flag=CLEAR;
volatile uint8_t g8_echo_flag=CLEAR;

/************************INT0*****************************************/
ERROR_STATUS INT0_Init(EN_Edge_t en_edge_selection)
{
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
    16c4:	27 97       	sbiw	r28, 0x07	; 7
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	cd bf       	out	0x3d, r28	; 61
    16d0:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t u8_status;

	cli();                              /*Disable interrupts by clearing I-bit*/
    16d2:	f8 94       	cli
	GICR  |= (ONE<<INT0);                 /* Enable external interrupt pin INT0*/
    16d4:	ab e5       	ldi	r26, 0x5B	; 91
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	eb e5       	ldi	r30, 0x5B	; 91
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	80 64       	ori	r24, 0x40	; 64
    16e0:	8c 93       	st	X, r24
	DIO_Cfg_s DIO_stru_init=
	{
			DIO_stru_init.GPIO=GPIOD,
			DIO_stru_init.pins=BIT2,
			DIO_stru_init.dir=INPUT,
	};
    16e2:	83 e0       	ldi	r24, 0x03	; 3
    16e4:	8a 83       	std	Y+2, r24	; 0x02
    16e6:	2a 81       	ldd	r18, Y+2	; 0x02
    16e8:	84 e0       	ldi	r24, 0x04	; 4
    16ea:	8b 83       	std	Y+3, r24	; 0x03
    16ec:	9b 81       	ldd	r25, Y+3	; 0x03
    16ee:	1c 82       	std	Y+4, r1	; 0x04
    16f0:	8c 81       	ldd	r24, Y+4	; 0x04
    16f2:	2a 83       	std	Y+2, r18	; 0x02
    16f4:	9b 83       	std	Y+3, r25	; 0x03
    16f6:	8c 83       	std	Y+4, r24	; 0x04
	u8_status |= DIO_init (&DIO_stru_init);
    16f8:	ce 01       	movw	r24, r28
    16fa:	02 96       	adiw	r24, 0x02	; 2
    16fc:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_init>
    1700:	98 2f       	mov	r25, r24
    1702:	89 81       	ldd	r24, Y+1	; 0x01
    1704:	89 2b       	or	r24, r25
    1706:	89 83       	std	Y+1, r24	; 0x01
	switch(en_edge_selection)
    1708:	8d 81       	ldd	r24, Y+5	; 0x05
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	3f 83       	std	Y+7, r19	; 0x07
    1710:	2e 83       	std	Y+6, r18	; 0x06
    1712:	8e 81       	ldd	r24, Y+6	; 0x06
    1714:	9f 81       	ldd	r25, Y+7	; 0x07
    1716:	81 30       	cpi	r24, 0x01	; 1
    1718:	91 05       	cpc	r25, r1
    171a:	e9 f0       	breq	.+58     	; 0x1756 <INT0_Init+0x9a>
    171c:	2e 81       	ldd	r18, Y+6	; 0x06
    171e:	3f 81       	ldd	r19, Y+7	; 0x07
    1720:	22 30       	cpi	r18, 0x02	; 2
    1722:	31 05       	cpc	r19, r1
    1724:	2c f4       	brge	.+10     	; 0x1730 <INT0_Init+0x74>
    1726:	8e 81       	ldd	r24, Y+6	; 0x06
    1728:	9f 81       	ldd	r25, Y+7	; 0x07
    172a:	00 97       	sbiw	r24, 0x00	; 0
    172c:	61 f0       	breq	.+24     	; 0x1746 <INT0_Init+0x8a>
    172e:	2b c0       	rjmp	.+86     	; 0x1786 <INT0_Init+0xca>
    1730:	2e 81       	ldd	r18, Y+6	; 0x06
    1732:	3f 81       	ldd	r19, Y+7	; 0x07
    1734:	22 30       	cpi	r18, 0x02	; 2
    1736:	31 05       	cpc	r19, r1
    1738:	b1 f0       	breq	.+44     	; 0x1766 <INT0_Init+0xaa>
    173a:	8e 81       	ldd	r24, Y+6	; 0x06
    173c:	9f 81       	ldd	r25, Y+7	; 0x07
    173e:	83 30       	cpi	r24, 0x03	; 3
    1740:	91 05       	cpc	r25, r1
    1742:	c9 f0       	breq	.+50     	; 0x1776 <INT0_Init+0xba>
    1744:	20 c0       	rjmp	.+64     	; 0x1786 <INT0_Init+0xca>
	{
	case LOW_LEVEL:
		MCUCR &= ~(ONE<<ISC00) & ~(ONE<<ISC01);		/* Trigger INT0 with the low level*/
    1746:	a5 e5       	ldi	r26, 0x55	; 85
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	e5 e5       	ldi	r30, 0x55	; 85
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	8c 7f       	andi	r24, 0xFC	; 252
    1752:	8c 93       	st	X, r24
    1754:	1b c0       	rjmp	.+54     	; 0x178c <INT0_Init+0xd0>
		u8_status |= E_ok;
		break;

	case ANY_CHANGE:
		MCUCR |= (ONE<<ISC10);  					 /* Trigger INT0 with the any change*/
    1756:	a5 e5       	ldi	r26, 0x55	; 85
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e5 e5       	ldi	r30, 0x55	; 85
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	84 60       	ori	r24, 0x04	; 4
    1762:	8c 93       	st	X, r24
    1764:	13 c0       	rjmp	.+38     	; 0x178c <INT0_Init+0xd0>
		u8_status |= E_ok;
		break;

	case FALLING_EDGE:
		MCUCR |= (ONE<<ISC00);  					 /* Trigger INT0 with the falling edge*/
    1766:	a5 e5       	ldi	r26, 0x55	; 85
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	e5 e5       	ldi	r30, 0x55	; 85
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	81 60       	ori	r24, 0x01	; 1
    1772:	8c 93       	st	X, r24
    1774:	0b c0       	rjmp	.+22     	; 0x178c <INT0_Init+0xd0>
		u8_status |= E_ok;
		break;

	case RISIGING_EDGE:
		MCUCR |= (ONE<<ISC00) | (ONE<<ISC01);  		 /* Trigger INT0 with the raising edge*/
    1776:	a5 e5       	ldi	r26, 0x55	; 85
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e5 e5       	ldi	r30, 0x55	; 85
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	83 60       	ori	r24, 0x03	; 3
    1782:	8c 93       	st	X, r24
    1784:	03 c0       	rjmp	.+6      	; 0x178c <INT0_Init+0xd0>
		u8_status |= E_ok;
		break;

	default:
		u8_status |= E_NOk;
    1786:	89 81       	ldd	r24, Y+1	; 0x01
    1788:	81 60       	ori	r24, 0x01	; 1
    178a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	sei();                             			 /*Enable interrupts by setting I-bit*/
    178c:	78 94       	sei

	if(u8_status == E_ok)
    178e:	89 81       	ldd	r24, Y+1	; 0x01
    1790:	88 23       	and	r24, r24
    1792:	11 f4       	brne	.+4      	; 0x1798 <INT0_Init+0xdc>
	{
		u8_status=E_ok;
    1794:	19 82       	std	Y+1, r1	; 0x01
    1796:	02 c0       	rjmp	.+4      	; 0x179c <INT0_Init+0xe0>
	}
	else
	{
		u8_status = E_NOk;
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8_status;
    179c:	89 81       	ldd	r24, Y+1	; 0x01
}
    179e:	27 96       	adiw	r28, 0x07	; 7
    17a0:	0f b6       	in	r0, 0x3f	; 63
    17a2:	f8 94       	cli
    17a4:	de bf       	out	0x3e, r29	; 62
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	cd bf       	out	0x3d, r28	; 61
    17aa:	cf 91       	pop	r28
    17ac:	df 91       	pop	r29
    17ae:	08 95       	ret

000017b0 <INT0_DeInit>:


ERROR_STATUS INT0_DeInit(void)
{
    17b0:	df 93       	push	r29
    17b2:	cf 93       	push	r28
    17b4:	0f 92       	push	r0
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_status;
	cli();                             			 /*Disable interrupts by clearing I-bit*/
    17ba:	f8 94       	cli
	GICR  &= ~(ONE<<INT0);                		 /* Disable external interrupt pin INT0*/
    17bc:	ab e5       	ldi	r26, 0x5B	; 91
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	eb e5       	ldi	r30, 0x5B	; 91
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	8f 7b       	andi	r24, 0xBF	; 191
    17c8:	8c 93       	st	X, r24
	MCUCR &= ~(ONE<<ISC00) & ~(ONE<<ISC01);
    17ca:	a5 e5       	ldi	r26, 0x55	; 85
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e5 e5       	ldi	r30, 0x55	; 85
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	8c 7f       	andi	r24, 0xFC	; 252
    17d6:	8c 93       	st	X, r24
	u8_status |= E_ok;
	return u8_status;
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    17da:	0f 90       	pop	r0
    17dc:	cf 91       	pop	r28
    17de:	df 91       	pop	r29
    17e0:	08 95       	ret

000017e2 <INT1_Init>:

/****************************INT1*******************************************/
ERROR_STATUS INT1_Init(EN_Edge_t en_edge_selection)
{
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	27 97       	sbiw	r28, 0x07	; 7
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t u8_status;
cli();                            		 	 /*Disable interrupts by clearing I-bit*/
    17f8:	f8 94       	cli
	GICR  |= (ONE<<INT1);                 	/* Enable external interrupt pin INT1*/
    17fa:	ab e5       	ldi	r26, 0x5B	; 91
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	eb e5       	ldi	r30, 0x5B	; 91
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	80 68       	ori	r24, 0x80	; 128
    1806:	8c 93       	st	X, r24
	DIO_Cfg_s DIO_stru_init=
	{
			DIO_stru_init.GPIO=GPIOD,
			DIO_stru_init.pins=BIT3,
			DIO_stru_init.dir=INPUT,
	};
    1808:	83 e0       	ldi	r24, 0x03	; 3
    180a:	8a 83       	std	Y+2, r24	; 0x02
    180c:	2a 81       	ldd	r18, Y+2	; 0x02
    180e:	88 e0       	ldi	r24, 0x08	; 8
    1810:	8b 83       	std	Y+3, r24	; 0x03
    1812:	9b 81       	ldd	r25, Y+3	; 0x03
    1814:	1c 82       	std	Y+4, r1	; 0x04
    1816:	8c 81       	ldd	r24, Y+4	; 0x04
    1818:	2a 83       	std	Y+2, r18	; 0x02
    181a:	9b 83       	std	Y+3, r25	; 0x03
    181c:	8c 83       	std	Y+4, r24	; 0x04
	u8_status |= DIO_init (&DIO_stru_init);
    181e:	ce 01       	movw	r24, r28
    1820:	02 96       	adiw	r24, 0x02	; 2
    1822:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_init>
    1826:	98 2f       	mov	r25, r24
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	89 2b       	or	r24, r25
    182c:	89 83       	std	Y+1, r24	; 0x01
	switch(en_edge_selection)
    182e:	8d 81       	ldd	r24, Y+5	; 0x05
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	3f 83       	std	Y+7, r19	; 0x07
    1836:	2e 83       	std	Y+6, r18	; 0x06
    1838:	8e 81       	ldd	r24, Y+6	; 0x06
    183a:	9f 81       	ldd	r25, Y+7	; 0x07
    183c:	81 30       	cpi	r24, 0x01	; 1
    183e:	91 05       	cpc	r25, r1
    1840:	e9 f0       	breq	.+58     	; 0x187c <INT1_Init+0x9a>
    1842:	2e 81       	ldd	r18, Y+6	; 0x06
    1844:	3f 81       	ldd	r19, Y+7	; 0x07
    1846:	22 30       	cpi	r18, 0x02	; 2
    1848:	31 05       	cpc	r19, r1
    184a:	2c f4       	brge	.+10     	; 0x1856 <INT1_Init+0x74>
    184c:	8e 81       	ldd	r24, Y+6	; 0x06
    184e:	9f 81       	ldd	r25, Y+7	; 0x07
    1850:	00 97       	sbiw	r24, 0x00	; 0
    1852:	61 f0       	breq	.+24     	; 0x186c <INT1_Init+0x8a>
    1854:	2b c0       	rjmp	.+86     	; 0x18ac <INT1_Init+0xca>
    1856:	2e 81       	ldd	r18, Y+6	; 0x06
    1858:	3f 81       	ldd	r19, Y+7	; 0x07
    185a:	22 30       	cpi	r18, 0x02	; 2
    185c:	31 05       	cpc	r19, r1
    185e:	b1 f0       	breq	.+44     	; 0x188c <INT1_Init+0xaa>
    1860:	8e 81       	ldd	r24, Y+6	; 0x06
    1862:	9f 81       	ldd	r25, Y+7	; 0x07
    1864:	83 30       	cpi	r24, 0x03	; 3
    1866:	91 05       	cpc	r25, r1
    1868:	c9 f0       	breq	.+50     	; 0x189c <INT1_Init+0xba>
    186a:	20 c0       	rjmp	.+64     	; 0x18ac <INT1_Init+0xca>
	{
	case LOW_LEVEL:
		MCUCR &= ~(ONE<<ISC10) & ~(ONE<<ISC11);	 /* Trigger INT0 with the low level*/
    186c:	a5 e5       	ldi	r26, 0x55	; 85
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	e5 e5       	ldi	r30, 0x55	; 85
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	83 7f       	andi	r24, 0xF3	; 243
    1878:	8c 93       	st	X, r24
    187a:	1b c0       	rjmp	.+54     	; 0x18b2 <INT1_Init+0xd0>
		u8_status |= E_ok;
		break;

	case ANY_CHANGE:
		MCUCR |= (ONE<<ISC10);                /* Trigger INT0 with the any change*/
    187c:	a5 e5       	ldi	r26, 0x55	; 85
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	e5 e5       	ldi	r30, 0x55	; 85
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	84 60       	ori	r24, 0x04	; 4
    1888:	8c 93       	st	X, r24
    188a:	13 c0       	rjmp	.+38     	; 0x18b2 <INT1_Init+0xd0>
		u8_status |= E_ok;
		break;

	case FALLING_EDGE:
		MCUCR |= (ONE<<ISC11);                /* Trigger INT0 with the falling edge*/
    188c:	a5 e5       	ldi	r26, 0x55	; 85
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	e5 e5       	ldi	r30, 0x55	; 85
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	88 60       	ori	r24, 0x08	; 8
    1898:	8c 93       	st	X, r24
    189a:	0b c0       	rjmp	.+22     	; 0x18b2 <INT1_Init+0xd0>
		u8_status |= E_ok;
		break;

	case RISIGING_EDGE:
		MCUCR |= (ONE<<ISC10) | (ONE<<ISC11);   /* Trigger INT0 with the raising edge*/
    189c:	a5 e5       	ldi	r26, 0x55	; 85
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	e5 e5       	ldi	r30, 0x55	; 85
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	8c 60       	ori	r24, 0x0C	; 12
    18a8:	8c 93       	st	X, r24
    18aa:	03 c0       	rjmp	.+6      	; 0x18b2 <INT1_Init+0xd0>
		u8_status |= E_ok;
		break;

	default:
		u8_status |= E_NOk;
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	81 60       	ori	r24, 0x01	; 1
    18b0:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	sei();                              /*Enable interrupts by setting I-bit*/
    18b2:	78 94       	sei

	if(u8_status == E_ok)
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	88 23       	and	r24, r24
    18b8:	11 f4       	brne	.+4      	; 0x18be <INT1_Init+0xdc>
	{
		u8_status = E_ok;
    18ba:	19 82       	std	Y+1, r1	; 0x01
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <INT1_Init+0xe0>
	}
	else
	{
		u8_status = E_NOk;
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8_status;
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    18c4:	27 96       	adiw	r28, 0x07	; 7
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	f8 94       	cli
    18ca:	de bf       	out	0x3e, r29	; 62
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	cd bf       	out	0x3d, r28	; 61
    18d0:	cf 91       	pop	r28
    18d2:	df 91       	pop	r29
    18d4:	08 95       	ret

000018d6 <INT1_DeInit>:

ERROR_STATUS INT1_DeInit(void)
{
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	0f 92       	push	r0
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_status;
	cli();                              /*Disable interrupts by clearing I-bit*/
    18e0:	f8 94       	cli
	GICR  &= ~(ONE<<INT1);                 /* Disable external interrupt pin INT0*/
    18e2:	ab e5       	ldi	r26, 0x5B	; 91
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	eb e5       	ldi	r30, 0x5B	; 91
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	8f 77       	andi	r24, 0x7F	; 127
    18ee:	8c 93       	st	X, r24
	MCUCR &= ~(ONE<<ISC10) & ~(ONE<<ISC11);
    18f0:	a5 e5       	ldi	r26, 0x55	; 85
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	e5 e5       	ldi	r30, 0x55	; 85
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	83 7f       	andi	r24, 0xF3	; 243
    18fc:	8c 93       	st	X, r24
	u8_status |= E_ok;
	return u8_status;
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1900:	0f 90       	pop	r0
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	08 95       	ret

00001908 <INT2_Init>:

/****************************INT2*******************************************/
ERROR_STATUS INT2_Init(EN_Edge_t en_edge_selection)
{
    1908:	df 93       	push	r29
    190a:	cf 93       	push	r28
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
    1910:	27 97       	sbiw	r28, 0x07	; 7
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	f8 94       	cli
    1916:	de bf       	out	0x3e, r29	; 62
    1918:	0f be       	out	0x3f, r0	; 63
    191a:	cd bf       	out	0x3d, r28	; 61
    191c:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t u8_status;
	cli();                              /*Disable interrupts by clearing I-bit*/
    191e:	f8 94       	cli
	GICR  |= (ONE<<INT2);                 /* Enable external interrupt pin INT1*/
    1920:	ab e5       	ldi	r26, 0x5B	; 91
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	eb e5       	ldi	r30, 0x5B	; 91
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	80 62       	ori	r24, 0x20	; 32
    192c:	8c 93       	st	X, r24
	DIO_Cfg_s DIO_stru_init=
	{
			DIO_stru_init.GPIO=GPIOB,
			DIO_stru_init.pins=BIT2,
			DIO_stru_init.dir=INPUT,
	};
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	8a 83       	std	Y+2, r24	; 0x02
    1932:	2a 81       	ldd	r18, Y+2	; 0x02
    1934:	84 e0       	ldi	r24, 0x04	; 4
    1936:	8b 83       	std	Y+3, r24	; 0x03
    1938:	9b 81       	ldd	r25, Y+3	; 0x03
    193a:	1c 82       	std	Y+4, r1	; 0x04
    193c:	8c 81       	ldd	r24, Y+4	; 0x04
    193e:	2a 83       	std	Y+2, r18	; 0x02
    1940:	9b 83       	std	Y+3, r25	; 0x03
    1942:	8c 83       	std	Y+4, r24	; 0x04
	u8_status |= DIO_init (&DIO_stru_init);
    1944:	ce 01       	movw	r24, r28
    1946:	02 96       	adiw	r24, 0x02	; 2
    1948:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_init>
    194c:	98 2f       	mov	r25, r24
    194e:	89 81       	ldd	r24, Y+1	; 0x01
    1950:	89 2b       	or	r24, r25
    1952:	89 83       	std	Y+1, r24	; 0x01
	switch(en_edge_selection)
    1954:	8d 81       	ldd	r24, Y+5	; 0x05
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	3f 83       	std	Y+7, r19	; 0x07
    195c:	2e 83       	std	Y+6, r18	; 0x06
    195e:	8e 81       	ldd	r24, Y+6	; 0x06
    1960:	9f 81       	ldd	r25, Y+7	; 0x07
    1962:	81 30       	cpi	r24, 0x01	; 1
    1964:	91 05       	cpc	r25, r1
    1966:	c9 f0       	breq	.+50     	; 0x199a <INT2_Init+0x92>
    1968:	2e 81       	ldd	r18, Y+6	; 0x06
    196a:	3f 81       	ldd	r19, Y+7	; 0x07
    196c:	22 30       	cpi	r18, 0x02	; 2
    196e:	31 05       	cpc	r19, r1
    1970:	2c f4       	brge	.+10     	; 0x197c <INT2_Init+0x74>
    1972:	8e 81       	ldd	r24, Y+6	; 0x06
    1974:	9f 81       	ldd	r25, Y+7	; 0x07
    1976:	00 97       	sbiw	r24, 0x00	; 0
    1978:	61 f0       	breq	.+24     	; 0x1992 <INT2_Init+0x8a>
    197a:	23 c0       	rjmp	.+70     	; 0x19c2 <INT2_Init+0xba>
    197c:	2e 81       	ldd	r18, Y+6	; 0x06
    197e:	3f 81       	ldd	r19, Y+7	; 0x07
    1980:	22 30       	cpi	r18, 0x02	; 2
    1982:	31 05       	cpc	r19, r1
    1984:	71 f0       	breq	.+28     	; 0x19a2 <INT2_Init+0x9a>
    1986:	8e 81       	ldd	r24, Y+6	; 0x06
    1988:	9f 81       	ldd	r25, Y+7	; 0x07
    198a:	83 30       	cpi	r24, 0x03	; 3
    198c:	91 05       	cpc	r25, r1
    198e:	89 f0       	breq	.+34     	; 0x19b2 <INT2_Init+0xaa>
    1990:	18 c0       	rjmp	.+48     	; 0x19c2 <INT2_Init+0xba>
	{
	case LOW_LEVEL:
										/*this case is not exist*/
		u8_status |= E_NOk;
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	81 60       	ori	r24, 0x01	; 1
    1996:	89 83       	std	Y+1, r24	; 0x01
    1998:	17 c0       	rjmp	.+46     	; 0x19c8 <INT2_Init+0xc0>
		break;

	case ANY_CHANGE:
										/*this case is not exist*/
		u8_status |= E_NOk;
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	81 60       	ori	r24, 0x01	; 1
    199e:	89 83       	std	Y+1, r24	; 0x01
    19a0:	13 c0       	rjmp	.+38     	; 0x19c8 <INT2_Init+0xc0>
		break;

	case FALLING_EDGE:
		MCUCSR &= ~(ONE<<ISC2);            /*nothing to do*/
    19a2:	a4 e5       	ldi	r26, 0x54	; 84
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e4 e5       	ldi	r30, 0x54	; 84
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	8f 7b       	andi	r24, 0xBF	; 191
    19ae:	8c 93       	st	X, r24
    19b0:	0b c0       	rjmp	.+22     	; 0x19c8 <INT2_Init+0xc0>
		u8_status |= E_ok;
		break;

	case RISIGING_EDGE:
		MCUCSR |= (ONE<<ISC2);            /* Trigger INT0 with the raising edge*/
    19b2:	a4 e5       	ldi	r26, 0x54	; 84
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e4 e5       	ldi	r30, 0x54	; 84
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	80 64       	ori	r24, 0x40	; 64
    19be:	8c 93       	st	X, r24
    19c0:	03 c0       	rjmp	.+6      	; 0x19c8 <INT2_Init+0xc0>
		u8_status|= E_ok;
		break;

	default:
		u8_status |= E_NOk;
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	81 60       	ori	r24, 0x01	; 1
    19c6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	sei();                              /*Enable interrupts by setting I-bit*/
    19c8:	78 94       	sei

	if(u8_status == E_ok)
    19ca:	89 81       	ldd	r24, Y+1	; 0x01
    19cc:	88 23       	and	r24, r24
    19ce:	11 f4       	brne	.+4      	; 0x19d4 <INT2_Init+0xcc>
	{
		u8_status=E_ok;
    19d0:	19 82       	std	Y+1, r1	; 0x01
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <INT2_Init+0xd0>
	}
	else
	{
		u8_status = E_NOk;
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8_status;
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19da:	27 96       	adiw	r28, 0x07	; 7
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	f8 94       	cli
    19e0:	de bf       	out	0x3e, r29	; 62
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	cd bf       	out	0x3d, r28	; 61
    19e6:	cf 91       	pop	r28
    19e8:	df 91       	pop	r29
    19ea:	08 95       	ret

000019ec <INT2_DeInit>:

ERROR_STATUS INT2_DeInit(void)
{
    19ec:	df 93       	push	r29
    19ee:	cf 93       	push	r28
    19f0:	0f 92       	push	r0
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_status;
	cli();                               /*Disable interrupts by clearing I-bit*/
    19f6:	f8 94       	cli
	GICR  &= ~(ONE<<INT2);                 /* Disable external interrupt pin INT0*/
    19f8:	ab e5       	ldi	r26, 0x5B	; 91
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	eb e5       	ldi	r30, 0x5B	; 91
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	8f 7d       	andi	r24, 0xDF	; 223
    1a04:	8c 93       	st	X, r24
	MCUCSR &= ~(ONE<<ISC2);
    1a06:	a4 e5       	ldi	r26, 0x54	; 84
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	e4 e5       	ldi	r30, 0x54	; 84
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	8f 7b       	andi	r24, 0xBF	; 191
    1a12:	8c 93       	st	X, r24
	u8_status |= E_ok;
	return u8_status;
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a16:	0f 90       	pop	r0
    1a18:	cf 91       	pop	r28
    1a1a:	df 91       	pop	r29
    1a1c:	08 95       	ret

00001a1e <INT2_SetEdge>:

ERROR_STATUS INT2_SetEdge(EN_Edge_t en_edge_selection)
{
    1a1e:	df 93       	push	r29
    1a20:	cf 93       	push	r28
    1a22:	00 d0       	rcall	.+0      	; 0x1a24 <INT2_SetEdge+0x6>
    1a24:	00 d0       	rcall	.+0      	; 0x1a26 <INT2_SetEdge+0x8>
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
    1a2a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_status;
	/*I have to check first if it is enabled or not*/
	switch(en_edge_selection)
    1a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	3c 83       	std	Y+4, r19	; 0x04
    1a34:	2b 83       	std	Y+3, r18	; 0x03
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3a:	81 30       	cpi	r24, 0x01	; 1
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	41 f1       	breq	.+80     	; 0x1a90 <INT2_SetEdge+0x72>
    1a40:	2b 81       	ldd	r18, Y+3	; 0x03
    1a42:	3c 81       	ldd	r19, Y+4	; 0x04
    1a44:	22 30       	cpi	r18, 0x02	; 2
    1a46:	31 05       	cpc	r19, r1
    1a48:	2c f4       	brge	.+10     	; 0x1a54 <INT2_SetEdge+0x36>
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4e:	00 97       	sbiw	r24, 0x00	; 0
    1a50:	f9 f0       	breq	.+62     	; 0x1a90 <INT2_SetEdge+0x72>
    1a52:	1b c0       	rjmp	.+54     	; 0x1a8a <INT2_SetEdge+0x6c>
    1a54:	2b 81       	ldd	r18, Y+3	; 0x03
    1a56:	3c 81       	ldd	r19, Y+4	; 0x04
    1a58:	22 30       	cpi	r18, 0x02	; 2
    1a5a:	31 05       	cpc	r19, r1
    1a5c:	31 f0       	breq	.+12     	; 0x1a6a <INT2_SetEdge+0x4c>
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	9c 81       	ldd	r25, Y+4	; 0x04
    1a62:	83 30       	cpi	r24, 0x03	; 3
    1a64:	91 05       	cpc	r25, r1
    1a66:	49 f0       	breq	.+18     	; 0x1a7a <INT2_SetEdge+0x5c>
    1a68:	10 c0       	rjmp	.+32     	; 0x1a8a <INT2_SetEdge+0x6c>
	case ANY_CHANGE:
		                                /*this case is not exist*/
		break;

	case FALLING_EDGE:
		MCUCSR &= ~(ONE<<ISC2);
    1a6a:	a4 e5       	ldi	r26, 0x54	; 84
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e4 e5       	ldi	r30, 0x54	; 84
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	8f 7b       	andi	r24, 0xBF	; 191
    1a76:	8c 93       	st	X, r24
    1a78:	0b c0       	rjmp	.+22     	; 0x1a90 <INT2_SetEdge+0x72>
		break;

	case RISIGING_EDGE:
		MCUCSR |= (ONE<<ISC2);            /* Trigger INT0 with the raising edge*/
    1a7a:	a4 e5       	ldi	r26, 0x54	; 84
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e4 e5       	ldi	r30, 0x54	; 84
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	80 64       	ori	r24, 0x40	; 64
    1a86:	8c 93       	st	X, r24
    1a88:	03 c0       	rjmp	.+6      	; 0x1a90 <INT2_SetEdge+0x72>
		break;

	default:
		u8_status |= E_NOk;
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01
    1a8c:	81 60       	ori	r24, 0x01	; 1
    1a8e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	if(u8_status == E_ok)
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	88 23       	and	r24, r24
    1a94:	11 f4       	brne	.+4      	; 0x1a9a <INT2_SetEdge+0x7c>
	{
		u8_status=E_ok;
    1a96:	19 82       	std	Y+1, r1	; 0x01
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <INT2_SetEdge+0x80>
	}
	else
	{
		u8_status = E_NOk;
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	cf 91       	pop	r28
    1aaa:	df 91       	pop	r29
    1aac:	08 95       	ret

00001aae <__vector_3>:


/********************************ISRS***************************************/

ISR(INT2_vect)
{
    1aae:	1f 92       	push	r1
    1ab0:	0f 92       	push	r0
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	0f 92       	push	r0
    1ab6:	11 24       	eor	r1, r1
    1ab8:	2f 93       	push	r18
    1aba:	3f 93       	push	r19
    1abc:	4f 93       	push	r20
    1abe:	5f 93       	push	r21
    1ac0:	6f 93       	push	r22
    1ac2:	7f 93       	push	r23
    1ac4:	8f 93       	push	r24
    1ac6:	9f 93       	push	r25
    1ac8:	af 93       	push	r26
    1aca:	bf 93       	push	r27
    1acc:	ef 93       	push	r30
    1ace:	ff 93       	push	r31
    1ad0:	df 93       	push	r29
    1ad2:	cf 93       	push	r28
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_Ptr)
    1ad8:	80 91 6e 00 	lds	r24, 0x006E
    1adc:	90 91 6f 00 	lds	r25, 0x006F
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	29 f0       	breq	.+10     	; 0x1aee <__vector_3+0x40>
	{
		// Call the Call Back function in the application after the edge is detected
		(*g_callBackPtr)(); // another method to call the function using pointer to function g_callBackPtr();
    1ae4:	e0 91 6e 00 	lds	r30, 0x006E
    1ae8:	f0 91 6f 00 	lds	r31, 0x006F
    1aec:	09 95       	icall
	}

}
    1aee:	cf 91       	pop	r28
    1af0:	df 91       	pop	r29
    1af2:	ff 91       	pop	r31
    1af4:	ef 91       	pop	r30
    1af6:	bf 91       	pop	r27
    1af8:	af 91       	pop	r26
    1afa:	9f 91       	pop	r25
    1afc:	8f 91       	pop	r24
    1afe:	7f 91       	pop	r23
    1b00:	6f 91       	pop	r22
    1b02:	5f 91       	pop	r21
    1b04:	4f 91       	pop	r20
    1b06:	3f 91       	pop	r19
    1b08:	2f 91       	pop	r18
    1b0a:	0f 90       	pop	r0
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	0f 90       	pop	r0
    1b10:	1f 90       	pop	r1
    1b12:	18 95       	reti

00001b14 <Icu_Init>:
* Return value: u8_error- variable that describe the error status
* Description: Initializes the ICU by initializing the timer
* and enabling the global interrupt
************************************************************************************/
ERROR_STATUS Icu_Init(Icu_cfg_s * Icu_Cfg)
{
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	63 97       	sbiw	r28, 0x13	; 19
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	cd bf       	out	0x3d, r28	; 61
    1b28:	9f 87       	std	Y+15, r25	; 0x0f
    1b2a:	8e 87       	std	Y+14, r24	; 0x0e
	ERROR_STATUS u8_status;
	if(Icu_Cfg == NULL_Ptr)
    1b2c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b2e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b30:	00 97       	sbiw	r24, 0x00	; 0
    1b32:	21 f4       	brne	.+8      	; 0x1b3c <Icu_Init+0x28>
	{
		u8_status |= E_NOk;
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	81 60       	ori	r24, 0x01	; 1
    1b38:	89 83       	std	Y+1, r24	; 0x01
    1b3a:	8e c0       	rjmp	.+284    	; 0x1c58 <Icu_Init+0x144>
			{
				timer0_stru_init.Timer_CH_NO=Timer_0,
				timer0_stru_init.Timer_Mode=TIMER_MODE,
				timer0_stru_init.Timer_Polling_Or_Interrupt=TIMER_POLLING_MODE,
				timer0_stru_init.Timer_Prescaler=T0_PRESCALER_64,
			};
    1b3c:	1a 82       	std	Y+2, r1	; 0x02
    1b3e:	4a 81       	ldd	r20, Y+2	; 0x02
    1b40:	1b 82       	std	Y+3, r1	; 0x03
    1b42:	9b 81       	ldd	r25, Y+3	; 0x03
    1b44:	1c 82       	std	Y+4, r1	; 0x04
    1b46:	2c 81       	ldd	r18, Y+4	; 0x04
    1b48:	83 e0       	ldi	r24, 0x03	; 3
    1b4a:	8d 83       	std	Y+5, r24	; 0x05
    1b4c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b4e:	86 e0       	ldi	r24, 0x06	; 6
    1b50:	fe 01       	movw	r30, r28
    1b52:	32 96       	adiw	r30, 0x02	; 2
    1b54:	df 01       	movw	r26, r30
    1b56:	58 2f       	mov	r21, r24
    1b58:	1d 92       	st	X+, r1
    1b5a:	5a 95       	dec	r21
    1b5c:	e9 f7       	brne	.-6      	; 0x1b58 <Icu_Init+0x44>
    1b5e:	4a 83       	std	Y+2, r20	; 0x02
    1b60:	9b 83       	std	Y+3, r25	; 0x03
    1b62:	2c 83       	std	Y+4, r18	; 0x04
    1b64:	3d 83       	std	Y+5, r19	; 0x05
			{
				timer2_stru_init.Timer_CH_NO=Timer_2,
				timer2_stru_init.Timer_Mode=TIMER_MODE,
				timer2_stru_init.Timer_Polling_Or_Interrupt=TIMER_POLLING_MODE,
				timer2_stru_init.Timer_Prescaler=T2_PRESCALER_1024,
			};
    1b66:	82 e0       	ldi	r24, 0x02	; 2
    1b68:	88 87       	std	Y+8, r24	; 0x08
    1b6a:	48 85       	ldd	r20, Y+8	; 0x08
    1b6c:	19 86       	std	Y+9, r1	; 0x09
    1b6e:	99 85       	ldd	r25, Y+9	; 0x09
    1b70:	1a 86       	std	Y+10, r1	; 0x0a
    1b72:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b74:	87 e0       	ldi	r24, 0x07	; 7
    1b76:	8b 87       	std	Y+11, r24	; 0x0b
    1b78:	3b 85       	ldd	r19, Y+11	; 0x0b
    1b7a:	86 e0       	ldi	r24, 0x06	; 6
    1b7c:	fe 01       	movw	r30, r28
    1b7e:	38 96       	adiw	r30, 0x08	; 8
    1b80:	df 01       	movw	r26, r30
    1b82:	58 2f       	mov	r21, r24
    1b84:	1d 92       	st	X+, r1
    1b86:	5a 95       	dec	r21
    1b88:	e9 f7       	brne	.-6      	; 0x1b84 <Icu_Init+0x70>
    1b8a:	48 87       	std	Y+8, r20	; 0x08
    1b8c:	99 87       	std	Y+9, r25	; 0x09
    1b8e:	2a 87       	std	Y+10, r18	; 0x0a
    1b90:	3b 87       	std	Y+11, r19	; 0x0b

		switch(Icu_Cfg->ICU_Ch_No)
    1b92:	ee 85       	ldd	r30, Y+14	; 0x0e
    1b94:	ff 85       	ldd	r31, Y+15	; 0x0f
    1b96:	80 81       	ld	r24, Z
    1b98:	a8 2f       	mov	r26, r24
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	bb 8b       	std	Y+19, r27	; 0x13
    1b9e:	aa 8b       	std	Y+18, r26	; 0x12
    1ba0:	2a 89       	ldd	r18, Y+18	; 0x12
    1ba2:	3b 89       	ldd	r19, Y+19	; 0x13
    1ba4:	21 30       	cpi	r18, 0x01	; 1
    1ba6:	31 05       	cpc	r19, r1
    1ba8:	81 f0       	breq	.+32     	; 0x1bca <Icu_Init+0xb6>
    1baa:	8a 89       	ldd	r24, Y+18	; 0x12
    1bac:	9b 89       	ldd	r25, Y+19	; 0x13
    1bae:	82 30       	cpi	r24, 0x02	; 2
    1bb0:	91 05       	cpc	r25, r1
    1bb2:	91 f0       	breq	.+36     	; 0x1bd8 <Icu_Init+0xc4>
    1bb4:	aa 89       	ldd	r26, Y+18	; 0x12
    1bb6:	bb 89       	ldd	r27, Y+19	; 0x13
    1bb8:	10 97       	sbiw	r26, 0x00	; 0
    1bba:	a9 f4       	brne	.+42     	; 0x1be6 <Icu_Init+0xd2>
		{
		case ICU_CH0:
			u8_status |= INT0_Init(RISIGING_EDGE);
    1bbc:	83 e0       	ldi	r24, 0x03	; 3
    1bbe:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <INT0_Init>
    1bc2:	99 81       	ldd	r25, Y+1	; 0x01
    1bc4:	89 2b       	or	r24, r25
    1bc6:	89 83       	std	Y+1, r24	; 0x01
    1bc8:	11 c0       	rjmp	.+34     	; 0x1bec <Icu_Init+0xd8>
			break;

		case ICU_CH1:
			u8_status |= INT1_Init(RISIGING_EDGE);
    1bca:	83 e0       	ldi	r24, 0x03	; 3
    1bcc:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <INT1_Init>
    1bd0:	99 81       	ldd	r25, Y+1	; 0x01
    1bd2:	89 2b       	or	r24, r25
    1bd4:	89 83       	std	Y+1, r24	; 0x01
    1bd6:	0a c0       	rjmp	.+20     	; 0x1bec <Icu_Init+0xd8>
			break;

		case ICU_CH2:
			u8_status |= INT2_Init(RISIGING_EDGE);
    1bd8:	83 e0       	ldi	r24, 0x03	; 3
    1bda:	0e 94 84 0c 	call	0x1908	; 0x1908 <INT2_Init>
    1bde:	99 81       	ldd	r25, Y+1	; 0x01
    1be0:	89 2b       	or	r24, r25
    1be2:	89 83       	std	Y+1, r24	; 0x01
    1be4:	03 c0       	rjmp	.+6      	; 0x1bec <Icu_Init+0xd8>
			break;

		default:
			u8_status|= E_NOk;
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	81 60       	ori	r24, 0x01	; 1
    1bea:	89 83       	std	Y+1, r24	; 0x01
			break;
		}

		switch(Icu_Cfg->ICU_Ch_Timer)
    1bec:	ee 85       	ldd	r30, Y+14	; 0x0e
    1bee:	ff 85       	ldd	r31, Y+15	; 0x0f
    1bf0:	81 81       	ldd	r24, Z+1	; 0x01
    1bf2:	28 2f       	mov	r18, r24
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	39 8b       	std	Y+17, r19	; 0x11
    1bf8:	28 8b       	std	Y+16, r18	; 0x10
    1bfa:	88 89       	ldd	r24, Y+16	; 0x10
    1bfc:	99 89       	ldd	r25, Y+17	; 0x11
    1bfe:	81 30       	cpi	r24, 0x01	; 1
    1c00:	91 05       	cpc	r25, r1
    1c02:	99 f0       	breq	.+38     	; 0x1c2a <Icu_Init+0x116>
    1c04:	a8 89       	ldd	r26, Y+16	; 0x10
    1c06:	b9 89       	ldd	r27, Y+17	; 0x11
    1c08:	a2 30       	cpi	r26, 0x02	; 2
    1c0a:	b1 05       	cpc	r27, r1
    1c0c:	91 f0       	breq	.+36     	; 0x1c32 <Icu_Init+0x11e>
    1c0e:	28 89       	ldd	r18, Y+16	; 0x10
    1c10:	39 89       	ldd	r19, Y+17	; 0x11
    1c12:	21 15       	cp	r18, r1
    1c14:	31 05       	cpc	r19, r1
    1c16:	b1 f4       	brne	.+44     	; 0x1c44 <Icu_Init+0x130>
		{
		case Timer_0:
			u8_status |= Timer_Init(&timer0_stru_init);
    1c18:	ce 01       	movw	r24, r28
    1c1a:	02 96       	adiw	r24, 0x02	; 2
    1c1c:	0e 94 44 09 	call	0x1288	; 0x1288 <Timer_Init>
    1c20:	98 2f       	mov	r25, r24
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	89 2b       	or	r24, r25
    1c26:	89 83       	std	Y+1, r24	; 0x01
    1c28:	10 c0       	rjmp	.+32     	; 0x1c4a <Icu_Init+0x136>
			break;

		case Timer_1:
			/*cauldn't use timer1 since it used to perform another functionality*/
			u8_status |= E_NOk;
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	81 60       	ori	r24, 0x01	; 1
    1c2e:	89 83       	std	Y+1, r24	; 0x01
    1c30:	0c c0       	rjmp	.+24     	; 0x1c4a <Icu_Init+0x136>
			break;

		case Timer_2:
			u8_status |= Timer_Init(&timer2_stru_init);
    1c32:	ce 01       	movw	r24, r28
    1c34:	08 96       	adiw	r24, 0x08	; 8
    1c36:	0e 94 44 09 	call	0x1288	; 0x1288 <Timer_Init>
    1c3a:	98 2f       	mov	r25, r24
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	89 2b       	or	r24, r25
    1c40:	89 83       	std	Y+1, r24	; 0x01
    1c42:	03 c0       	rjmp	.+6      	; 0x1c4a <Icu_Init+0x136>
			break;

		default:
			u8_status |= E_NOk;
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
    1c46:	81 60       	ori	r24, 0x01	; 1
    1c48:	89 83       	std	Y+1, r24	; 0x01
			break;
		}

		if(u8_status == E_ok)
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
    1c4c:	88 23       	and	r24, r24
    1c4e:	11 f4       	brne	.+4      	; 0x1c54 <Icu_Init+0x140>
		{
			u8_status = E_ok;
    1c50:	19 82       	std	Y+1, r1	; 0x01
    1c52:	02 c0       	rjmp	.+4      	; 0x1c58 <Icu_Init+0x144>
		}
		else
		{
			u8_status = E_NOk;
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return u8_status;
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c5a:	63 96       	adiw	r28, 0x13	; 19
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	f8 94       	cli
    1c60:	de bf       	out	0x3e, r29	; 62
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	cd bf       	out	0x3d, r28	; 61
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	08 95       	ret

00001c6c <Icu_ReadTime>:
* from falling edge to rising edge
* Return value: u8_error- variable that describe the error status
* Description: calculates the time between 2 edges
************************************************************************************/
ERROR_STATUS Icu_ReadTime(uint8_t Icu_Channel, uint8_t Icu_EdgeToEdge, uint32_t * Icu_Time)
{
    1c6c:	df 93       	push	r29
    1c6e:	cf 93       	push	r28
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
    1c74:	2b 97       	sbiw	r28, 0x0b	; 11
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	f8 94       	cli
    1c7a:	de bf       	out	0x3e, r29	; 62
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	cd bf       	out	0x3d, r28	; 61
    1c80:	8a 83       	std	Y+2, r24	; 0x02
    1c82:	6b 83       	std	Y+3, r22	; 0x03
    1c84:	5d 83       	std	Y+5, r21	; 0x05
    1c86:	4c 83       	std	Y+4, r20	; 0x04
	ERROR_STATUS u8_status;
	switch(Icu_Channel)
    1c88:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	3b 87       	std	Y+11, r19	; 0x0b
    1c90:	2a 87       	std	Y+10, r18	; 0x0a
    1c92:	4a 85       	ldd	r20, Y+10	; 0x0a
    1c94:	5b 85       	ldd	r21, Y+11	; 0x0b
    1c96:	41 30       	cpi	r20, 0x01	; 1
    1c98:	51 05       	cpc	r21, r1
    1c9a:	09 f4       	brne	.+2      	; 0x1c9e <Icu_ReadTime+0x32>
    1c9c:	7e c0       	rjmp	.+252    	; 0x1d9a <Icu_ReadTime+0x12e>
    1c9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ca0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ca2:	82 30       	cpi	r24, 0x02	; 2
    1ca4:	91 05       	cpc	r25, r1
    1ca6:	09 f4       	brne	.+2      	; 0x1caa <Icu_ReadTime+0x3e>
    1ca8:	7c c0       	rjmp	.+248    	; 0x1da2 <Icu_ReadTime+0x136>
    1caa:	2a 85       	ldd	r18, Y+10	; 0x0a
    1cac:	3b 85       	ldd	r19, Y+11	; 0x0b
    1cae:	21 15       	cp	r18, r1
    1cb0:	31 05       	cpc	r19, r1
    1cb2:	09 f0       	breq	.+2      	; 0x1cb6 <Icu_ReadTime+0x4a>
    1cb4:	e8 c0       	rjmp	.+464    	; 0x1e86 <Icu_ReadTime+0x21a>
	{
	case Timer_0:
		switch(Icu_EdgeToEdge)
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	48 2f       	mov	r20, r24
    1cba:	50 e0       	ldi	r21, 0x00	; 0
    1cbc:	59 87       	std	Y+9, r21	; 0x09
    1cbe:	48 87       	std	Y+8, r20	; 0x08
    1cc0:	88 85       	ldd	r24, Y+8	; 0x08
    1cc2:	99 85       	ldd	r25, Y+9	; 0x09
    1cc4:	81 30       	cpi	r24, 0x01	; 1
    1cc6:	91 05       	cpc	r25, r1
    1cc8:	31 f1       	breq	.+76     	; 0x1d16 <Icu_ReadTime+0xaa>
    1cca:	28 85       	ldd	r18, Y+8	; 0x08
    1ccc:	39 85       	ldd	r19, Y+9	; 0x09
    1cce:	22 30       	cpi	r18, 0x02	; 2
    1cd0:	31 05       	cpc	r19, r1
    1cd2:	e1 f1       	breq	.+120    	; 0x1d4c <Icu_ReadTime+0xe0>
    1cd4:	48 85       	ldd	r20, Y+8	; 0x08
    1cd6:	59 85       	ldd	r21, Y+9	; 0x09
    1cd8:	41 15       	cp	r20, r1
    1cda:	51 05       	cpc	r21, r1
    1cdc:	09 f0       	breq	.+2      	; 0x1ce0 <Icu_ReadTime+0x74>
    1cde:	59 c0       	rjmp	.+178    	; 0x1d92 <Icu_ReadTime+0x126>
		{
		case ICU_RISE_TO_RISE:
			Icu_setCallBack(Rising_EdgeFunc);
    1ce0:	8b e7       	ldi	r24, 0x7B	; 123
    1ce2:	9f e0       	ldi	r25, 0x0F	; 15
    1ce4:	0e 94 57 0f 	call	0x1eae	; 0x1eae <Icu_setCallBack>
			*Icu_Time=(g16_timePeriod)*US_PER_TICK;
    1ce8:	80 91 78 00 	lds	r24, 0x0078
    1cec:	90 91 79 00 	lds	r25, 0x0079
    1cf0:	00 24       	eor	r0, r0
    1cf2:	96 95       	lsr	r25
    1cf4:	87 95       	ror	r24
    1cf6:	07 94       	ror	r0
    1cf8:	96 95       	lsr	r25
    1cfa:	87 95       	ror	r24
    1cfc:	07 94       	ror	r0
    1cfe:	98 2f       	mov	r25, r24
    1d00:	80 2d       	mov	r24, r0
    1d02:	cc 01       	movw	r24, r24
    1d04:	a0 e0       	ldi	r26, 0x00	; 0
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	ec 81       	ldd	r30, Y+4	; 0x04
    1d0a:	fd 81       	ldd	r31, Y+5	; 0x05
    1d0c:	80 83       	st	Z, r24
    1d0e:	91 83       	std	Z+1, r25	; 0x01
    1d10:	a2 83       	std	Z+2, r26	; 0x02
    1d12:	b3 83       	std	Z+3, r27	; 0x03
    1d14:	bb c0       	rjmp	.+374    	; 0x1e8c <Icu_ReadTime+0x220>
			break;

		case ICU_RISE_TO_FALL:
			Icu_setCallBack(Rising_EdgeFunc);
    1d16:	8b e7       	ldi	r24, 0x7B	; 123
    1d18:	9f e0       	ldi	r25, 0x0F	; 15
    1d1a:	0e 94 57 0f 	call	0x1eae	; 0x1eae <Icu_setCallBack>
			*Icu_Time=(g16_timeHigh)*US_PER_TICK;
    1d1e:	80 91 74 00 	lds	r24, 0x0074
    1d22:	90 91 75 00 	lds	r25, 0x0075
    1d26:	00 24       	eor	r0, r0
    1d28:	96 95       	lsr	r25
    1d2a:	87 95       	ror	r24
    1d2c:	07 94       	ror	r0
    1d2e:	96 95       	lsr	r25
    1d30:	87 95       	ror	r24
    1d32:	07 94       	ror	r0
    1d34:	98 2f       	mov	r25, r24
    1d36:	80 2d       	mov	r24, r0
    1d38:	cc 01       	movw	r24, r24
    1d3a:	a0 e0       	ldi	r26, 0x00	; 0
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	ec 81       	ldd	r30, Y+4	; 0x04
    1d40:	fd 81       	ldd	r31, Y+5	; 0x05
    1d42:	80 83       	st	Z, r24
    1d44:	91 83       	std	Z+1, r25	; 0x01
    1d46:	a2 83       	std	Z+2, r26	; 0x02
    1d48:	b3 83       	std	Z+3, r27	; 0x03
    1d4a:	a0 c0       	rjmp	.+320    	; 0x1e8c <Icu_ReadTime+0x220>
			break;

		case ICU_FALE_TO_RISE:
			Icu_setCallBack(Rising_EdgeFunc);
    1d4c:	8b e7       	ldi	r24, 0x7B	; 123
    1d4e:	9f e0       	ldi	r25, 0x0F	; 15
    1d50:	0e 94 57 0f 	call	0x1eae	; 0x1eae <Icu_setCallBack>
			*Icu_Time=(g16_timePeriod-g16_timeHigh)*US_PER_TICK;
    1d54:	20 91 78 00 	lds	r18, 0x0078
    1d58:	30 91 79 00 	lds	r19, 0x0079
    1d5c:	80 91 74 00 	lds	r24, 0x0074
    1d60:	90 91 75 00 	lds	r25, 0x0075
    1d64:	a9 01       	movw	r20, r18
    1d66:	48 1b       	sub	r20, r24
    1d68:	59 0b       	sbc	r21, r25
    1d6a:	ca 01       	movw	r24, r20
    1d6c:	00 24       	eor	r0, r0
    1d6e:	96 95       	lsr	r25
    1d70:	87 95       	ror	r24
    1d72:	07 94       	ror	r0
    1d74:	96 95       	lsr	r25
    1d76:	87 95       	ror	r24
    1d78:	07 94       	ror	r0
    1d7a:	98 2f       	mov	r25, r24
    1d7c:	80 2d       	mov	r24, r0
    1d7e:	cc 01       	movw	r24, r24
    1d80:	a0 e0       	ldi	r26, 0x00	; 0
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	ec 81       	ldd	r30, Y+4	; 0x04
    1d86:	fd 81       	ldd	r31, Y+5	; 0x05
    1d88:	80 83       	st	Z, r24
    1d8a:	91 83       	std	Z+1, r25	; 0x01
    1d8c:	a2 83       	std	Z+2, r26	; 0x02
    1d8e:	b3 83       	std	Z+3, r27	; 0x03
    1d90:	7d c0       	rjmp	.+250    	; 0x1e8c <Icu_ReadTime+0x220>
			break;

		default:
			u8_status |= E_NOk;
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	81 60       	ori	r24, 0x01	; 1
    1d96:	89 83       	std	Y+1, r24	; 0x01
    1d98:	79 c0       	rjmp	.+242    	; 0x1e8c <Icu_ReadTime+0x220>
		}
	break;

	case Timer_1:
		/*no need to handle timer1 for ICU since it is used to perform another functionality*/
		u8_status |= E_NOk;
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	81 60       	ori	r24, 0x01	; 1
    1d9e:	89 83       	std	Y+1, r24	; 0x01
    1da0:	75 c0       	rjmp	.+234    	; 0x1e8c <Icu_ReadTime+0x220>
	break;

	case Timer_2:
		switch(Icu_EdgeToEdge)
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	28 2f       	mov	r18, r24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	3f 83       	std	Y+7, r19	; 0x07
    1daa:	2e 83       	std	Y+6, r18	; 0x06
    1dac:	4e 81       	ldd	r20, Y+6	; 0x06
    1dae:	5f 81       	ldd	r21, Y+7	; 0x07
    1db0:	41 30       	cpi	r20, 0x01	; 1
    1db2:	51 05       	cpc	r21, r1
    1db4:	31 f1       	breq	.+76     	; 0x1e02 <Icu_ReadTime+0x196>
    1db6:	8e 81       	ldd	r24, Y+6	; 0x06
    1db8:	9f 81       	ldd	r25, Y+7	; 0x07
    1dba:	82 30       	cpi	r24, 0x02	; 2
    1dbc:	91 05       	cpc	r25, r1
    1dbe:	e1 f1       	breq	.+120    	; 0x1e38 <Icu_ReadTime+0x1cc>
    1dc0:	2e 81       	ldd	r18, Y+6	; 0x06
    1dc2:	3f 81       	ldd	r19, Y+7	; 0x07
    1dc4:	21 15       	cp	r18, r1
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	09 f0       	breq	.+2      	; 0x1dcc <Icu_ReadTime+0x160>
    1dca:	59 c0       	rjmp	.+178    	; 0x1e7e <Icu_ReadTime+0x212>
		{
		case ICU_RISE_TO_RISE:
			//u8_status |= Icu_setCallBack(Rising_EdgeFunc);
			Icu_setCallBack(Rising_EdgeFunc);
    1dcc:	8b e7       	ldi	r24, 0x7B	; 123
    1dce:	9f e0       	ldi	r25, 0x0F	; 15
    1dd0:	0e 94 57 0f 	call	0x1eae	; 0x1eae <Icu_setCallBack>
			*Icu_Time=(g16_timePeriod)*US_PER_TICK;
    1dd4:	80 91 78 00 	lds	r24, 0x0078
    1dd8:	90 91 79 00 	lds	r25, 0x0079
    1ddc:	00 24       	eor	r0, r0
    1dde:	96 95       	lsr	r25
    1de0:	87 95       	ror	r24
    1de2:	07 94       	ror	r0
    1de4:	96 95       	lsr	r25
    1de6:	87 95       	ror	r24
    1de8:	07 94       	ror	r0
    1dea:	98 2f       	mov	r25, r24
    1dec:	80 2d       	mov	r24, r0
    1dee:	cc 01       	movw	r24, r24
    1df0:	a0 e0       	ldi	r26, 0x00	; 0
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	ec 81       	ldd	r30, Y+4	; 0x04
    1df6:	fd 81       	ldd	r31, Y+5	; 0x05
    1df8:	80 83       	st	Z, r24
    1dfa:	91 83       	std	Z+1, r25	; 0x01
    1dfc:	a2 83       	std	Z+2, r26	; 0x02
    1dfe:	b3 83       	std	Z+3, r27	; 0x03
    1e00:	45 c0       	rjmp	.+138    	; 0x1e8c <Icu_ReadTime+0x220>
			break;

		case ICU_RISE_TO_FALL:
			//u8_status |= Icu_setCallBack(Rising_EdgeFunc);
			Icu_setCallBack(Rising_EdgeFunc);
    1e02:	8b e7       	ldi	r24, 0x7B	; 123
    1e04:	9f e0       	ldi	r25, 0x0F	; 15
    1e06:	0e 94 57 0f 	call	0x1eae	; 0x1eae <Icu_setCallBack>
			*Icu_Time=(g16_timeHigh)*US_PER_TICK;
    1e0a:	80 91 74 00 	lds	r24, 0x0074
    1e0e:	90 91 75 00 	lds	r25, 0x0075
    1e12:	00 24       	eor	r0, r0
    1e14:	96 95       	lsr	r25
    1e16:	87 95       	ror	r24
    1e18:	07 94       	ror	r0
    1e1a:	96 95       	lsr	r25
    1e1c:	87 95       	ror	r24
    1e1e:	07 94       	ror	r0
    1e20:	98 2f       	mov	r25, r24
    1e22:	80 2d       	mov	r24, r0
    1e24:	cc 01       	movw	r24, r24
    1e26:	a0 e0       	ldi	r26, 0x00	; 0
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	ec 81       	ldd	r30, Y+4	; 0x04
    1e2c:	fd 81       	ldd	r31, Y+5	; 0x05
    1e2e:	80 83       	st	Z, r24
    1e30:	91 83       	std	Z+1, r25	; 0x01
    1e32:	a2 83       	std	Z+2, r26	; 0x02
    1e34:	b3 83       	std	Z+3, r27	; 0x03
    1e36:	2a c0       	rjmp	.+84     	; 0x1e8c <Icu_ReadTime+0x220>
			break;

		case ICU_FALE_TO_RISE:
			//u8_status |= Icu_setCallBack(Rising_EdgeFunc);
			Icu_setCallBack(Rising_EdgeFunc);
    1e38:	8b e7       	ldi	r24, 0x7B	; 123
    1e3a:	9f e0       	ldi	r25, 0x0F	; 15
    1e3c:	0e 94 57 0f 	call	0x1eae	; 0x1eae <Icu_setCallBack>
			*Icu_Time=(g16_timePeriod-g16_timeHigh)*US_PER_TICK;
    1e40:	20 91 78 00 	lds	r18, 0x0078
    1e44:	30 91 79 00 	lds	r19, 0x0079
    1e48:	80 91 74 00 	lds	r24, 0x0074
    1e4c:	90 91 75 00 	lds	r25, 0x0075
    1e50:	a9 01       	movw	r20, r18
    1e52:	48 1b       	sub	r20, r24
    1e54:	59 0b       	sbc	r21, r25
    1e56:	ca 01       	movw	r24, r20
    1e58:	00 24       	eor	r0, r0
    1e5a:	96 95       	lsr	r25
    1e5c:	87 95       	ror	r24
    1e5e:	07 94       	ror	r0
    1e60:	96 95       	lsr	r25
    1e62:	87 95       	ror	r24
    1e64:	07 94       	ror	r0
    1e66:	98 2f       	mov	r25, r24
    1e68:	80 2d       	mov	r24, r0
    1e6a:	cc 01       	movw	r24, r24
    1e6c:	a0 e0       	ldi	r26, 0x00	; 0
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	ec 81       	ldd	r30, Y+4	; 0x04
    1e72:	fd 81       	ldd	r31, Y+5	; 0x05
    1e74:	80 83       	st	Z, r24
    1e76:	91 83       	std	Z+1, r25	; 0x01
    1e78:	a2 83       	std	Z+2, r26	; 0x02
    1e7a:	b3 83       	std	Z+3, r27	; 0x03
    1e7c:	07 c0       	rjmp	.+14     	; 0x1e8c <Icu_ReadTime+0x220>
			break;

		default:
			u8_status |= E_NOk;
    1e7e:	89 81       	ldd	r24, Y+1	; 0x01
    1e80:	81 60       	ori	r24, 0x01	; 1
    1e82:	89 83       	std	Y+1, r24	; 0x01
    1e84:	03 c0       	rjmp	.+6      	; 0x1e8c <Icu_ReadTime+0x220>
			break;
		}
	break;

	default:
		u8_status |= E_NOk;
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	81 60       	ori	r24, 0x01	; 1
    1e8a:	89 83       	std	Y+1, r24	; 0x01
	}

	if(u8_status == E_ok)
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	88 23       	and	r24, r24
    1e90:	11 f4       	brne	.+4      	; 0x1e96 <Icu_ReadTime+0x22a>
	{
		u8_status = E_ok;
    1e92:	19 82       	std	Y+1, r1	; 0x01
    1e94:	02 c0       	rjmp	.+4      	; 0x1e9a <Icu_ReadTime+0x22e>
	}
	else
	{
		u8_status = E_NOk;
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8_status;
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e9c:	2b 96       	adiw	r28, 0x0b	; 11
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	f8 94       	cli
    1ea2:	de bf       	out	0x3e, r29	; 62
    1ea4:	0f be       	out	0x3f, r0	; 63
    1ea6:	cd bf       	out	0x3d, r28	; 61
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	08 95       	ret

00001eae <Icu_setCallBack>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description: this function sets the pointer to the callbacked function
************************************************************************************/
ERROR_STATUS Icu_setCallBack(void(*a_ptr)(void))
{
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	00 d0       	rcall	.+0      	; 0x1eb4 <Icu_setCallBack+0x6>
    1eb4:	0f 92       	push	r0
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	9b 83       	std	Y+3, r25	; 0x03
    1ebc:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATUS u8_status;
	if(a_ptr == NULL_Ptr)
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec2:	00 97       	sbiw	r24, 0x00	; 0
    1ec4:	21 f4       	brne	.+8      	; 0x1ece <Icu_setCallBack+0x20>
	{
		u8_status |= E_NOk;
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
    1ec8:	81 60       	ori	r24, 0x01	; 1
    1eca:	89 83       	std	Y+1, r24	; 0x01
    1ecc:	06 c0       	rjmp	.+12     	; 0x1eda <Icu_setCallBack+0x2c>
	}
	else
	{
		/* Save the address of the Call back function in a global variable */
		g_callBackPtr = a_ptr;
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed2:	90 93 6f 00 	sts	0x006F, r25
    1ed6:	80 93 6e 00 	sts	0x006E, r24
		u8_status |= E_ok;
	}

	if(u8_status == E_ok)
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	88 23       	and	r24, r24
    1ede:	11 f4       	brne	.+4      	; 0x1ee4 <Icu_setCallBack+0x36>
	{
		u8_status = E_ok;
    1ee0:	19 82       	std	Y+1, r1	; 0x01
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <Icu_setCallBack+0x3a>
	}
	else
	{
		u8_status = E_NOk;
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8_status;
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	cf 91       	pop	r28
    1ef2:	df 91       	pop	r29
    1ef4:	08 95       	ret

00001ef6 <Rising_EdgeFunc>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description: this function will be called when the interrupt occurs
************************************************************************************/
void Rising_EdgeFunc(void)
{
    1ef6:	df 93       	push	r29
    1ef8:	cf 93       	push	r28
    1efa:	0f 92       	push	r0
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
	ERROR_STATUS u8_status;
	g8_edgeCount++;
    1f00:	80 91 76 00 	lds	r24, 0x0076
    1f04:	8f 5f       	subi	r24, 0xFF	; 255
    1f06:	80 93 76 00 	sts	0x0076, r24
	if(g8_edgeCount == FIRST_ENTRY)
    1f0a:	80 91 76 00 	lds	r24, 0x0076
    1f0e:	81 30       	cpi	r24, 0x01	; 1
    1f10:	c1 f4       	brne	.+48     	; 0x1f42 <Rising_EdgeFunc+0x4c>
	{
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		u8_status |= Timer_Clear(Timer_2);
    1f12:	82 e0       	ldi	r24, 0x02	; 2
    1f14:	0e 94 2a 0b 	call	0x1654	; 0x1654 <Timer_Clear>
    1f18:	98 2f       	mov	r25, r24
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	89 2b       	or	r24, r25
    1f1e:	89 83       	std	Y+1, r24	; 0x01
		u8_status |= Timer_Start(Timer_2,TIMER0_NUMBER_OF_TICKS);
    1f20:	82 e0       	ldi	r24, 0x02	; 2
    1f22:	60 e0       	ldi	r22, 0x00	; 0
    1f24:	71 e0       	ldi	r23, 0x01	; 1
    1f26:	0e 94 c3 09 	call	0x1386	; 0x1386 <Timer_Start>
    1f2a:	98 2f       	mov	r25, r24
    1f2c:	89 81       	ldd	r24, Y+1	; 0x01
    1f2e:	89 2b       	or	r24, r25
    1f30:	89 83       	std	Y+1, r24	; 0x01
		/* Detect falling edge */
		u8_status |= INT2_SetEdge(FALLING_EDGE);
    1f32:	82 e0       	ldi	r24, 0x02	; 2
    1f34:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <INT2_SetEdge>
    1f38:	98 2f       	mov	r25, r24
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
    1f3c:	89 2b       	or	r24, r25
    1f3e:	89 83       	std	Y+1, r24	; 0x01
    1f40:	53 c0       	rjmp	.+166    	; 0x1fe8 <Rising_EdgeFunc+0xf2>
	}
	else if(g8_edgeCount == SECOND_ENTRY)
    1f42:	80 91 76 00 	lds	r24, 0x0076
    1f46:	82 30       	cpi	r24, 0x02	; 2
    1f48:	91 f4       	brne	.+36     	; 0x1f6e <Rising_EdgeFunc+0x78>
	{
		/* Store the High time value */
		u8_status |= Timer_GetValue(Timer_2,&g16_timeHigh);
    1f4a:	24 e7       	ldi	r18, 0x74	; 116
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	82 e0       	ldi	r24, 0x02	; 2
    1f50:	b9 01       	movw	r22, r18
    1f52:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <Timer_GetValue>
    1f56:	98 2f       	mov	r25, r24
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
    1f5a:	89 2b       	or	r24, r25
    1f5c:	89 83       	std	Y+1, r24	; 0x01
		/* Detect rising edge */
		u8_status |= INT2_SetEdge(RISIGING_EDGE);
    1f5e:	83 e0       	ldi	r24, 0x03	; 3
    1f60:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <INT2_SetEdge>
    1f64:	98 2f       	mov	r25, r24
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
    1f68:	89 2b       	or	r24, r25
    1f6a:	89 83       	std	Y+1, r24	; 0x01
    1f6c:	3d c0       	rjmp	.+122    	; 0x1fe8 <Rising_EdgeFunc+0xf2>
	}
	else if(g8_edgeCount == THIRD_ENTRY)
    1f6e:	80 91 76 00 	lds	r24, 0x0076
    1f72:	83 30       	cpi	r24, 0x03	; 3
    1f74:	91 f4       	brne	.+36     	; 0x1f9a <Rising_EdgeFunc+0xa4>
	{
		/* Store the Period time value */
		u8_status |= Timer_GetValue(Timer_2,&g16_timePeriod);
    1f76:	28 e7       	ldi	r18, 0x78	; 120
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	82 e0       	ldi	r24, 0x02	; 2
    1f7c:	b9 01       	movw	r22, r18
    1f7e:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <Timer_GetValue>
    1f82:	98 2f       	mov	r25, r24
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	89 2b       	or	r24, r25
    1f88:	89 83       	std	Y+1, r24	; 0x01
		/* Detect falling edge */
		u8_status |= INT2_SetEdge(FALLING_EDGE);
    1f8a:	82 e0       	ldi	r24, 0x02	; 2
    1f8c:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <INT2_SetEdge>
    1f90:	98 2f       	mov	r25, r24
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	89 2b       	or	r24, r25
    1f96:	89 83       	std	Y+1, r24	; 0x01
    1f98:	27 c0       	rjmp	.+78     	; 0x1fe8 <Rising_EdgeFunc+0xf2>
	}
	else if(g8_edgeCount == FORTH_ENTRY)
    1f9a:	80 91 76 00 	lds	r24, 0x0076
    1f9e:	84 30       	cpi	r24, 0x04	; 4
    1fa0:	19 f5       	brne	.+70     	; 0x1fe8 <Rising_EdgeFunc+0xf2>
	{
		/* Store the Period time value + High time value */
		g16_timePeriodPlusHigh = TCNT0;
    1fa2:	e2 e5       	ldi	r30, 0x52	; 82
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	88 2f       	mov	r24, r24
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	90 93 73 00 	sts	0x0073, r25
    1fb0:	80 93 72 00 	sts	0x0072, r24
		u8_status |= Timer_GetValue(Timer_2,&g16_timePeriodPlusHigh);
    1fb4:	22 e7       	ldi	r18, 0x72	; 114
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	82 e0       	ldi	r24, 0x02	; 2
    1fba:	b9 01       	movw	r22, r18
    1fbc:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <Timer_GetValue>
    1fc0:	98 2f       	mov	r25, r24
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
    1fc4:	89 2b       	or	r24, r25
    1fc6:	89 83       	std	Y+1, r24	; 0x01
		/* Clear the timer counter register to start measurements again */
		u8_status |= Timer_Clear(Timer_2);
    1fc8:	82 e0       	ldi	r24, 0x02	; 2
    1fca:	0e 94 2a 0b 	call	0x1654	; 0x1654 <Timer_Clear>
    1fce:	98 2f       	mov	r25, r24
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	89 2b       	or	r24, r25
    1fd4:	89 83       	std	Y+1, r24	; 0x01
		/* Detect rising edge */
		u8_status |= INT2_SetEdge(RISIGING_EDGE);
    1fd6:	83 e0       	ldi	r24, 0x03	; 3
    1fd8:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <INT2_SetEdge>
    1fdc:	98 2f       	mov	r25, r24
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	89 2b       	or	r24, r25
    1fe2:	89 83       	std	Y+1, r24	; 0x01
		g8_edgeCount=CLEAR;
    1fe4:	10 92 76 00 	sts	0x0076, r1
	}

	if(u8_status == E_ok)
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	88 23       	and	r24, r24
    1fec:	11 f4       	brne	.+4      	; 0x1ff2 <Rising_EdgeFunc+0xfc>
	{
		u8_status = E_ok;
    1fee:	19 82       	std	Y+1, r1	; 0x01
    1ff0:	02 c0       	rjmp	.+4      	; 0x1ff6 <Rising_EdgeFunc+0x100>
	}
	else
	{
		u8_status = E_NOk;
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	89 83       	std	Y+1, r24	; 0x01
	}

	/*this line will be hashed tell the coming modification*/
	/*return u8_status;*/
}
    1ff6:	0f 90       	pop	r0
    1ff8:	cf 91       	pop	r28
    1ffa:	df 91       	pop	r29
    1ffc:	08 95       	ret

00001ffe <Us_Init>:
#include "Us.h"
#define ONE_MS 1
#define ULTRA_SONIC_SCALING 58

ERROR_STATUS Us_Init(void)
{
    1ffe:	df 93       	push	r29
    2000:	cf 93       	push	r28
    2002:	00 d0       	rcall	.+0      	; 0x2004 <Us_Init+0x6>
    2004:	00 d0       	rcall	.+0      	; 0x2006 <Us_Init+0x8>
    2006:	00 d0       	rcall	.+0      	; 0x2008 <Us_Init+0xa>
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
	DIO_Cfg_s trigger_init=
	{
			trigger_init.GPIO=GPIOA,
			trigger_init.pins=BIT0,
			trigger_init.dir=OUTPUT,
	};
    200c:	1a 82       	std	Y+2, r1	; 0x02
    200e:	2a 81       	ldd	r18, Y+2	; 0x02
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	8b 83       	std	Y+3, r24	; 0x03
    2014:	9b 81       	ldd	r25, Y+3	; 0x03
    2016:	8f ef       	ldi	r24, 0xFF	; 255
    2018:	8c 83       	std	Y+4, r24	; 0x04
    201a:	8c 81       	ldd	r24, Y+4	; 0x04
    201c:	2a 83       	std	Y+2, r18	; 0x02
    201e:	9b 83       	std	Y+3, r25	; 0x03
    2020:	8c 83       	std	Y+4, r24	; 0x04
	DIO_init (&trigger_init);
    2022:	ce 01       	movw	r24, r28
    2024:	02 96       	adiw	r24, 0x02	; 2
    2026:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_init>
	DIO_Write (GPIOA, BIT0, LOW);
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	61 e0       	ldi	r22, 0x01	; 1
    202e:	40 e0       	ldi	r20, 0x00	; 0
    2030:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>

	Icu_cfg_s echo_init={ICU_CH2,ICU_TIMER_CH2};    /*INT2,TIMER2*/
    2034:	82 e0       	ldi	r24, 0x02	; 2
    2036:	8d 83       	std	Y+5, r24	; 0x05
    2038:	82 e0       	ldi	r24, 0x02	; 2
    203a:	8e 83       	std	Y+6, r24	; 0x06
	Icu_Init(&echo_init);
    203c:	ce 01       	movw	r24, r28
    203e:	05 96       	adiw	r24, 0x05	; 5
    2040:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <Icu_Init>
	u8_status=E_ok;
    2044:	19 82       	std	Y+1, r1	; 0x01
	return u8_status;
    2046:	89 81       	ldd	r24, Y+1	; 0x01

}
    2048:	26 96       	adiw	r28, 0x06	; 6
    204a:	0f b6       	in	r0, 0x3f	; 63
    204c:	f8 94       	cli
    204e:	de bf       	out	0x3e, r29	; 62
    2050:	0f be       	out	0x3f, r0	; 63
    2052:	cd bf       	out	0x3d, r28	; 61
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	08 95       	ret

0000205a <Us_Trigger>:

/*****************************************************************************************/

ERROR_STATUS Us_Trigger(void)
{
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	0f 92       	push	r0
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_status;
	softwareDelayMs(ONE_MS);
    2064:	61 e0       	ldi	r22, 0x01	; 1
    2066:	70 e0       	ldi	r23, 0x00	; 0
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	0e 94 dd 13 	call	0x27ba	; 0x27ba <softwareDelayMs>
	DIO_Write (GPIOA, BIT0, HIGH);
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	61 e0       	ldi	r22, 0x01	; 1
    2074:	4f ef       	ldi	r20, 0xFF	; 255
    2076:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
	softwareDelayMs(ONE_MS);
    207a:	61 e0       	ldi	r22, 0x01	; 1
    207c:	70 e0       	ldi	r23, 0x00	; 0
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	0e 94 dd 13 	call	0x27ba	; 0x27ba <softwareDelayMs>
	DIO_Write (GPIOA, BIT0, LOW);
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	61 e0       	ldi	r22, 0x01	; 1
    208a:	40 e0       	ldi	r20, 0x00	; 0
    208c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
	u8_status=E_ok;
    2090:	19 82       	std	Y+1, r1	; 0x01
	return u8_status;
    2092:	89 81       	ldd	r24, Y+1	; 0x01


}
    2094:	0f 90       	pop	r0
    2096:	cf 91       	pop	r28
    2098:	df 91       	pop	r29
    209a:	08 95       	ret

0000209c <Us_GetDistance>:


/*****************************************************************************************/

ERROR_STATUS Us_GetDistance(uint16_t *Distance)
{
    209c:	df 93       	push	r29
    209e:	cf 93       	push	r28
    20a0:	cd b7       	in	r28, 0x3d	; 61
    20a2:	de b7       	in	r29, 0x3e	; 62
    20a4:	27 97       	sbiw	r28, 0x07	; 7
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	f8 94       	cli
    20aa:	de bf       	out	0x3e, r29	; 62
    20ac:	0f be       	out	0x3f, r0	; 63
    20ae:	cd bf       	out	0x3d, r28	; 61
    20b0:	9f 83       	std	Y+7, r25	; 0x07
    20b2:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t u8_status;
	uint32_t u32_time;
	Icu_ReadTime(Timer_2,ICU_RISE_TO_FALL,&u32_time);   /*high time*/
    20b4:	9e 01       	movw	r18, r28
    20b6:	2e 5f       	subi	r18, 0xFE	; 254
    20b8:	3f 4f       	sbci	r19, 0xFF	; 255
    20ba:	82 e0       	ldi	r24, 0x02	; 2
    20bc:	61 e0       	ldi	r22, 0x01	; 1
    20be:	a9 01       	movw	r20, r18
    20c0:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <Icu_ReadTime>
	*Distance=u32_time/ULTRA_SONIC_SCALING;
    20c4:	8a 81       	ldd	r24, Y+2	; 0x02
    20c6:	9b 81       	ldd	r25, Y+3	; 0x03
    20c8:	ac 81       	ldd	r26, Y+4	; 0x04
    20ca:	bd 81       	ldd	r27, Y+5	; 0x05
    20cc:	2a e3       	ldi	r18, 0x3A	; 58
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	40 e0       	ldi	r20, 0x00	; 0
    20d2:	50 e0       	ldi	r21, 0x00	; 0
    20d4:	bc 01       	movw	r22, r24
    20d6:	cd 01       	movw	r24, r26
    20d8:	0e 94 2d 14 	call	0x285a	; 0x285a <__udivmodsi4>
    20dc:	da 01       	movw	r26, r20
    20de:	c9 01       	movw	r24, r18
    20e0:	ee 81       	ldd	r30, Y+6	; 0x06
    20e2:	ff 81       	ldd	r31, Y+7	; 0x07
    20e4:	91 83       	std	Z+1, r25	; 0x01
    20e6:	80 83       	st	Z, r24
	u8_status=E_ok;
    20e8:	19 82       	std	Y+1, r1	; 0x01
	return u8_status;
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    20ec:	27 96       	adiw	r28, 0x07	; 7
    20ee:	0f b6       	in	r0, 0x3f	; 63
    20f0:	f8 94       	cli
    20f2:	de bf       	out	0x3e, r29	; 62
    20f4:	0f be       	out	0x3f, r0	; 63
    20f6:	cd bf       	out	0x3d, r28	; 61
    20f8:	cf 91       	pop	r28
    20fa:	df 91       	pop	r29
    20fc:	08 95       	ret

000020fe <Motor_Init>:
 */

#include "motor.h"

ERROR_STATUS Motor_Init(uint8_t Motor_Number)
{
    20fe:	df 93       	push	r29
    2100:	cf 93       	push	r28
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
    2106:	2a 97       	sbiw	r28, 0x0a	; 10
    2108:	0f b6       	in	r0, 0x3f	; 63
    210a:	f8 94       	cli
    210c:	de bf       	out	0x3e, r29	; 62
    210e:	0f be       	out	0x3f, r0	; 63
    2110:	cd bf       	out	0x3d, r28	; 61
    2112:	88 87       	std	Y+8, r24	; 0x08
	ERROR_STATUS u8_status;
	switch(Motor_Number)
    2114:	88 85       	ldd	r24, Y+8	; 0x08
    2116:	28 2f       	mov	r18, r24
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	3a 87       	std	Y+10, r19	; 0x0a
    211c:	29 87       	std	Y+9, r18	; 0x09
    211e:	89 85       	ldd	r24, Y+9	; 0x09
    2120:	9a 85       	ldd	r25, Y+10	; 0x0a
    2122:	81 30       	cpi	r24, 0x01	; 1
    2124:	91 05       	cpc	r25, r1
    2126:	31 f0       	breq	.+12     	; 0x2134 <Motor_Init+0x36>
    2128:	29 85       	ldd	r18, Y+9	; 0x09
    212a:	3a 85       	ldd	r19, Y+10	; 0x0a
    212c:	22 30       	cpi	r18, 0x02	; 2
    212e:	31 05       	cpc	r19, r1
    2130:	c1 f0       	breq	.+48     	; 0x2162 <Motor_Init+0x64>
    2132:	2e c0       	rjmp	.+92     	; 0x2190 <Motor_Init+0x92>
	{
		case(MOTOR_1):
				u8_status=E_ok;
    2134:	19 82       	std	Y+1, r1	; 0x01
				DIO_Cfg_s Motor1_init=
				{
						Motor1_init.GPIO=MOTORS_PORT,
						Motor1_init.pins=MOTOR_EN_1_BIT | MOTOR_OUT_1A_BIT | MOTOR_OUT_1B_BIT,
						Motor1_init.dir=OUTPUT,
				};
    2136:	83 e0       	ldi	r24, 0x03	; 3
    2138:	8a 83       	std	Y+2, r24	; 0x02
    213a:	2a 81       	ldd	r18, Y+2	; 0x02
    213c:	80 ed       	ldi	r24, 0xD0	; 208
    213e:	8b 83       	std	Y+3, r24	; 0x03
    2140:	9b 81       	ldd	r25, Y+3	; 0x03
    2142:	8f ef       	ldi	r24, 0xFF	; 255
    2144:	8c 83       	std	Y+4, r24	; 0x04
    2146:	8c 81       	ldd	r24, Y+4	; 0x04
    2148:	2a 83       	std	Y+2, r18	; 0x02
    214a:	9b 83       	std	Y+3, r25	; 0x03
    214c:	8c 83       	std	Y+4, r24	; 0x04
				DIO_init (&Motor1_init);
    214e:	ce 01       	movw	r24, r28
    2150:	02 96       	adiw	r24, 0x02	; 2
    2152:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_init>
				DIO_Write (MOTORS_PORT, MOTOR_EN_1_BIT | MOTOR_OUT_1A_BIT | MOTOR_OUT_1B_BIT, LOW);
    2156:	83 e0       	ldi	r24, 0x03	; 3
    2158:	60 ed       	ldi	r22, 0xD0	; 208
    215a:	40 e0       	ldi	r20, 0x00	; 0
    215c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
    2160:	19 c0       	rjmp	.+50     	; 0x2194 <Motor_Init+0x96>
				break;

		case(MOTOR_2):
				u8_status=E_ok;
    2162:	19 82       	std	Y+1, r1	; 0x01
				DIO_Cfg_s Motor2_init=
				{
						Motor2_init.GPIO=MOTORS_PORT,
						Motor2_init.pins=MOTOR_EN_2_BIT | MOTOR_OUT_2A_BIT | MOTOR_OUT_2B_BIT,
						Motor2_init.dir=OUTPUT,
				};
    2164:	83 e0       	ldi	r24, 0x03	; 3
    2166:	8d 83       	std	Y+5, r24	; 0x05
    2168:	2d 81       	ldd	r18, Y+5	; 0x05
    216a:	8c e2       	ldi	r24, 0x2C	; 44
    216c:	8e 83       	std	Y+6, r24	; 0x06
    216e:	9e 81       	ldd	r25, Y+6	; 0x06
    2170:	8f ef       	ldi	r24, 0xFF	; 255
    2172:	8f 83       	std	Y+7, r24	; 0x07
    2174:	8f 81       	ldd	r24, Y+7	; 0x07
    2176:	2d 83       	std	Y+5, r18	; 0x05
    2178:	9e 83       	std	Y+6, r25	; 0x06
    217a:	8f 83       	std	Y+7, r24	; 0x07
				DIO_init (&Motor2_init);
    217c:	ce 01       	movw	r24, r28
    217e:	05 96       	adiw	r24, 0x05	; 5
    2180:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_init>
				DIO_Write (MOTORS_PORT, MOTOR_EN_2_BIT | MOTOR_OUT_2A_BIT | MOTOR_OUT_2B_BIT, LOW);
    2184:	83 e0       	ldi	r24, 0x03	; 3
    2186:	6c e2       	ldi	r22, 0x2C	; 44
    2188:	40 e0       	ldi	r20, 0x00	; 0
    218a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
    218e:	02 c0       	rjmp	.+4      	; 0x2194 <Motor_Init+0x96>
				break;

		default:
			u8_status=E_NOk;
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
    2194:	89 81       	ldd	r24, Y+1	; 0x01
}
    2196:	2a 96       	adiw	r28, 0x0a	; 10
    2198:	0f b6       	in	r0, 0x3f	; 63
    219a:	f8 94       	cli
    219c:	de bf       	out	0x3e, r29	; 62
    219e:	0f be       	out	0x3f, r0	; 63
    21a0:	cd bf       	out	0x3d, r28	; 61
    21a2:	cf 91       	pop	r28
    21a4:	df 91       	pop	r29
    21a6:	08 95       	ret

000021a8 <Motor_Direction>:




ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction)
{
    21a8:	df 93       	push	r29
    21aa:	cf 93       	push	r28
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
    21b0:	2f 97       	sbiw	r28, 0x0f	; 15
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	f8 94       	cli
    21b6:	de bf       	out	0x3e, r29	; 62
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	cd bf       	out	0x3d, r28	; 61
    21bc:	88 87       	std	Y+8, r24	; 0x08
    21be:	69 87       	std	Y+9, r22	; 0x09
	ERROR_STATUS u8_status;
	switch(Motor_Number)
    21c0:	88 85       	ldd	r24, Y+8	; 0x08
    21c2:	28 2f       	mov	r18, r24
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	3f 87       	std	Y+15, r19	; 0x0f
    21c8:	2e 87       	std	Y+14, r18	; 0x0e
    21ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    21cc:	9f 85       	ldd	r25, Y+15	; 0x0f
    21ce:	81 30       	cpi	r24, 0x01	; 1
    21d0:	91 05       	cpc	r25, r1
    21d2:	39 f0       	breq	.+14     	; 0x21e2 <Motor_Direction+0x3a>
    21d4:	2e 85       	ldd	r18, Y+14	; 0x0e
    21d6:	3f 85       	ldd	r19, Y+15	; 0x0f
    21d8:	22 30       	cpi	r18, 0x02	; 2
    21da:	31 05       	cpc	r19, r1
    21dc:	09 f4       	brne	.+2      	; 0x21e0 <Motor_Direction+0x38>
    21de:	4c c0       	rjmp	.+152    	; 0x2278 <Motor_Direction+0xd0>
    21e0:	96 c0       	rjmp	.+300    	; 0x230e <Motor_Direction+0x166>
	{
		case(MOTOR_1):
				u8_status=E_ok;
    21e2:	19 82       	std	Y+1, r1	; 0x01
				DIO_Cfg_s Motor1_DirInit=
				{
					Motor1_DirInit.GPIO=MOTORS_PORT,
					Motor1_DirInit.pins=MOTOR_EN_1_BIT | MOTOR_OUT_1A_BIT | MOTOR_OUT_1B_BIT,
					Motor1_DirInit.dir=OUTPUT,
				};
    21e4:	83 e0       	ldi	r24, 0x03	; 3
    21e6:	8a 83       	std	Y+2, r24	; 0x02
    21e8:	2a 81       	ldd	r18, Y+2	; 0x02
    21ea:	80 ed       	ldi	r24, 0xD0	; 208
    21ec:	8b 83       	std	Y+3, r24	; 0x03
    21ee:	9b 81       	ldd	r25, Y+3	; 0x03
    21f0:	8f ef       	ldi	r24, 0xFF	; 255
    21f2:	8c 83       	std	Y+4, r24	; 0x04
    21f4:	8c 81       	ldd	r24, Y+4	; 0x04
    21f6:	2a 83       	std	Y+2, r18	; 0x02
    21f8:	9b 83       	std	Y+3, r25	; 0x03
    21fa:	8c 83       	std	Y+4, r24	; 0x04
				DIO_init (&Motor1_DirInit);
    21fc:	ce 01       	movw	r24, r28
    21fe:	02 96       	adiw	r24, 0x02	; 2
    2200:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_init>
				switch(Motor_Direction)
    2204:	89 85       	ldd	r24, Y+9	; 0x09
    2206:	28 2f       	mov	r18, r24
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	3d 87       	std	Y+13, r19	; 0x0d
    220c:	2c 87       	std	Y+12, r18	; 0x0c
    220e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2210:	9d 85       	ldd	r25, Y+13	; 0x0d
    2212:	81 30       	cpi	r24, 0x01	; 1
    2214:	91 05       	cpc	r25, r1
    2216:	a9 f0       	breq	.+42     	; 0x2242 <Motor_Direction+0x9a>
    2218:	2c 85       	ldd	r18, Y+12	; 0x0c
    221a:	3d 85       	ldd	r19, Y+13	; 0x0d
    221c:	22 30       	cpi	r18, 0x02	; 2
    221e:	31 05       	cpc	r19, r1
    2220:	e1 f0       	breq	.+56     	; 0x225a <Motor_Direction+0xb2>
    2222:	8c 85       	ldd	r24, Y+12	; 0x0c
    2224:	9d 85       	ldd	r25, Y+13	; 0x0d
    2226:	00 97       	sbiw	r24, 0x00	; 0
    2228:	21 f5       	brne	.+72     	; 0x2272 <Motor_Direction+0xca>
				{
				case MOTOR_STOP:
					DIO_Write (MOTORS_PORT, MOTOR_OUT_1A_BIT, LOW);
    222a:	83 e0       	ldi	r24, 0x03	; 3
    222c:	60 e4       	ldi	r22, 0x40	; 64
    222e:	40 e0       	ldi	r20, 0x00	; 0
    2230:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
					DIO_Write (MOTORS_PORT, MOTOR_OUT_1B_BIT, LOW);
    2234:	83 e0       	ldi	r24, 0x03	; 3
    2236:	60 e8       	ldi	r22, 0x80	; 128
    2238:	40 e0       	ldi	r20, 0x00	; 0
    223a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
					u8_status=E_ok;
    223e:	19 82       	std	Y+1, r1	; 0x01
    2240:	68 c0       	rjmp	.+208    	; 0x2312 <Motor_Direction+0x16a>
					break;

				case MOTOR_FORWARD:
					DIO_Write (MOTORS_PORT, MOTOR_OUT_1A_BIT, LOW);
    2242:	83 e0       	ldi	r24, 0x03	; 3
    2244:	60 e4       	ldi	r22, 0x40	; 64
    2246:	40 e0       	ldi	r20, 0x00	; 0
    2248:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
					DIO_Write (MOTORS_PORT, MOTOR_OUT_1B_BIT, HIGH);
    224c:	83 e0       	ldi	r24, 0x03	; 3
    224e:	60 e8       	ldi	r22, 0x80	; 128
    2250:	4f ef       	ldi	r20, 0xFF	; 255
    2252:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
					u8_status=E_ok;
    2256:	19 82       	std	Y+1, r1	; 0x01
    2258:	5c c0       	rjmp	.+184    	; 0x2312 <Motor_Direction+0x16a>
					break;

				case MOTOR_BACKWARD:
					DIO_Write (MOTORS_PORT, MOTOR_OUT_1A_BIT, HIGH);
    225a:	83 e0       	ldi	r24, 0x03	; 3
    225c:	60 e4       	ldi	r22, 0x40	; 64
    225e:	4f ef       	ldi	r20, 0xFF	; 255
    2260:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
					DIO_Write (MOTORS_PORT, MOTOR_OUT_1B_BIT, LOW);
    2264:	83 e0       	ldi	r24, 0x03	; 3
    2266:	60 e8       	ldi	r22, 0x80	; 128
    2268:	40 e0       	ldi	r20, 0x00	; 0
    226a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
					u8_status=E_ok;
    226e:	19 82       	std	Y+1, r1	; 0x01
    2270:	50 c0       	rjmp	.+160    	; 0x2312 <Motor_Direction+0x16a>
					break;

				default:
					u8_status=E_NOk;
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	89 83       	std	Y+1, r24	; 0x01
    2276:	4d c0       	rjmp	.+154    	; 0x2312 <Motor_Direction+0x16a>
				}
				break;

		case(MOTOR_2):
				u8_status=E_ok;
    2278:	19 82       	std	Y+1, r1	; 0x01
				DIO_Cfg_s Motor2_DirInit=
				{
					Motor2_DirInit.GPIO=MOTORS_PORT,
					Motor2_DirInit.pins=MOTOR_EN_2_BIT | MOTOR_OUT_2A_BIT | MOTOR_OUT_2B_BIT,
					Motor2_DirInit.dir=OUTPUT,
				};
    227a:	83 e0       	ldi	r24, 0x03	; 3
    227c:	8d 83       	std	Y+5, r24	; 0x05
    227e:	2d 81       	ldd	r18, Y+5	; 0x05
    2280:	8c e2       	ldi	r24, 0x2C	; 44
    2282:	8e 83       	std	Y+6, r24	; 0x06
    2284:	9e 81       	ldd	r25, Y+6	; 0x06
    2286:	8f ef       	ldi	r24, 0xFF	; 255
    2288:	8f 83       	std	Y+7, r24	; 0x07
    228a:	8f 81       	ldd	r24, Y+7	; 0x07
    228c:	2d 83       	std	Y+5, r18	; 0x05
    228e:	9e 83       	std	Y+6, r25	; 0x06
    2290:	8f 83       	std	Y+7, r24	; 0x07
				DIO_init (&Motor2_DirInit);
    2292:	ce 01       	movw	r24, r28
    2294:	05 96       	adiw	r24, 0x05	; 5
    2296:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_init>
				switch(Motor_Direction)
    229a:	89 85       	ldd	r24, Y+9	; 0x09
    229c:	28 2f       	mov	r18, r24
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	3b 87       	std	Y+11, r19	; 0x0b
    22a2:	2a 87       	std	Y+10, r18	; 0x0a
    22a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    22a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    22a8:	81 30       	cpi	r24, 0x01	; 1
    22aa:	91 05       	cpc	r25, r1
    22ac:	a9 f0       	breq	.+42     	; 0x22d8 <Motor_Direction+0x130>
    22ae:	2a 85       	ldd	r18, Y+10	; 0x0a
    22b0:	3b 85       	ldd	r19, Y+11	; 0x0b
    22b2:	22 30       	cpi	r18, 0x02	; 2
    22b4:	31 05       	cpc	r19, r1
    22b6:	e1 f0       	breq	.+56     	; 0x22f0 <Motor_Direction+0x148>
    22b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    22ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    22bc:	00 97       	sbiw	r24, 0x00	; 0
    22be:	21 f5       	brne	.+72     	; 0x2308 <Motor_Direction+0x160>
				{
				case MOTOR_STOP:
					DIO_Write (MOTORS_PORT, MOTOR_OUT_2A_BIT, LOW);
    22c0:	83 e0       	ldi	r24, 0x03	; 3
    22c2:	64 e0       	ldi	r22, 0x04	; 4
    22c4:	40 e0       	ldi	r20, 0x00	; 0
    22c6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
					DIO_Write (MOTORS_PORT, MOTOR_OUT_2B_BIT, LOW);
    22ca:	83 e0       	ldi	r24, 0x03	; 3
    22cc:	68 e0       	ldi	r22, 0x08	; 8
    22ce:	40 e0       	ldi	r20, 0x00	; 0
    22d0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
					u8_status=E_ok;
    22d4:	19 82       	std	Y+1, r1	; 0x01
    22d6:	1d c0       	rjmp	.+58     	; 0x2312 <Motor_Direction+0x16a>
					break;

				case MOTOR_FORWARD:
					DIO_Write (MOTORS_PORT, MOTOR_OUT_2A_BIT, LOW);
    22d8:	83 e0       	ldi	r24, 0x03	; 3
    22da:	64 e0       	ldi	r22, 0x04	; 4
    22dc:	40 e0       	ldi	r20, 0x00	; 0
    22de:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
					DIO_Write (MOTORS_PORT, MOTOR_OUT_2B_BIT, HIGH);
    22e2:	83 e0       	ldi	r24, 0x03	; 3
    22e4:	68 e0       	ldi	r22, 0x08	; 8
    22e6:	4f ef       	ldi	r20, 0xFF	; 255
    22e8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
					u8_status=E_ok;
    22ec:	19 82       	std	Y+1, r1	; 0x01
    22ee:	11 c0       	rjmp	.+34     	; 0x2312 <Motor_Direction+0x16a>
					break;

				case MOTOR_BACKWARD:
					DIO_Write (MOTORS_PORT, MOTOR_OUT_2A_BIT, HIGH);
    22f0:	83 e0       	ldi	r24, 0x03	; 3
    22f2:	64 e0       	ldi	r22, 0x04	; 4
    22f4:	4f ef       	ldi	r20, 0xFF	; 255
    22f6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
					DIO_Write (MOTORS_PORT, MOTOR_OUT_2B_BIT, LOW);
    22fa:	83 e0       	ldi	r24, 0x03	; 3
    22fc:	68 e0       	ldi	r22, 0x08	; 8
    22fe:	40 e0       	ldi	r20, 0x00	; 0
    2300:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
					u8_status=E_ok;
    2304:	19 82       	std	Y+1, r1	; 0x01
    2306:	05 c0       	rjmp	.+10     	; 0x2312 <Motor_Direction+0x16a>
					break;

				default:
					u8_status=E_NOk;
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	89 83       	std	Y+1, r24	; 0x01
    230c:	02 c0       	rjmp	.+4      	; 0x2312 <Motor_Direction+0x16a>
				}
				break;

		default:
			u8_status=E_NOk;
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
    2312:	89 81       	ldd	r24, Y+1	; 0x01
}
    2314:	2f 96       	adiw	r28, 0x0f	; 15
    2316:	0f b6       	in	r0, 0x3f	; 63
    2318:	f8 94       	cli
    231a:	de bf       	out	0x3e, r29	; 62
    231c:	0f be       	out	0x3f, r0	; 63
    231e:	cd bf       	out	0x3d, r28	; 61
    2320:	cf 91       	pop	r28
    2322:	df 91       	pop	r29
    2324:	08 95       	ret

00002326 <Motor_Start>:
/*****************************************************************************************/


ERROR_STATUS Motor_Start(uint8_t Motor_Number, uint8_t Mot_Speed)
{
    2326:	df 93       	push	r29
    2328:	cf 93       	push	r28
    232a:	cd b7       	in	r28, 0x3d	; 61
    232c:	de b7       	in	r29, 0x3e	; 62
    232e:	27 97       	sbiw	r28, 0x07	; 7
    2330:	0f b6       	in	r0, 0x3f	; 63
    2332:	f8 94       	cli
    2334:	de bf       	out	0x3e, r29	; 62
    2336:	0f be       	out	0x3f, r0	; 63
    2338:	cd bf       	out	0x3d, r28	; 61
    233a:	8c 83       	std	Y+4, r24	; 0x04
    233c:	6d 83       	std	Y+5, r22	; 0x05
	ERROR_STATUS u8_status;
	Pwm_Cfg_s instans={PWM_CH1A_CH1B,PWM_PRESCALER_256};
    233e:	84 e0       	ldi	r24, 0x04	; 4
    2340:	8a 83       	std	Y+2, r24	; 0x02
    2342:	84 e0       	ldi	r24, 0x04	; 4
    2344:	8b 83       	std	Y+3, r24	; 0x03
	Pwm_Init(&instans);
    2346:	ce 01       	movw	r24, r28
    2348:	02 96       	adiw	r24, 0x02	; 2
    234a:	0e 94 57 02 	call	0x4ae	; 0x4ae <Pwm_Init>
	switch(Motor_Number)
    234e:	8c 81       	ldd	r24, Y+4	; 0x04
    2350:	28 2f       	mov	r18, r24
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	3f 83       	std	Y+7, r19	; 0x07
    2356:	2e 83       	std	Y+6, r18	; 0x06
    2358:	8e 81       	ldd	r24, Y+6	; 0x06
    235a:	9f 81       	ldd	r25, Y+7	; 0x07
    235c:	82 30       	cpi	r24, 0x02	; 2
    235e:	91 05       	cpc	r25, r1
    2360:	a1 f0       	breq	.+40     	; 0x238a <Motor_Start+0x64>
    2362:	2e 81       	ldd	r18, Y+6	; 0x06
    2364:	3f 81       	ldd	r19, Y+7	; 0x07
    2366:	23 30       	cpi	r18, 0x03	; 3
    2368:	31 05       	cpc	r19, r1
    236a:	c9 f0       	breq	.+50     	; 0x239e <Motor_Start+0x78>
    236c:	8e 81       	ldd	r24, Y+6	; 0x06
    236e:	9f 81       	ldd	r25, Y+7	; 0x07
    2370:	81 30       	cpi	r24, 0x01	; 1
    2372:	91 05       	cpc	r25, r1
    2374:	f1 f4       	brne	.+60     	; 0x23b2 <Motor_Start+0x8c>
	{
	case MOTOR_1:
		Pwm_Start(PWM_CH1A,Mot_Speed,T1_PHASE_CORRECT_FREQUENCY_50HZ);
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	6d 81       	ldd	r22, Y+5	; 0x05
    237a:	23 e0       	ldi	r18, 0x03	; 3
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	40 e0       	ldi	r20, 0x00	; 0
    2380:	50 e0       	ldi	r21, 0x00	; 0
    2382:	0e 94 5e 03 	call	0x6bc	; 0x6bc <Pwm_Start>
		u8_status=E_ok;
    2386:	19 82       	std	Y+1, r1	; 0x01
    2388:	16 c0       	rjmp	.+44     	; 0x23b6 <Motor_Start+0x90>
		break;

	case MOTOR_2:
		Pwm_Start(PWM_CH1B,Mot_Speed,T1_PHASE_CORRECT_FREQUENCY_50HZ);
    238a:	82 e0       	ldi	r24, 0x02	; 2
    238c:	6d 81       	ldd	r22, Y+5	; 0x05
    238e:	23 e0       	ldi	r18, 0x03	; 3
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	40 e0       	ldi	r20, 0x00	; 0
    2394:	50 e0       	ldi	r21, 0x00	; 0
    2396:	0e 94 5e 03 	call	0x6bc	; 0x6bc <Pwm_Start>
		u8_status=E_ok;
    239a:	19 82       	std	Y+1, r1	; 0x01
    239c:	0c c0       	rjmp	.+24     	; 0x23b6 <Motor_Start+0x90>
		break;

	case (MOTOR_1_2):
		Pwm_Start(PWM_CH1A_CH1B,Mot_Speed,T1_PHASE_CORRECT_FREQUENCY_50HZ);
    239e:	84 e0       	ldi	r24, 0x04	; 4
    23a0:	6d 81       	ldd	r22, Y+5	; 0x05
    23a2:	23 e0       	ldi	r18, 0x03	; 3
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	40 e0       	ldi	r20, 0x00	; 0
    23a8:	50 e0       	ldi	r21, 0x00	; 0
    23aa:	0e 94 5e 03 	call	0x6bc	; 0x6bc <Pwm_Start>
		u8_status=E_ok;
    23ae:	19 82       	std	Y+1, r1	; 0x01
    23b0:	02 c0       	rjmp	.+4      	; 0x23b6 <Motor_Start+0x90>
		break;

	default:
		u8_status=E_NOk;
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    23b8:	27 96       	adiw	r28, 0x07	; 7
    23ba:	0f b6       	in	r0, 0x3f	; 63
    23bc:	f8 94       	cli
    23be:	de bf       	out	0x3e, r29	; 62
    23c0:	0f be       	out	0x3f, r0	; 63
    23c2:	cd bf       	out	0x3d, r28	; 61
    23c4:	cf 91       	pop	r28
    23c6:	df 91       	pop	r29
    23c8:	08 95       	ret

000023ca <Motor_SpeedUpdate>:

/******************************************************************************************/


ERROR_STATUS Motor_SpeedUpdate(uint8_t Motor_Number, uint8_t Speed)
{
    23ca:	df 93       	push	r29
    23cc:	cf 93       	push	r28
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
    23d2:	27 97       	sbiw	r28, 0x07	; 7
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	f8 94       	cli
    23d8:	de bf       	out	0x3e, r29	; 62
    23da:	0f be       	out	0x3f, r0	; 63
    23dc:	cd bf       	out	0x3d, r28	; 61
    23de:	8c 83       	std	Y+4, r24	; 0x04
    23e0:	6d 83       	std	Y+5, r22	; 0x05
	ERROR_STATUS u8_status;
	Pwm_Cfg_s instans={PWM_CH1A_CH1B,PWM_PRESCALER_256};
    23e2:	84 e0       	ldi	r24, 0x04	; 4
    23e4:	8a 83       	std	Y+2, r24	; 0x02
    23e6:	84 e0       	ldi	r24, 0x04	; 4
    23e8:	8b 83       	std	Y+3, r24	; 0x03
	Pwm_Init(&instans);
    23ea:	ce 01       	movw	r24, r28
    23ec:	02 96       	adiw	r24, 0x02	; 2
    23ee:	0e 94 57 02 	call	0x4ae	; 0x4ae <Pwm_Init>
	switch(Motor_Number)
    23f2:	8c 81       	ldd	r24, Y+4	; 0x04
    23f4:	28 2f       	mov	r18, r24
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	3f 83       	std	Y+7, r19	; 0x07
    23fa:	2e 83       	std	Y+6, r18	; 0x06
    23fc:	8e 81       	ldd	r24, Y+6	; 0x06
    23fe:	9f 81       	ldd	r25, Y+7	; 0x07
    2400:	82 30       	cpi	r24, 0x02	; 2
    2402:	91 05       	cpc	r25, r1
    2404:	a1 f0       	breq	.+40     	; 0x242e <Motor_SpeedUpdate+0x64>
    2406:	2e 81       	ldd	r18, Y+6	; 0x06
    2408:	3f 81       	ldd	r19, Y+7	; 0x07
    240a:	23 30       	cpi	r18, 0x03	; 3
    240c:	31 05       	cpc	r19, r1
    240e:	c9 f0       	breq	.+50     	; 0x2442 <Motor_SpeedUpdate+0x78>
    2410:	8e 81       	ldd	r24, Y+6	; 0x06
    2412:	9f 81       	ldd	r25, Y+7	; 0x07
    2414:	81 30       	cpi	r24, 0x01	; 1
    2416:	91 05       	cpc	r25, r1
    2418:	f1 f4       	brne	.+60     	; 0x2456 <Motor_SpeedUpdate+0x8c>
	{
	case MOTOR_1:
		Pwm_Start(PWM_CH1A,Speed,T1_PHASE_CORRECT_FREQUENCY_50HZ);
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	6d 81       	ldd	r22, Y+5	; 0x05
    241e:	23 e0       	ldi	r18, 0x03	; 3
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	40 e0       	ldi	r20, 0x00	; 0
    2424:	50 e0       	ldi	r21, 0x00	; 0
    2426:	0e 94 5e 03 	call	0x6bc	; 0x6bc <Pwm_Start>
		u8_status=E_ok;
    242a:	19 82       	std	Y+1, r1	; 0x01
    242c:	16 c0       	rjmp	.+44     	; 0x245a <Motor_SpeedUpdate+0x90>
		break;

	case MOTOR_2:
		Pwm_Start(PWM_CH1B,Speed,T1_PHASE_CORRECT_FREQUENCY_50HZ);
    242e:	82 e0       	ldi	r24, 0x02	; 2
    2430:	6d 81       	ldd	r22, Y+5	; 0x05
    2432:	23 e0       	ldi	r18, 0x03	; 3
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	40 e0       	ldi	r20, 0x00	; 0
    2438:	50 e0       	ldi	r21, 0x00	; 0
    243a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <Pwm_Start>
		u8_status=E_ok;
    243e:	19 82       	std	Y+1, r1	; 0x01
    2440:	0c c0       	rjmp	.+24     	; 0x245a <Motor_SpeedUpdate+0x90>
		break;

	case (MOTOR_1_2):
		Pwm_Start(PWM_CH1A_CH1B,Speed,T1_PHASE_CORRECT_FREQUENCY_50HZ);
    2442:	84 e0       	ldi	r24, 0x04	; 4
    2444:	6d 81       	ldd	r22, Y+5	; 0x05
    2446:	23 e0       	ldi	r18, 0x03	; 3
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	40 e0       	ldi	r20, 0x00	; 0
    244c:	50 e0       	ldi	r21, 0x00	; 0
    244e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <Pwm_Start>
		u8_status=E_ok;
    2452:	19 82       	std	Y+1, r1	; 0x01
    2454:	02 c0       	rjmp	.+4      	; 0x245a <Motor_SpeedUpdate+0x90>
		break;

	default:
		u8_status=E_NOk;
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
    245a:	89 81       	ldd	r24, Y+1	; 0x01
}
    245c:	27 96       	adiw	r28, 0x07	; 7
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	f8 94       	cli
    2462:	de bf       	out	0x3e, r29	; 62
    2464:	0f be       	out	0x3f, r0	; 63
    2466:	cd bf       	out	0x3d, r28	; 61
    2468:	cf 91       	pop	r28
    246a:	df 91       	pop	r29
    246c:	08 95       	ret

0000246e <Motor_Stop>:

/******************************************************************************************/


ERROR_STATUS Motor_Stop(uint8_t Motor_Number)
{
    246e:	df 93       	push	r29
    2470:	cf 93       	push	r28
    2472:	00 d0       	rcall	.+0      	; 0x2474 <Motor_Stop+0x6>
    2474:	00 d0       	rcall	.+0      	; 0x2476 <Motor_Stop+0x8>
    2476:	00 d0       	rcall	.+0      	; 0x2478 <Motor_Stop+0xa>
    2478:	cd b7       	in	r28, 0x3d	; 61
    247a:	de b7       	in	r29, 0x3e	; 62
    247c:	8c 83       	std	Y+4, r24	; 0x04
	ERROR_STATUS u8_status;
	Pwm_Cfg_s instans={PWM_CH1A_CH1B,PWM_PRESCALER_256};
    247e:	84 e0       	ldi	r24, 0x04	; 4
    2480:	8a 83       	std	Y+2, r24	; 0x02
    2482:	84 e0       	ldi	r24, 0x04	; 4
    2484:	8b 83       	std	Y+3, r24	; 0x03
	Pwm_Init(&instans);
    2486:	ce 01       	movw	r24, r28
    2488:	02 96       	adiw	r24, 0x02	; 2
    248a:	0e 94 57 02 	call	0x4ae	; 0x4ae <Pwm_Init>
	switch(Motor_Number)
    248e:	8c 81       	ldd	r24, Y+4	; 0x04
    2490:	28 2f       	mov	r18, r24
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	3e 83       	std	Y+6, r19	; 0x06
    2496:	2d 83       	std	Y+5, r18	; 0x05
    2498:	8d 81       	ldd	r24, Y+5	; 0x05
    249a:	9e 81       	ldd	r25, Y+6	; 0x06
    249c:	82 30       	cpi	r24, 0x02	; 2
    249e:	91 05       	cpc	r25, r1
    24a0:	79 f0       	breq	.+30     	; 0x24c0 <Motor_Stop+0x52>
    24a2:	2d 81       	ldd	r18, Y+5	; 0x05
    24a4:	3e 81       	ldd	r19, Y+6	; 0x06
    24a6:	23 30       	cpi	r18, 0x03	; 3
    24a8:	31 05       	cpc	r19, r1
    24aa:	79 f0       	breq	.+30     	; 0x24ca <Motor_Stop+0x5c>
    24ac:	8d 81       	ldd	r24, Y+5	; 0x05
    24ae:	9e 81       	ldd	r25, Y+6	; 0x06
    24b0:	81 30       	cpi	r24, 0x01	; 1
    24b2:	91 05       	cpc	r25, r1
    24b4:	79 f4       	brne	.+30     	; 0x24d4 <Motor_Stop+0x66>
	{
	case MOTOR_1:
		Pwm_Stop(PWM_CH1A);
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <Pwm_Stop>
		u8_status=E_ok;
    24bc:	19 82       	std	Y+1, r1	; 0x01
    24be:	0c c0       	rjmp	.+24     	; 0x24d8 <Motor_Stop+0x6a>
		break;

	case MOTOR_2:
		Pwm_Stop(PWM_CH1B);
    24c0:	82 e0       	ldi	r24, 0x02	; 2
    24c2:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <Pwm_Stop>
		u8_status=E_ok;
    24c6:	19 82       	std	Y+1, r1	; 0x01
    24c8:	07 c0       	rjmp	.+14     	; 0x24d8 <Motor_Stop+0x6a>
		break;
	case (MOTOR_1_2):
		Pwm_Stop(PWM_CH1A_CH1B);
    24ca:	84 e0       	ldi	r24, 0x04	; 4
    24cc:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <Pwm_Stop>
		u8_status=E_ok;
    24d0:	19 82       	std	Y+1, r1	; 0x01
    24d2:	02 c0       	rjmp	.+4      	; 0x24d8 <Motor_Stop+0x6a>
		break;
	default:
		u8_status=E_NOk;
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    24da:	26 96       	adiw	r28, 0x06	; 6
    24dc:	0f b6       	in	r0, 0x3f	; 63
    24de:	f8 94       	cli
    24e0:	de bf       	out	0x3e, r29	; 62
    24e2:	0f be       	out	0x3f, r0	; 63
    24e4:	cd bf       	out	0x3d, r28	; 61
    24e6:	cf 91       	pop	r28
    24e8:	df 91       	pop	r29
    24ea:	08 95       	ret

000024ec <Motor_GetStatus>:

/******************************************************************************************/


ERROR_STATUS Motor_GetStatus(uint8_t Motor_Number, uint8_t* Mot_status)
{
    24ec:	df 93       	push	r29
    24ee:	cf 93       	push	r28
    24f0:	00 d0       	rcall	.+0      	; 0x24f2 <Motor_GetStatus+0x6>
    24f2:	00 d0       	rcall	.+0      	; 0x24f4 <Motor_GetStatus+0x8>
    24f4:	00 d0       	rcall	.+0      	; 0x24f6 <Motor_GetStatus+0xa>
    24f6:	cd b7       	in	r28, 0x3d	; 61
    24f8:	de b7       	in	r29, 0x3e	; 62
    24fa:	8a 83       	std	Y+2, r24	; 0x02
    24fc:	7c 83       	std	Y+4, r23	; 0x04
    24fe:	6b 83       	std	Y+3, r22	; 0x03
	ERROR_STATUS u8_status;
	switch(Motor_Number)
    2500:	8a 81       	ldd	r24, Y+2	; 0x02
    2502:	28 2f       	mov	r18, r24
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	3e 83       	std	Y+6, r19	; 0x06
    2508:	2d 83       	std	Y+5, r18	; 0x05
    250a:	8d 81       	ldd	r24, Y+5	; 0x05
    250c:	9e 81       	ldd	r25, Y+6	; 0x06
    250e:	81 30       	cpi	r24, 0x01	; 1
    2510:	91 05       	cpc	r25, r1
    2512:	31 f0       	breq	.+12     	; 0x2520 <Motor_GetStatus+0x34>
    2514:	2d 81       	ldd	r18, Y+5	; 0x05
    2516:	3e 81       	ldd	r19, Y+6	; 0x06
    2518:	22 30       	cpi	r18, 0x02	; 2
    251a:	31 05       	cpc	r19, r1
    251c:	19 f0       	breq	.+6      	; 0x2524 <Motor_GetStatus+0x38>
    251e:	04 c0       	rjmp	.+8      	; 0x2528 <Motor_GetStatus+0x3c>
	{
	case MOTOR_1:

		u8_status=E_ok;
    2520:	19 82       	std	Y+1, r1	; 0x01
    2522:	04 c0       	rjmp	.+8      	; 0x252c <Motor_GetStatus+0x40>
		break;

	case MOTOR_2:

		u8_status=E_ok;
    2524:	19 82       	std	Y+1, r1	; 0x01
    2526:	02 c0       	rjmp	.+4      	; 0x252c <Motor_GetStatus+0x40>
		break;

	default:
		u8_status=E_NOk;
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
    252c:	89 81       	ldd	r24, Y+1	; 0x01
}
    252e:	26 96       	adiw	r28, 0x06	; 6
    2530:	0f b6       	in	r0, 0x3f	; 63
    2532:	f8 94       	cli
    2534:	de bf       	out	0x3e, r29	; 62
    2536:	0f be       	out	0x3f, r0	; 63
    2538:	cd bf       	out	0x3d, r28	; 61
    253a:	cf 91       	pop	r28
    253c:	df 91       	pop	r29
    253e:	08 95       	ret

00002540 <Steering_Init>:
 */
#include "Steering.h"
#define INITIAL_SPEED 0

ERROR_STATUS Steering_Init(void)
{
    2540:	df 93       	push	r29
    2542:	cf 93       	push	r28
    2544:	0f 92       	push	r0
    2546:	cd b7       	in	r28, 0x3d	; 61
    2548:	de b7       	in	r29, 0x3e	; 62
	ERROR_STATUS u8_status;
	u8_status=Motor_Init(MOTOR_1);
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	0e 94 7f 10 	call	0x20fe	; 0x20fe <Motor_Init>
    2550:	89 83       	std	Y+1, r24	; 0x01
	u8_status=Motor_Init(MOTOR_2);
    2552:	82 e0       	ldi	r24, 0x02	; 2
    2554:	0e 94 7f 10 	call	0x20fe	; 0x20fe <Motor_Init>
    2558:	89 83       	std	Y+1, r24	; 0x01
	u8_status=Motor_Start(MOTOR_1,INITIAL_SPEED);
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	60 e0       	ldi	r22, 0x00	; 0
    255e:	0e 94 93 11 	call	0x2326	; 0x2326 <Motor_Start>
    2562:	89 83       	std	Y+1, r24	; 0x01
	u8_status=Motor_Start(MOTOR_2,INITIAL_SPEED);
    2564:	82 e0       	ldi	r24, 0x02	; 2
    2566:	60 e0       	ldi	r22, 0x00	; 0
    2568:	0e 94 93 11 	call	0x2326	; 0x2326 <Motor_Start>
    256c:	89 83       	std	Y+1, r24	; 0x01
	return u8_status;
    256e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2570:	0f 90       	pop	r0
    2572:	cf 91       	pop	r28
    2574:	df 91       	pop	r29
    2576:	08 95       	ret

00002578 <Steering_SteerCar>:

/*****************************************************************************************/


ERROR_STATUS Steering_SteerCar(uint8_t Steering_CarCmd, uint8_t speed)
{
    2578:	df 93       	push	r29
    257a:	cf 93       	push	r28
    257c:	00 d0       	rcall	.+0      	; 0x257e <Steering_SteerCar+0x6>
    257e:	00 d0       	rcall	.+0      	; 0x2580 <Steering_SteerCar+0x8>
    2580:	0f 92       	push	r0
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
    2586:	8a 83       	std	Y+2, r24	; 0x02
    2588:	6b 83       	std	Y+3, r22	; 0x03
	ERROR_STATUS u8_status;
	switch(Steering_CarCmd)
    258a:	8a 81       	ldd	r24, Y+2	; 0x02
    258c:	28 2f       	mov	r18, r24
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	3d 83       	std	Y+5, r19	; 0x05
    2592:	2c 83       	std	Y+4, r18	; 0x04
    2594:	8c 81       	ldd	r24, Y+4	; 0x04
    2596:	9d 81       	ldd	r25, Y+5	; 0x05
    2598:	82 30       	cpi	r24, 0x02	; 2
    259a:	91 05       	cpc	r25, r1
    259c:	81 f1       	breq	.+96     	; 0x25fe <Steering_SteerCar+0x86>
    259e:	2c 81       	ldd	r18, Y+4	; 0x04
    25a0:	3d 81       	ldd	r19, Y+5	; 0x05
    25a2:	23 30       	cpi	r18, 0x03	; 3
    25a4:	31 05       	cpc	r19, r1
    25a6:	54 f4       	brge	.+20     	; 0x25bc <Steering_SteerCar+0x44>
    25a8:	8c 81       	ldd	r24, Y+4	; 0x04
    25aa:	9d 81       	ldd	r25, Y+5	; 0x05
    25ac:	00 97       	sbiw	r24, 0x00	; 0
    25ae:	89 f0       	breq	.+34     	; 0x25d2 <Steering_SteerCar+0x5a>
    25b0:	2c 81       	ldd	r18, Y+4	; 0x04
    25b2:	3d 81       	ldd	r19, Y+5	; 0x05
    25b4:	21 30       	cpi	r18, 0x01	; 1
    25b6:	31 05       	cpc	r19, r1
    25b8:	a1 f0       	breq	.+40     	; 0x25e2 <Steering_SteerCar+0x6a>
    25ba:	4b c0       	rjmp	.+150    	; 0x2652 <Steering_SteerCar+0xda>
    25bc:	8c 81       	ldd	r24, Y+4	; 0x04
    25be:	9d 81       	ldd	r25, Y+5	; 0x05
    25c0:	83 30       	cpi	r24, 0x03	; 3
    25c2:	91 05       	cpc	r25, r1
    25c4:	51 f1       	breq	.+84     	; 0x261a <Steering_SteerCar+0xa2>
    25c6:	2c 81       	ldd	r18, Y+4	; 0x04
    25c8:	3d 81       	ldd	r19, Y+5	; 0x05
    25ca:	24 30       	cpi	r18, 0x04	; 4
    25cc:	31 05       	cpc	r19, r1
    25ce:	99 f1       	breq	.+102    	; 0x2636 <Steering_SteerCar+0xbe>
    25d0:	40 c0       	rjmp	.+128    	; 0x2652 <Steering_SteerCar+0xda>
	{
	case CAR_STOP:
		Motor_Stop(MOTOR_1);
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	0e 94 37 12 	call	0x246e	; 0x246e <Motor_Stop>
		Motor_Stop(MOTOR_2);
    25d8:	82 e0       	ldi	r24, 0x02	; 2
    25da:	0e 94 37 12 	call	0x246e	; 0x246e <Motor_Stop>
		u8_status=E_ok;
    25de:	19 82       	std	Y+1, r1	; 0x01
    25e0:	3a c0       	rjmp	.+116    	; 0x2656 <Steering_SteerCar+0xde>
		break;

	case CAR_FORWARD:
		Motor_Direction(MOTOR_1, MOTOR_FORWARD);
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	61 e0       	ldi	r22, 0x01	; 1
    25e6:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <Motor_Direction>
		Motor_Direction(MOTOR_2, MOTOR_FORWARD);
    25ea:	82 e0       	ldi	r24, 0x02	; 2
    25ec:	61 e0       	ldi	r22, 0x01	; 1
    25ee:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <Motor_Direction>
		Motor_SpeedUpdate(MOTOR_1_2,speed);
    25f2:	83 e0       	ldi	r24, 0x03	; 3
    25f4:	6b 81       	ldd	r22, Y+3	; 0x03
    25f6:	0e 94 e5 11 	call	0x23ca	; 0x23ca <Motor_SpeedUpdate>
		u8_status=E_ok;
    25fa:	19 82       	std	Y+1, r1	; 0x01
    25fc:	2c c0       	rjmp	.+88     	; 0x2656 <Steering_SteerCar+0xde>
		break;

	case CAR_BACKWARD:
		Motor_Direction(MOTOR_1, MOTOR_BACKWARD);
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	62 e0       	ldi	r22, 0x02	; 2
    2602:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <Motor_Direction>
		Motor_Direction(MOTOR_2, MOTOR_BACKWARD);
    2606:	82 e0       	ldi	r24, 0x02	; 2
    2608:	62 e0       	ldi	r22, 0x02	; 2
    260a:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <Motor_Direction>
		Motor_SpeedUpdate(MOTOR_1_2,speed);
    260e:	83 e0       	ldi	r24, 0x03	; 3
    2610:	6b 81       	ldd	r22, Y+3	; 0x03
    2612:	0e 94 e5 11 	call	0x23ca	; 0x23ca <Motor_SpeedUpdate>
		u8_status=E_ok;
    2616:	19 82       	std	Y+1, r1	; 0x01
    2618:	1e c0       	rjmp	.+60     	; 0x2656 <Steering_SteerCar+0xde>
		break;

	case CAR_RIGHT:
		Motor_Direction(MOTOR_1, MOTOR_BACKWARD);
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	62 e0       	ldi	r22, 0x02	; 2
    261e:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <Motor_Direction>
		Motor_Direction(MOTOR_2, MOTOR_FORWARD);
    2622:	82 e0       	ldi	r24, 0x02	; 2
    2624:	61 e0       	ldi	r22, 0x01	; 1
    2626:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <Motor_Direction>
		Motor_SpeedUpdate(MOTOR_2,speed);
    262a:	82 e0       	ldi	r24, 0x02	; 2
    262c:	6b 81       	ldd	r22, Y+3	; 0x03
    262e:	0e 94 e5 11 	call	0x23ca	; 0x23ca <Motor_SpeedUpdate>
		u8_status=E_ok;
    2632:	19 82       	std	Y+1, r1	; 0x01
    2634:	10 c0       	rjmp	.+32     	; 0x2656 <Steering_SteerCar+0xde>
		break;

	case CAR_LEFT:
		Motor_Direction(MOTOR_1, MOTOR_FORWARD);
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	61 e0       	ldi	r22, 0x01	; 1
    263a:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <Motor_Direction>
		Motor_Direction(MOTOR_2, MOTOR_BACKWARD);
    263e:	82 e0       	ldi	r24, 0x02	; 2
    2640:	62 e0       	ldi	r22, 0x02	; 2
    2642:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <Motor_Direction>
		Motor_SpeedUpdate(MOTOR_1,speed);
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	6b 81       	ldd	r22, Y+3	; 0x03
    264a:	0e 94 e5 11 	call	0x23ca	; 0x23ca <Motor_SpeedUpdate>
		u8_status=E_ok;
    264e:	19 82       	std	Y+1, r1	; 0x01
    2650:	02 c0       	rjmp	.+4      	; 0x2656 <Steering_SteerCar+0xde>
		break;

	default:
		u8_status=E_NOk;
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
    2656:	89 81       	ldd	r24, Y+1	; 0x01
}
    2658:	0f 90       	pop	r0
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	cf 91       	pop	r28
    2664:	df 91       	pop	r29
    2666:	08 95       	ret

00002668 <Car_SM_Init>:
* Return value: u8_error- variable that describe the error status
* Description: Initiate the car state machine with state"forward at speed 80%",
* And initiate steering and ultrasonic functions
************************************************************************************/
ERROR_STATUS Car_SM_Init(void)
{
    2668:	df 93       	push	r29
    266a:	cf 93       	push	r28
    266c:	0f 92       	push	r0
    266e:	cd b7       	in	r28, 0x3d	; 61
    2670:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_status;
	u8_status |= Us_Init();
    2672:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <Us_Init>
    2676:	98 2f       	mov	r25, r24
    2678:	89 81       	ldd	r24, Y+1	; 0x01
    267a:	89 2b       	or	r24, r25
    267c:	89 83       	std	Y+1, r24	; 0x01
	u8_status |= Steering_Init();
    267e:	0e 94 a0 12 	call	0x2540	; 0x2540 <Steering_Init>
    2682:	98 2f       	mov	r25, r24
    2684:	89 81       	ldd	r24, Y+1	; 0x01
    2686:	89 2b       	or	r24, r25
    2688:	89 83       	std	Y+1, r24	; 0x01
	u8_status |= Steering_SteerCar(CAR_FORWARD,INITIAL_SPEED);
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	60 e5       	ldi	r22, 0x50	; 80
    268e:	0e 94 bc 12 	call	0x2578	; 0x2578 <Steering_SteerCar>
    2692:	98 2f       	mov	r25, r24
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	89 2b       	or	r24, r25
    2698:	89 83       	std	Y+1, r24	; 0x01
	u8_status |= E_ok;

	if(u8_status == E_ok)
    269a:	89 81       	ldd	r24, Y+1	; 0x01
    269c:	88 23       	and	r24, r24
    269e:	11 f4       	brne	.+4      	; 0x26a4 <Car_SM_Init+0x3c>
	{
		u8_status=E_ok;
    26a0:	19 82       	std	Y+1, r1	; 0x01
    26a2:	02 c0       	rjmp	.+4      	; 0x26a8 <Car_SM_Init+0x40>
	}
	else
	{
		u8_status = E_NOk;
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    26aa:	0f 90       	pop	r0
    26ac:	cf 91       	pop	r28
    26ae:	df 91       	pop	r29
    26b0:	08 95       	ret

000026b2 <Car_SM_Update>:
* Return value: u8_error- variable that describe the error status
* Description: changes car state according to the ultrasonic input
* and represents the motors output for each state
************************************************************************************/
ERROR_STATUS Car_SM_Update(void)
{
    26b2:	df 93       	push	r29
    26b4:	cf 93       	push	r28
    26b6:	00 d0       	rcall	.+0      	; 0x26b8 <Car_SM_Update+0x6>
    26b8:	00 d0       	rcall	.+0      	; 0x26ba <Car_SM_Update+0x8>
    26ba:	00 d0       	rcall	.+0      	; 0x26bc <Car_SM_Update+0xa>
    26bc:	cd b7       	in	r28, 0x3d	; 61
    26be:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_status;
	uint16_t Distance;
	uint8_t u8_state;
	u8_status |= Us_Trigger();
    26c0:	0e 94 2d 10 	call	0x205a	; 0x205a <Us_Trigger>
    26c4:	98 2f       	mov	r25, r24
    26c6:	8a 81       	ldd	r24, Y+2	; 0x02
    26c8:	89 2b       	or	r24, r25
    26ca:	8a 83       	std	Y+2, r24	; 0x02
	u8_status |= Us_GetDistance(&Distance);
    26cc:	ce 01       	movw	r24, r28
    26ce:	03 96       	adiw	r24, 0x03	; 3
    26d0:	0e 94 4e 10 	call	0x209c	; 0x209c <Us_GetDistance>
    26d4:	98 2f       	mov	r25, r24
    26d6:	8a 81       	ldd	r24, Y+2	; 0x02
    26d8:	89 2b       	or	r24, r25
    26da:	8a 83       	std	Y+2, r24	; 0x02

	if(Distance>NEAR_DISTANCE && Distance<=INTERMEDIATE_DISTANCE)
    26dc:	8b 81       	ldd	r24, Y+3	; 0x03
    26de:	9c 81       	ldd	r25, Y+4	; 0x04
    26e0:	00 97       	sbiw	r24, 0x00	; 0
    26e2:	39 f0       	breq	.+14     	; 0x26f2 <Car_SM_Update+0x40>
    26e4:	8b 81       	ldd	r24, Y+3	; 0x03
    26e6:	9c 81       	ldd	r25, Y+4	; 0x04
    26e8:	8a 31       	cpi	r24, 0x1A	; 26
    26ea:	91 05       	cpc	r25, r1
    26ec:	10 f4       	brcc	.+4      	; 0x26f2 <Car_SM_Update+0x40>
	{
		u8_state=NEAR;
    26ee:	19 82       	std	Y+1, r1	; 0x01
    26f0:	14 c0       	rjmp	.+40     	; 0x271a <Car_SM_Update+0x68>
	}
	else if(Distance>INTERMEDIATE_DISTANCE && Distance<=FAR_DISTANCE)
    26f2:	8b 81       	ldd	r24, Y+3	; 0x03
    26f4:	9c 81       	ldd	r25, Y+4	; 0x04
    26f6:	8a 31       	cpi	r24, 0x1A	; 26
    26f8:	91 05       	cpc	r25, r1
    26fa:	40 f0       	brcs	.+16     	; 0x270c <Car_SM_Update+0x5a>
    26fc:	8b 81       	ldd	r24, Y+3	; 0x03
    26fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2700:	84 32       	cpi	r24, 0x24	; 36
    2702:	91 05       	cpc	r25, r1
    2704:	18 f4       	brcc	.+6      	; 0x270c <Car_SM_Update+0x5a>
	{
		u8_state=INTERMEDIATE;
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	89 83       	std	Y+1, r24	; 0x01
    270a:	07 c0       	rjmp	.+14     	; 0x271a <Car_SM_Update+0x68>
	}
	else if(Distance>FAR_DISTANCE)
    270c:	8b 81       	ldd	r24, Y+3	; 0x03
    270e:	9c 81       	ldd	r25, Y+4	; 0x04
    2710:	84 32       	cpi	r24, 0x24	; 36
    2712:	91 05       	cpc	r25, r1
    2714:	10 f0       	brcs	.+4      	; 0x271a <Car_SM_Update+0x68>
	{
		u8_state=FAR;
    2716:	82 e0       	ldi	r24, 0x02	; 2
    2718:	89 83       	std	Y+1, r24	; 0x01
	}

	switch(u8_state)
    271a:	89 81       	ldd	r24, Y+1	; 0x01
    271c:	28 2f       	mov	r18, r24
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	3e 83       	std	Y+6, r19	; 0x06
    2722:	2d 83       	std	Y+5, r18	; 0x05
    2724:	8d 81       	ldd	r24, Y+5	; 0x05
    2726:	9e 81       	ldd	r25, Y+6	; 0x06
    2728:	81 30       	cpi	r24, 0x01	; 1
    272a:	91 05       	cpc	r25, r1
    272c:	89 f0       	breq	.+34     	; 0x2750 <Car_SM_Update+0x9e>
    272e:	2d 81       	ldd	r18, Y+5	; 0x05
    2730:	3e 81       	ldd	r19, Y+6	; 0x06
    2732:	22 30       	cpi	r18, 0x02	; 2
    2734:	31 05       	cpc	r19, r1
    2736:	d1 f0       	breq	.+52     	; 0x276c <Car_SM_Update+0xba>
    2738:	8d 81       	ldd	r24, Y+5	; 0x05
    273a:	9e 81       	ldd	r25, Y+6	; 0x06
    273c:	00 97       	sbiw	r24, 0x00	; 0
    273e:	e9 f4       	brne	.+58     	; 0x277a <Car_SM_Update+0xc8>
	{
		case NEAR:
			u8_status |= Steering_SteerCar(CAR_FORWARD,LOW_SPEED);
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	6e e1       	ldi	r22, 0x1E	; 30
    2744:	0e 94 bc 12 	call	0x2578	; 0x2578 <Steering_SteerCar>
    2748:	9a 81       	ldd	r25, Y+2	; 0x02
    274a:	89 2b       	or	r24, r25
    274c:	8a 83       	std	Y+2, r24	; 0x02
    274e:	15 c0       	rjmp	.+42     	; 0x277a <Car_SM_Update+0xc8>
			break;
		case INTERMEDIATE:
			u8_status |= Steering_SteerCar(CAR_RIGHT,FULL_SPEED);
    2750:	83 e0       	ldi	r24, 0x03	; 3
    2752:	64 e6       	ldi	r22, 0x64	; 100
    2754:	0e 94 bc 12 	call	0x2578	; 0x2578 <Steering_SteerCar>
    2758:	9a 81       	ldd	r25, Y+2	; 0x02
    275a:	89 2b       	or	r24, r25
    275c:	8a 83       	std	Y+2, r24	; 0x02
			softwareDelayMs(DELAY_FOR_TURN);
    275e:	64 ef       	ldi	r22, 0xF4	; 244
    2760:	71 e0       	ldi	r23, 0x01	; 1
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	0e 94 dd 13 	call	0x27ba	; 0x27ba <softwareDelayMs>
    276a:	07 c0       	rjmp	.+14     	; 0x277a <Car_SM_Update+0xc8>
			break;
		case FAR:
			u8_status |= Steering_SteerCar(CAR_BACKWARD,LOW_SPEED);
    276c:	82 e0       	ldi	r24, 0x02	; 2
    276e:	6e e1       	ldi	r22, 0x1E	; 30
    2770:	0e 94 bc 12 	call	0x2578	; 0x2578 <Steering_SteerCar>
    2774:	9a 81       	ldd	r25, Y+2	; 0x02
    2776:	89 2b       	or	r24, r25
    2778:	8a 83       	std	Y+2, r24	; 0x02
			break;
	}

	softwareDelayMs(DELAY_FOR_GET_NEW_READING);
    277a:	64 e6       	ldi	r22, 0x64	; 100
    277c:	70 e0       	ldi	r23, 0x00	; 0
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	0e 94 dd 13 	call	0x27ba	; 0x27ba <softwareDelayMs>

	if(u8_status == E_ok)
    2786:	8a 81       	ldd	r24, Y+2	; 0x02
    2788:	88 23       	and	r24, r24
    278a:	11 f4       	brne	.+4      	; 0x2790 <Car_SM_Update+0xde>
	{
		u8_status=E_ok;
    278c:	1a 82       	std	Y+2, r1	; 0x02
    278e:	02 c0       	rjmp	.+4      	; 0x2794 <Car_SM_Update+0xe2>
	}
	else
	{
		u8_status = E_NOk;
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	8a 83       	std	Y+2, r24	; 0x02
	}
	return u8_status;
    2794:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2796:	26 96       	adiw	r28, 0x06	; 6
    2798:	0f b6       	in	r0, 0x3f	; 63
    279a:	f8 94       	cli
    279c:	de bf       	out	0x3e, r29	; 62
    279e:	0f be       	out	0x3f, r0	; 63
    27a0:	cd bf       	out	0x3d, r28	; 61
    27a2:	cf 91       	pop	r28
    27a4:	df 91       	pop	r29
    27a6:	08 95       	ret

000027a8 <main>:




int main(void)
{
    27a8:	df 93       	push	r29
    27aa:	cf 93       	push	r28
    27ac:	cd b7       	in	r28, 0x3d	; 61
    27ae:	de b7       	in	r29, 0x3e	; 62
	}
*/

	/****************************************************************************/

	Car_SM_Init();
    27b0:	0e 94 34 13 	call	0x2668	; 0x2668 <Car_SM_Init>

	while(TRUE)
	{
		Car_SM_Update();
    27b4:	0e 94 59 13 	call	0x26b2	; 0x26b2 <Car_SM_Update>
    27b8:	fd cf       	rjmp	.-6      	; 0x27b4 <main+0xc>

000027ba <softwareDelayMs>:
#include "softwareDelay.h"
#define CLEAR 0


void softwareDelayMs(uint32_t u32_delay_in_ms)
{
    27ba:	df 93       	push	r29
    27bc:	cf 93       	push	r28
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
    27c2:	2c 97       	sbiw	r28, 0x0c	; 12
    27c4:	0f b6       	in	r0, 0x3f	; 63
    27c6:	f8 94       	cli
    27c8:	de bf       	out	0x3e, r29	; 62
    27ca:	0f be       	out	0x3f, r0	; 63
    27cc:	cd bf       	out	0x3d, r28	; 61
    27ce:	69 87       	std	Y+9, r22	; 0x09
    27d0:	7a 87       	std	Y+10, r23	; 0x0a
    27d2:	8b 87       	std	Y+11, r24	; 0x0b
    27d4:	9c 87       	std	Y+12, r25	; 0x0c
	uint32_t i;
	uint32_t j;
    for(i=CLEAR;i<u32_delay_in_ms;i++)
    27d6:	1d 82       	std	Y+5, r1	; 0x05
    27d8:	1e 82       	std	Y+6, r1	; 0x06
    27da:	1f 82       	std	Y+7, r1	; 0x07
    27dc:	18 86       	std	Y+8, r1	; 0x08
    27de:	27 c0       	rjmp	.+78     	; 0x282e <softwareDelayMs+0x74>
    {
    	for(j=CLEAR;j<NUMBER_OF_ITERATIONS;j++)
    27e0:	19 82       	std	Y+1, r1	; 0x01
    27e2:	1a 82       	std	Y+2, r1	; 0x02
    27e4:	1b 82       	std	Y+3, r1	; 0x03
    27e6:	1c 82       	std	Y+4, r1	; 0x04
    27e8:	0b c0       	rjmp	.+22     	; 0x2800 <softwareDelayMs+0x46>
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	9a 81       	ldd	r25, Y+2	; 0x02
    27ee:	ab 81       	ldd	r26, Y+3	; 0x03
    27f0:	bc 81       	ldd	r27, Y+4	; 0x04
    27f2:	01 96       	adiw	r24, 0x01	; 1
    27f4:	a1 1d       	adc	r26, r1
    27f6:	b1 1d       	adc	r27, r1
    27f8:	89 83       	std	Y+1, r24	; 0x01
    27fa:	9a 83       	std	Y+2, r25	; 0x02
    27fc:	ab 83       	std	Y+3, r26	; 0x03
    27fe:	bc 83       	std	Y+4, r27	; 0x04
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	9a 81       	ldd	r25, Y+2	; 0x02
    2804:	ab 81       	ldd	r26, Y+3	; 0x03
    2806:	bc 81       	ldd	r27, Y+4	; 0x04
    2808:	81 3b       	cpi	r24, 0xB1	; 177
    280a:	21 e0       	ldi	r18, 0x01	; 1
    280c:	92 07       	cpc	r25, r18
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	a2 07       	cpc	r26, r18
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	b2 07       	cpc	r27, r18
    2816:	48 f3       	brcs	.-46     	; 0x27ea <softwareDelayMs+0x30>

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
	uint32_t i;
	uint32_t j;
    for(i=CLEAR;i<u32_delay_in_ms;i++)
    2818:	8d 81       	ldd	r24, Y+5	; 0x05
    281a:	9e 81       	ldd	r25, Y+6	; 0x06
    281c:	af 81       	ldd	r26, Y+7	; 0x07
    281e:	b8 85       	ldd	r27, Y+8	; 0x08
    2820:	01 96       	adiw	r24, 0x01	; 1
    2822:	a1 1d       	adc	r26, r1
    2824:	b1 1d       	adc	r27, r1
    2826:	8d 83       	std	Y+5, r24	; 0x05
    2828:	9e 83       	std	Y+6, r25	; 0x06
    282a:	af 83       	std	Y+7, r26	; 0x07
    282c:	b8 87       	std	Y+8, r27	; 0x08
    282e:	2d 81       	ldd	r18, Y+5	; 0x05
    2830:	3e 81       	ldd	r19, Y+6	; 0x06
    2832:	4f 81       	ldd	r20, Y+7	; 0x07
    2834:	58 85       	ldd	r21, Y+8	; 0x08
    2836:	89 85       	ldd	r24, Y+9	; 0x09
    2838:	9a 85       	ldd	r25, Y+10	; 0x0a
    283a:	ab 85       	ldd	r26, Y+11	; 0x0b
    283c:	bc 85       	ldd	r27, Y+12	; 0x0c
    283e:	28 17       	cp	r18, r24
    2840:	39 07       	cpc	r19, r25
    2842:	4a 07       	cpc	r20, r26
    2844:	5b 07       	cpc	r21, r27
    2846:	60 f2       	brcs	.-104    	; 0x27e0 <softwareDelayMs+0x26>
    	for(j=CLEAR;j<NUMBER_OF_ITERATIONS;j++)
    	{

    	}
    }
}
    2848:	2c 96       	adiw	r28, 0x0c	; 12
    284a:	0f b6       	in	r0, 0x3f	; 63
    284c:	f8 94       	cli
    284e:	de bf       	out	0x3e, r29	; 62
    2850:	0f be       	out	0x3f, r0	; 63
    2852:	cd bf       	out	0x3d, r28	; 61
    2854:	cf 91       	pop	r28
    2856:	df 91       	pop	r29
    2858:	08 95       	ret

0000285a <__udivmodsi4>:
    285a:	a1 e2       	ldi	r26, 0x21	; 33
    285c:	1a 2e       	mov	r1, r26
    285e:	aa 1b       	sub	r26, r26
    2860:	bb 1b       	sub	r27, r27
    2862:	fd 01       	movw	r30, r26
    2864:	0d c0       	rjmp	.+26     	; 0x2880 <__udivmodsi4_ep>

00002866 <__udivmodsi4_loop>:
    2866:	aa 1f       	adc	r26, r26
    2868:	bb 1f       	adc	r27, r27
    286a:	ee 1f       	adc	r30, r30
    286c:	ff 1f       	adc	r31, r31
    286e:	a2 17       	cp	r26, r18
    2870:	b3 07       	cpc	r27, r19
    2872:	e4 07       	cpc	r30, r20
    2874:	f5 07       	cpc	r31, r21
    2876:	20 f0       	brcs	.+8      	; 0x2880 <__udivmodsi4_ep>
    2878:	a2 1b       	sub	r26, r18
    287a:	b3 0b       	sbc	r27, r19
    287c:	e4 0b       	sbc	r30, r20
    287e:	f5 0b       	sbc	r31, r21

00002880 <__udivmodsi4_ep>:
    2880:	66 1f       	adc	r22, r22
    2882:	77 1f       	adc	r23, r23
    2884:	88 1f       	adc	r24, r24
    2886:	99 1f       	adc	r25, r25
    2888:	1a 94       	dec	r1
    288a:	69 f7       	brne	.-38     	; 0x2866 <__udivmodsi4_loop>
    288c:	60 95       	com	r22
    288e:	70 95       	com	r23
    2890:	80 95       	com	r24
    2892:	90 95       	com	r25
    2894:	9b 01       	movw	r18, r22
    2896:	ac 01       	movw	r20, r24
    2898:	bd 01       	movw	r22, r26
    289a:	cf 01       	movw	r24, r30
    289c:	08 95       	ret

0000289e <_exit>:
    289e:	f8 94       	cli

000028a0 <__stop_program>:
    28a0:	ff cf       	rjmp	.-2      	; 0x28a0 <__stop_program>
